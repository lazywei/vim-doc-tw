*usr_02.txt*    For Vim version 7.3.     最後修改：2010年8月

		  VIM 用戶手冊 － Bram Moolenaar
		     (譯者：Nek_in http://vimcdoc.sf.net)

 			    Vim 初 步


本章提供足夠的信息使你用夠使用 Vim 來做基本的編輯。這裡提供的方法不一定是高效
快捷的。但起碼是有效的。花些時間去練習這些命令，這是後面的知識的基礎。

|02.1|	第一次運行 Vim
|02.2|	插入文本
|02.3|	移動光標
|02.4|	刪除字符
|02.5|	撤銷與重做
|02.6|	其它編輯命令
|02.7|	退出
|02.8|	尋求幫助

    下一章：|usr_03.txt| 移動
    前一章：|usr_01.txt| 關於本手冊
      目錄：|usr_toc.txt|

==============================================================================
*02.1*	第一次運行 Vim

啟動 Vim 的命令如下：
>
	gvim file.txt
<
在 UNIX 操作系統中，你可以在任意命令提示符下輸入這個命令。如果你用的是
Microsoft Windows，啟動一個 MS-DOS 窗口，再輸入這個命令。
    無論哪一種方式，現在 Vim 開始編輯一個名為 file.txt 的文件了。由於這是一個
新建文件，你會得到一個空的窗口。屏幕看起來會像下面這樣：

	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [New file]			|
	+---------------------------------------+
		('#"是當前光標的位置)

以波紋線 (~) 開頭的行表示該行在文件中不存在。換句話說，如果 Vim 打開的文件不能
充滿這個顯示的屏幕，它就會顯示以波紋線開頭的行。在屏幕的底部，有一個消息行指示
文件名為 file.txt 並且說明這是一個新建的文件。這行信息是臨時的，新的信息可以覆
蓋它。


VIM 命 令

gvim 命令建立一個新窗口用於編輯。如果你用的是這個命令：
>
	vim file.txt
<
則編輯在命令窗口內進行。換句話說，如果你在 xterm 中運行，編輯器使用 xterm 窗
口。如果你用的是 Microsoft Window 的 MS-DOS 窗口，編輯器使用這個 MS-DOS 窗口。
兩個版本顯示出來的文本看起來是一樣的。但如果你用的是 gvim，就會有其他特性，如
菜單欄。後面會有更多的描述。

==============================================================================
*02.2*	插入文本

Vim 是一個多模式的編輯器。就是說，在不同模式下，編輯器的響應是不同的。在普通模
式下，你敲入的字符只是命令；而在插入模式，你敲入的字符就成為插入的文本了。
    當你剛剛進入 Vim，它處在普通模式。通過敲入 "i" 命令 (i 是插入 (Insert) 的
縮寫) 可以啟動插入模式，這樣你就可以輸入文字了，這些文字將被插入到文件中。不用
擔心輸錯了，你隨後還能夠修正它。要輸入下文的程序員打油詩，你可以這樣敲：
>
	iA very intelligent turtle
	Found programming UNIX a hurdle
<
輸入 "turtle" 後，按回車開始一個新行。最後，你輸入 <Esc> 鍵退出插入模式而回到
普通模式。現在在你的 Vim 窗口中就有兩行文字了：

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


我 在 什 麼 模 式？

要看到你在什麼模式，輸入如下命令：
>
	:set showmode
<
你會發現當你敲入冒號後，Vim 把光標移到窗口的最後一行。那裡是你輸入 "冒號命令"
(以冒號開頭的命令) 的地方，敲入回車結束這個命令的輸入 (所有的冒號命令都用這種
方式結束)。
    現在，如果你輸入 "i" 命令，Vim 會在窗口的底部顯示 --INSERT-- (中文模式顯示
的是 --插入--  譯者注)，這表示你在插入模式。

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+

如果你輸入 <Esc> 回到普通模式，最後一行又變成空白。


擺 脫 麻 煩

Vim 新手常常遇到的一個問題是不知道自己在什麼模式下，可能是因為忘了，也可能是因
為不小心敲了一個切換模式的命令。無論你在什麼模式，要回到普通模式，只要敲 <Esc>
就可以了。有時你需要敲兩次，如果 Vim 發出 "嘀" 一聲，就表示你已經在普通模式
了。

==============================================================================
*02.3*	移動光標

回到普通模式後，你可以使用如下命令移動光標：
    
	h	左						*hjkl*
	j	下
	k	上
	l	右

這些命令看起來是隨便選的。無論如何，誰聽說過用 l 表示右的？但實際上，作這些選
擇是有理由的：移動光標是最常用的編輯器命令。而這些鍵位在你的右手本位。也就是
說：這種鍵位的設定使你可以用最快的速度執行移動操作 (特別是當你用十指輸入的時
候)。

	備註:
	你還可以用方向鍵移動光標，但這樣會減慢你輸入的速度，因為你必須把你的手
	從字母鍵移動到方向鍵。想像一下，你在一個小時內可要這樣做幾百次，這可要
	花相當多的時間的。
	    而且，有一些鍵盤是沒有方向鍵的，或者放在一些很特別的地方。所以，知
	道 hjkl 的用法在這些情況下就很有幫助了。

記住這些命令的一個方法是：h 在左邊，l 在右邊，j 指著下面。用圖表示如下：
>
		       k
		   h     l
		     j
<
學習這些命令的最好方法是使用它。用 "i" 命令輸入更多的文字。然後用 hjkl 鍵移動
光標並在某些地方輸入一些單詞。別忘了用 <Esc> 切換回普通模式。|vimtutor|也是一
個練習的好辦法。

==============================================================================
*02.4*	刪除字符

要刪除一個字符，把光標移到它上面然後輸入 "x"。(這是對以前的打字機的一種回歸，
那時你通過在字符上輸入 xxxx 刪除它) 例如，把光標移到行首，然後輸入xxxxxxx (七
個x) 可以刪除 "A very "。結果看起來這樣：

	+---------------------------------------+
	|intelligent turtle			|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

現在你可以輸入新的字符了，例如，通過輸入：
>
	iA young <Esc>
<
這個命令啟動一次插入操作 (那個 "i")，並插入 "A young"，然後退出插入模式 (最後
一個 <Esc>)。結果是：

	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


刪 除 一 行

要刪除一整行，使用 "dd" 命令，後一行會移上來填掉留下的空行：

	+---------------------------------------+
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

刪 除 一 個 換 行 符

在 Vim 中你可以把兩行連起來，這意味著刪除兩行間的換行符。"J" 命令用於完成這個
功能。
    以下面兩行為例：
>
	A young intelligent
	turtle
<
把光標移到第一行，然後按 "J"：
>
	A young intelligent turtle
<
==============================================================================
*02.5*	撤銷與重做

假設現在你刪得太多了。當然，你可以重新輸入需要的內容。不過，你還有一個更簡單的
選擇。"u" 命令撤銷上一個編輯操作。看看下面這個操作：先用 "dd" 刪除一行，再敲
"u"，該行又回來了。
    再給一個例子：把光標移到第一行的 A 上：
>
	A young intelligent turtle
<
現在輸入 xxxxxxx 刪除 "A young"。結果如下：

	intelligent turtle ~

輸入 "u" 撤銷最後一個刪除操作。那個刪除操作刪除字符 g，所以撤銷命令恢復這個字
符：

	g intelligent turtle ~

下一個 u 命令恢復倒數第二個被刪除的字符：

	ng intelligent turtle ~

下一個 u 命令恢復 u，如此類推：

	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	young intelligent turtle ~
	A young intelligent turtle ~

	備註:
	如果你輸入 "u" 兩次，你的文本恢復原樣，那應該是你的 Vim 被配置在 Vi 兼
	容模式了。要修正這個問題，看看這裡：|not-compatible|。
	本文假定你工作在 "Vim 的方式"。你可能更喜歡舊的 Vi 的模式，但是你必須
	小心本文中的一些小區別。


重 做

如果你撤銷得太多，你可以輸入 CTRL-R (redo) 回退前一個命令。換句話說，它撤銷一
個撤銷。要看執行的例子，輸入 CTRL-R 兩次。字符 A 和它後面的空格就出現了：

	young intelligent turtle ~

有一個特殊版本的撤銷命令："U" (行撤銷)。行撤銷命令撤銷所有在最近編輯的行上的操
作。 輸入該命令兩次取消前一個 "U"：

	A very intelligent turtle ~
	  xxxx			刪除 very

	A intelligent turtle ~
		      xxxxxx	刪除turtle

	A intelligent ~
				用 "U" 恢復行
	A very intelligent turtle ~
				用 "u" 撤銷 "U"
	A intelligent ~

"U" 命令本身就是一個改變操作，"u" 命令撤銷該操作，CTRL-R 命令重做該操作。有點
亂吧，但不用擔心，用 "u" 和 CTRL-R 命令你可以切換到任何你編輯過的狀態。更多信
息可見 |32.2| 一節。

==============================================================================
*02.6*	其它編輯命令

Vim 有大量的命令可以修改文本。參見 |Q_in|和下文。這裡是一些經常用到的：

添 加

"i" 命令在光標所在字符前面插入字符。一般情況下，這就夠用了，但如果你剛好想在
行尾加東西怎麼辦？要解決這個問題，你需要在文本後插入字符。這通過 "a" (append，
附加) 命令實現。
    例如，要把如下行

	and that's not saying much for the turtle. ~
改為
	and that's not saying much for the turtle!!! ~

把光標移到行尾的句號上。然後輸入 "x" 刪除它。現在光標處於一行的尾部了，現在輸
入
>
	a!!!<Esc>
<
添加三個感歎號到 turtle 的 "e" 後面：

	and that's not saying much for the turtle!!! ~


開 始 一 個 新 行

"o" 命令在光標下方建立一個新的空行，並把 Vim 切換到插入模式。然後你可以在這個
新行內輸入文本。
    假定你的光標在下面兩行中第一行的某個地方：

	A very intelligent turtle ~
	Found programming UNIX a hurdle ~

如果你現在用 "o" 命令並輸入新的文字：
>

	oThat liked using Vim<Esc>

結果會是：

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming UNIX a hurdle ~

"O" 命令 (大寫) 在光標上方打開一個新行。


指 定 計 數

假定你想向上移動 9 行，你可以輸入 "kkkkkkkkk" 或者你可以輸入"9k"。實際上，你可
以在很多命令前面加一個數字。例如在這章的前面，你通過輸入 "a!!!<Esc>" 增加三個
感歎號。另一個方法是使用命令 "3a!<Esc>"。計數 3 要求把後面的命令執行三次。同樣
的，要刪除三個字符，可以使用 "3x"。計數總是放在要被處理多次的命令的前面。

==============================================================================
*02.7*	退出

使用 "ZZ" 命令可以退出。這個命令保存文件並退出。
	備註:
	與其他編輯器不一樣，Vim 不會自動建立一個備份文件。如果你輸入 "ZZ"，你
	的修改立即生效並且不能恢復。你可以配置 Vim 讓它產生一個備份文件，參見
	|07.4|。


放 棄 修 改

有時你會做了一系列的修改才突然發現還不如編輯之前。不用擔心，Vim 有 "放棄修改並
退出" 的命令，那就是：
>
	:q!
<
別忘了按回車使你的命令生效。

如果你關心細節，此命令有三部分組成：冒號 (:)，它使 Vim 進入命令模式， q 命令，
它告訴 Vim 退出，而感歎號是強制命令修飾符。
    這裡，強制命令修飾符是必要的，它強制性地要求 Vim 放棄修改並退出。如果你只
是輸入 ":q"，Vim 會顯示一個錯誤信息並拒絕退出：

	E37: No write since last change (use ! to override) ~

通過指定強制執行，你實際上在告訴 Vim："我知道我所做的看起來很傻，但我長大了，
知道自己在做什麼。"

如果你放棄修改後還想重新編輯，用 ":e!" 命令可以重新裝載原來的文件。

==============================================================================
*02.8*	尋求幫助

所有你想知道的東西，都可以在 Vim 幫助文件中找到答案，隨便問！
    要獲得一般的幫助，用這個命令：
>
	:help
<
你還可以用第一個功能鍵 <F1>。如果你的鍵盤上有一個 <Help> 鍵，可能也有效。
    如果你不指定主題，":help" 將命令顯示一個總覽的幫助窗口。Vim 的作者在幫助系
統方面使用了一個很聰明的方案 (也許可以說是很懶惰的方案)：他們用一個普通的編輯
窗口來顯示幫助。你可以在幫助窗口中使用任何普通的 Vim 命令移動光標。所以，h，
j，k 和 l 還是表示左，下，上和右。
    要退出幫助窗口，用退出一個普通窗口的命令："ZZ"。這只會退出幫助窗口，而不會
退出 Vim。

當你閱讀幫助的時候，你會發現有一些文字被一對豎線括起來了 (例如 |help|)。這表示
一個超級鏈接。如果你把光標移到這兩個豎線之間並按 CTRL-] (標籤跳轉命令)，幫助系
統會把你引向這個超級鏈接指向的主題。(由於不是本章的重點，這裡不詳細討論，Vim
對超級鏈接的術語是 "標籤" (tag)，所以 CTRL-] 實際是跳轉到光標所在單詞為名的標
簽所在的位置。)
    跳轉幾次以後，你可能想回到原來的地方。CTRL-T (標籤退棧) 把你送回前一個跳轉
點。CTRL-O (跳轉到前一個位置) 也能完成相同的功能。
    在幫助屏幕的頂上，有這樣的記號：*help.txt*。"*" 之間的名字被幫助系統用來定
義一個標籤 (也就是超級鏈接的目標)。
    參見 |29.1|可以瞭解更多關於標籤的內容。

要獲得特定主題的幫助，使用如下命令：
>
	:help {主題}
<
例如，要獲得 "x" 命令的幫助，輸入如下命令：
>
	:help x
<
要知道如何刪除文本，使用如下命令：
>
	:help deleting
<
要獲得所有命令的幫助索引，使用如下命令：
>
	help index
<
如果你需要獲得一個包含控制字符的命令的幫助 (例如 CTRL-A)，你可以在它前面加上前
綴 "CTRL-"。
>
	help CTRL-A
<
Vim 有很多模式。在默認情況下，幫助系統顯示普通模式的命令。例如，如下命令顯示
普通模式的 CTRL-H 命令的幫助：
>
	:help CTRL-H
<
要表示其他模式，可以使用模式前綴。如果你需要插入模式的命令幫助，使用 "i_" 前
綴。例如對於 CTRL-H，你可以用如下命令：
>
	:help i_CTRL-H
<
當你啟動 Vim，你可以使用一些命令行參數。這些參數以短橫線開頭 (-)。例如知道要
-t 這個參數是幹什麼用的，可以使用這個命令：
>
	:help -t
<
Vim 有大量的選項讓你定制這個編輯器。如果你要獲得選項的幫助，你需要把它括在一個
單引號中。例如，要知道 'number' 這個選項幹什麼的，使用如下命令：
>
	:help 'number'

如果你看到一個你不能理解的錯誤信息，例如：
>
	E37: No write since last change (use ! to override) ~

你可以使用使用E開頭的錯誤號找關於它的幫助：
>
	:help E37
<

小結:		 				*help-summary*  >
	:help
<		提供非常概括的幫助。往下滾動，可以看到所有幫助文件的列表，包括
		本地添加的文件 (即不是 Vim 發佈帶來的)。 >
	:help user-toc.txt
<		用戶手冊的內容目錄。 >
	:help :subject
<		Ex-命令 "subject"，例如下例: >
	:help :help
<		關於如何得到幫助的幫助。 >
	:help abc
<		普通模式命令 "abc"。 >
	:help CTRL-B
<		普通模式下控制鍵 <C-B>。 >
	:help i_abc
	:help i_CTRL-B
<		同上，但在插入模式下。 >
	:help v_abc
	:help v_CTRL-B
<		同上，但在可視模式下。 >
	:help c_abc
	:help c_CTRL-B
<		同上，但在命令行模式下。 >
	:help 'subject'
<		選項 'subject'。 >
	:help subject()
<		函數 "subject"。 >
	:help -subject
<		命令行選項 "-subject"。 >
	:help +subject
<		編譯時特性 "+subject"。 >
	:help EventName
<		自動命令事件 "EventName"。 >
	:help digraphs.txt
<		幫助文件 "digraph.txt" 的頂部。
		其他幫助文件亦同。 >
	:help pattern<Tab>
<		尋找 "pattern" 開始的一個幫助標籤。重複按 <Tab> 找下一個。 >
	:help pattern<Ctrl-D>
<		一次性列出所有匹配 "pattern" 的幫助標籤。 >
	:helpgrep pattern
<		在所有幫助文件的全部文本中尋找模式 "pattern"，並跳到第一個匹
		配。要跳到其它的匹配，可用: >
	    :cn
<			下一個匹配 >
	    :cprev
	    :cN
<			前一個匹配 >
	    :cfirst
	    :clast
<			第一個或最後一個匹配 >
	    :copen
	    :cclose
<			打開/關閉 quickfix 窗口；按 <Enter> 跳轉到光標所在的項
			目上


==============================================================================

下一章： |usr_03.txt|  移動

版權：參見  |manual-copyright|     vim:tw=78:ts=8:ft=help:norl:
