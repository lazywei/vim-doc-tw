*version4.txt*  For Vim version 7.3.  最近改變: 2006年2月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net


本文檔列出 Vim 3.0 和 Vim 4.0 不兼容的不同之處。儘管這裡提到 4.0，但也適用於
4.1，4.2 版本等。

本文件對所有從 Vim 3.0 升級的用戶很重要。仔細閱讀以避免意想不到的問題。

'backup' 選項改變缺省值				|backup-changed|
備份文件擴展名改變				|backup-extension|
交換文件結構改變				|swapfile-changed|
"-w scriptout" 參數改變				|scriptout-changed|
退格和刪除鍵					|backspace-delete|
| 轉義鍵改變					|escape-bar|
鍵碼改變					|key-codes-changed|
終端選項改變					|termcap-changed|
'errorformat' 選項改變				|errorformat-changed|
不再有 'graphic' 選項				|graphic-option-gone|
不再有 'yankendofline' 選項			|ye-option-gone|
'icon' 和 'title' 缺省值改變			|icon-changed|
'highlight' 選項改變				|highlight-changed|
'tildeop' 和 'weirdinvert' 縮寫改變		|short-name-changed|
"v"、"V" 和 "CTRL-V" 在可視模式的改變		|use-visual-cmds|
刪除插入模式的 CTRL-B 功能			|toggle-revins|


'backup' 選項改變缺省值					*backup-changed*
-------------------------------

過去 'backup' 缺省值是打開的。結果是在原來文件被覆蓋的時候備份文件建立起來。

現在 'backup' 的缺省值是關閉。一旦文件成功的寫入，備份文件就刪除了。如果你想保
留備份文件，在你的 vimrc 文件裡置位 'backup'。這個改變的原因是許多人抱怨留下備
份文件和 Vi 不兼容。					|'backup'|


備份文件擴展名改變					*backup-extension*
---------------------------------

過去備份文件的擴展名是 '.bak'。因為別的程序也用這個擴展名，而且有的用戶也自己
建立用這個擴展名的備份，現在換成了不太明顯的 "~"。另外一個好處是這樣使用較少的
空間，尤其是對短文件名的系統很有效。比如，在 MS-DOS 上 "longfile.c" 和
"longfile.h" 用的備份文件名本來都是 "longfile.bak"；現在他們分別成為
"longfile.c~" 和 "longfile.h~"。

如果你寧可還是使用 ".bak"，你可以設置 'backupext' 選項: >
	:set bex=.bak


交換文件結構改變					*swapfile-changed*
------------------------------

交換文件的內容增加了若干參數。Vim 保存用戶名字和被編輯文件的其它信息，使得恢復
更加容易，而且能知道交換文件是從哪裡來的。交換文件的第一部分可以識別字節順序或
者 sizeof(int) 不同的機器，當你在這樣的機器上試圖恢復時，你會得到錯誤信息，提
示這不可能。

因為這個改變，3.0 和 4.0 的交換文件不能互換。如果你有一個 3.0 的崩潰對話的交換
文件，用 Vim 3.0 恢復之---不要用 4.0。			|swap-file|


"-w scriptout" 參數改變					*scriptout-changed*
-------------------------------

"vim -w scriptout" 過去用來附加到 scriptout 文件。因為這不合邏輯，現在它用來建
立新文件。已有的文件不會被覆蓋 (為了避免破壞期待這個附加功能的人不小心刪除已有
的文件)。
[後來這個也刪除了]						|-w|


退格和刪除鍵						*backspace-delete*
-------------------------

3.0 裡，刪除和退格鍵在插入模式裡都起到退格的功能；它們刪除光標左面的字符。在
4.0 裡，刪除鍵有了新功能: 他刪除光標所在的字符，就像在命令行上那樣。如果光標在
行尾之後並且置位了 'bs'，兩行會連接起來。		|<Del>| |i_<Del>|

3.0 裡退格鍵總是定義為 CTRL-H，而刪除鍵定義為 CTRL-?。4.0 裡退格和刪除鍵的代碼
通過 termcap 和 termlib 定義，而且可以通過 Unix 的 "stty erase" 調整。這使得用
戶可以根據他們的鍵盤重新定義這些鍵。			 |<BS>| |i_<BS>|

如果你喜歡插入模式下的退格和刪除鍵的舊行為，在你的 vimrc 裡加入一行: >

	inoremap ^? ^H

你也許想加上這些行來調整 <BS> 和 <Del> 的代碼:

	set t_kb=^H
	set t_kD=^?

(用 CTRL-V CTRL-H 輸入 ^H，用 CTRL-V CTRL-? 或者 <Del> 輸入 ^?。)

如果 t_kb 的值正確，但是 t_kD 的值不對，使用 ":fixdel" 命令。它會根據 t_kb 的
值設置 t_kD 的值。這可用於使用不同終端的場合。		|:fixdel|

如果 ^H 不是識別成 <BS> 或者 <Del>，它的用法類似於退格鍵。


| 轉義鍵改變						*escape-bar*
--------------------

如果 'cpoptions' 裡有 'b' 標誌位，反斜槓不能用於在映射和縮寫命令裡轉義 '|'。只
有 CTRL-V 可以。這是 Vi 兼容的。如果工作在 Vi 兼容模式下，而在映射裡為了加入豎
槓而包含 "\|"，必須把它改成 "^V|"。參見 |:bar|。


鍵碼改變						*key-codes-changed*
-----------------

鍵碼的內部表示發生了很大的改變。3.0 裡每個鍵用單字節代碼表示。這導致了不同字符
集使用相同的代碼時的很多問題。4.0 裡，用三字節的代碼來表示。這樣不會和一個字符
發生混淆。						|key-notation|

如果你在 vimrc 裡用單字節鍵碼定義映射，你需要把他們換成 4.0 的代碼。你不需要把
它們直接寫成三字節的代碼，而應該用 <> 括起來的符號表示形式。見下表。該表也列出
來 3.0 文檔使用的舊名字。

<> 內的鍵碼可以用來直接定義映射。這樣，你可以直接複製/粘貼例子或者輸入。<> 的
表示方法在這裡有介紹 |<>|。要使之工作，'cpoptions' 裡必須不能用 'B' 和 '<' 標
志位 |'cpoptions'|。

舊名字		新名字		  舊代碼	舊的 MS-DOS 代碼	~
				十六進	十進制	十六進	十進制	~
<ESC>		<Esc>
<TAB>		<Tab>
<LF>		<NL> <NewLine> <LineFeed>
<SPACE>		<Space>
<NUL>		<Nul>
<BELL>		<Bell>
<BS>		<BS> <BackSpace>
<INSERT>	<Insert>
<DEL>		<Del> <Delete>
<HOME>		<Home>
<END>		<End>
<PAGE_UP>	<PageUp>
<PAGE_DOWN>	<PageDown>

<C_UP>		<Up>		0x80	128	0xb0	176
<C_DOWN>	<Down>		0x81	129     0xb1	177
<C_LEFT>	<Left>		0x82	130     0xb2	178
<C_RIGHT>	<Right>		0x83	131     0xb3	179
<SC_UP>		<S-Up>		0x84	132     0xb4	180
<SC_DOWN>	<S-Down>	0x85	133     0xb5	181
<SC_LEFT>	<S-Left>	0x86	134     0xb6	182
<SC_RIGHT>	<S-Right>	0x87	135     0xb7	183

<F1>		<F1>		0x88	136     0xb8	184
<F2>		<F2>		0x89	137     0xb9	185
<F3>		<F3>		0x8a	138     0xba	186
<F4>		<F4>		0x8b	139     0xbb	187
<F5>		<F5>		0x8c	140     0xbc	188
<F6>		<F6>		0x8d	141     0xbd	189
<F7>		<F7>		0x8e	142     0xbe	190
<F8>		<F8>		0x8f	143     0xbf	191
<F9>		<F9>		0x90	144     0xc0	192
<F10>		<F10>		0x91	145     0xc1	193

<SF1>		<S-F1>		0x92	146     0xc2	194
<SF2>		<S-F2>		0x93	147     0xc3	195
<SF3>		<S-F3>		0x94	148     0xc4	196
<SF4>		<S-F4>		0x95	149     0xc5	197
<SF5>		<S-F5>		0x96	150     0xc6	198
<SF6>		<S-F6>		0x97	151     0xc7	199
<SF7>		<S-F7>		0x98	152     0xc8	200
<SF8>		<S-F8>		0x99	153     0xc9	201
<SF9>		<S-F9>		0x9a	154     0xca	202
<SF10>		<S-F10>		0x9b	155     0xcb	203

<HELP>		<Help>		0x9c	156     0xcc	204
<UNDO>		<Undo>		0x9d	157     0xcd	205

		(沒用到)	0x9e	158     0xce	206
		(沒用到)	0x9f	159     0xcf	207


終端選項改變					*termcap-changed*
------------------------

終端選項的名字改成了 termcap 定義的這些選項的名字。所有的終端選項現在都有 t_xx
這樣的名字，其中 xx 是 termcap 的名字。通常這些選項都用不到。除非你有一個錯誤
或者不完整的 termcap 名字，或者你設置不同的光亮選項的值。|terminal-options|

注意 有些鍵沒有 termcap 的名字。應該用 <> 形式的名字，不管這麼說，這總是一個好
主意。

注意 "t_ti" 變成了 "t_mr" (反轉輸出) 而 "t_ts" 變成了 "t_ti" (初始終端模式)。
用 "t_ti" 的時候要小心！

舊名字		新名字		含義		~
t_cdl		t_DL		刪除行數			*t_cdl*
t_ci		t_vi		光標不可見			*t_ci*
t_cil		t_AL		插入行數			*t_cil*
t_cm		t_cm		移動光標
t_cri		t_RI		光標右側字符數			*t_cri*
t_cv		t_ve		光標可見			*t_cv*
t_cvv		t_vs		光標非常可見			*t_cvv*
t_dl		t_dl		刪除行
t_cs		t_cs		滾動區域
t_ed		t_cl		清除顯示			*t_ed*
t_el		t_ce		清除行				*t_el*
t_il		t_al		插入行				*t_il*
		t_da		屏幕上方保留顯示
		t_db		屏幕下方保留顯示
t_ke		t_ke		設置終端離開 keypad 傳輸模式
t_ks		t_ks		設置終端進入 keypad 傳輸模式
t_ms		t_ms		保存以便在高亮模式裡移動光標
t_se		t_se		正常模式 (撤銷 t_so)
t_so		t_so		突出 (standout) 模式
t_ti		t_mr		反轉高亮
t_tb		t_md		粗體模式			*t_tb*
t_tp		t_me		結束高亮			*t_tp*
t_sr		t_sr		反轉滾動
t_te		t_te		結束 termcap 模式
t_ts		t_ti		進入 termcap 模式		*t_ts_old*
t_vb		t_vb		可視響鈴
t_csc		t_CS		光標相對滾動區域		*t_csc*

t_ku	t_ku	<Up>		向上光標鍵
t_kd	t_kd	<Down>		向下光標鍵
t_kr	t_kr	<Right>		向右光標鍵
t_kl	t_kl	<Left>		向左光標鍵
t_sku		<S-Up>		shifted 向上光標鍵		*t_sku*
t_skd		<S-Down>	shifted 向下光標鍵		*t_skd*
t_skr	t_%i	<S-Right>	shifted 向右光標鍵		*t_skr*
t_skl	t_#4	<S-Left>	shifted 向左光標鍵		*t_skl*
t_f1	t_k1	<F1>		功能鍵 1			*t_f1*
t_f2	t_k2	<F2>		功能鍵 2			*t_f2*
t_f3	t_k3	<F3>		功能鍵 3			*t_f3*
t_f4	t_k4	<F4>		功能鍵 4			*t_f4*
t_f5	t_k5	<F5>		功能鍵 5			*t_f5*
t_f6	t_k6	<F6>		功能鍵 6			*t_f6*
t_f7	t_k7	<F7>		功能鍵 7			*t_f7*
t_f8	t_k8	<F8>		功能鍵 8			*t_f8*
t_f9	t_k9	<F9>		功能鍵 9			*t_f9*
t_f10	t_k;	<F10>		功能鍵 10			*t_f10*
t_sf1		<S-F1>		shifted 功能鍵 1		*t_sf1*
t_sf2		<S-F2>		shifted 功能鍵 2		*t_sf2*
t_sf3		<S-F3>		shifted 功能鍵 3		*t_sf3*
t_sf4		<S-F4>		shifted 功能鍵 4		*t_sf4*
t_sf5		<S-F5>		shifted 功能鍵 5		*t_sf5*
t_sf6		<S-F6>		shifted 功能鍵 6		*t_sf6*
t_sf7		<S-F7>		shifted 功能鍵 7		*t_sf7*
t_sf8		<S-F8>		shifted 功能鍵 8		*t_sf8*
t_sf9		<S-F9>		shifted 功能鍵 9		*t_sf9*
t_sf10		<S-F10>		shifted 功能鍵 10		*t_sf10*
t_help	t_%1	<Help>		help 鍵				*t_help*
t_undo	t_&8	<Undo>		undo 鍵				*t_undo*


'errorformat' 選項改變					*errorformat-changed*
----------------------------

'errorformat' 現在包含多種格式，以逗號分隔。第一個匹配的格式被使用。缺省值現在
能捕獲許多常見格式。					|errorformat|

如果你有一種格式包含逗號，前面需要加上反斜槓轉義。輸入兩個反斜槓，因為 ":set"
會吃掉一個。


不再有 'graphic' 選項					*graphic-option-gone*
---------------------

'graphic' 選項過去使得 <~> 和 0xa0 之間的字符在屏幕上直接顯示。現在 'isprint'
選項替代了它，而且增加了很多可能性。缺省的設置一樣；如果你以前在 vimrc 置位了
'graphic' 選項，你只需要看到這一點就行了。
							|'isprint'|


不再有 'yankendofline' 選項				*ye-option-gone*
---------------------------

'yankendofline' 選項被刪除了。你可以用 >
	:map Y y$


'icon' 和 'title' 缺省值改變				*icon-changed*
----------------------------------------

'title' 選項現在缺省只有在原來的標題恢復的時候才設置。不再有 "Thanks for
flying Vim" 標題。如果你還是想要，在你的 vimrc 文件加上 ":set title"。
							|'title'|

'icon' 的缺省值現在決定於原來的值是否恢復，和 'title' 類似。如果你不喜歡你的
icon 標題被改變，在 vim 裡設置這一行:			|'icon'|
	:set noicon


'highlight' 選項改變					*highlight-changed*
--------------------------

'i' 標誌位現在意味著斜體高亮，而不是反轉。'r' 標誌位現在用來代表反轉高亮，也就
是 'i' 過去的含義。通常你看不到區別，因為多數終端不支持斜體模式，而用反轉模式
作為替代。						|'highlight'|

如果 'highlight' 的一種場合不存在，使用 'highlight' 的缺省值，而不是反轉模式。


'tildeop' 和 'weirdinvert' 縮寫改變			*short-name-changed*
-----------------------------------------------

'to' 換名成 ('tildeop' 的縮寫) 'top'。			|'tildeop'|
'wi' 換名成 ('weirdinvert' 的縮寫) 'wiv'。		|'weirdinvert'|

之所以這麼做，是因為 Vi 使用 "wi" 作為 'window' 的縮寫，而 'to' 作為 'timeout'
的縮寫。這意味著你如果試圖設置這些選項，你不會得到錯誤信息，但是效果不同。


"v"、"V" 和 "CTRL-V" 在可視模式的改變			*use-visual-cmds*
-------------------------------------------

在可視模式下，"v"、"V" 和 "CTRL-V" 用來終止可視模式。現在這只有在可視模式處於
相應的類型時才會，不然可視模式的類型發生相應的改變。現在只有 ESC 用來在所有情
況下不做別的，只終止可視模式。				|v_V|


刪除插入模式的 CTRL-B 功能				*toggle-revins*
-----------------------------

插入模式下的 CTRL-B 原來用來切換 'revins' 選項。如果你不知道這一點而不小心按了
CTRL-B，要發現怎麼撤銷這一點很困難。因為幾乎沒人用到這一功能，缺省這個功能被關
閉了。如果需要，編譯前在 feature.h 裡定義 RIGHTLEFT。	 |'revins'|

 vim:tw=78:ts=8:ft=help:norl:
