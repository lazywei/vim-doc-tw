*os_risc.txt*   For Vim version 7.3.  最近更新: 2010年8月


		  VIM 參考手冊    by Thomas Leonard
				譯者: Willis
				http://vimcdoc.sf.net


						*riscos* *RISCOS* *RISC-OS*
本文包含了 Vim 的 RISC OS 版本的特點。

這個 RISC OS 移植版本是一個全新的版本，不是基於舊的 "archi" 版本。

1.  文件位置			|riscos-locations|
2.  文件名改寫 (munging)	|riscos-munging|
3.  命令行的使用		|riscos-commandline|
4.  桌面 (GUI) 的使用		|riscos-gui|
5.  遠程的使用 (telnet)		|riscos-remote|
6.  臨時文件			|riscos-temp-files|
7.  中斷			|riscos-interrupt|
8.  內存使用			|riscos-memory|
9.  文件類型			|riscos-filetypes|
10. 外殼			|riscos-shell|
11. 移植新的發佈版本		|riscos-porting|

如果我漏掉什麼，給我發 email，我會試圖修正的。事實上，即使我沒有漏掉什麼，也給
我發 email 吧，讓我有自信自己的程序很好用！

Thomas Leonard <tal197@ecs.soton.ac.uk>

	[這些 URLs 都不能用了...]
	移植版本主頁:	http://www.ecs.soton.ac.uk/~tal197/
	或者試試:	http://www.soton.ac.uk/~tal197/

==============================================================================
							*riscos-locations*
1. 文件位置

Vim 可執行文件和共享資源文件都存在 !Vim 應用程序目錄裡。

當 filer 第一次看到 !Vim 的時候，它會使得 *vi 和 *ex 命令成為 Vim 命令行版本的
別名 (參看 |riscos-commandline|)。

!Vim.Resources 和 !Vim.Resources2 包含標準 Vim 發佈的所有文件。不過有些輕微的
修改，使其滿足 ADFS 的限制；它們也包含了窗口模版等的附加文件。

用戶的選擇從 "Choice:*" 裡讀取，而保存到 "<Choices$Write>.*" 裡。如果你有新的
!Boot 結構，那麼這些都已經設定好了。如果沒有，把 Choices$Path 設為能搜索到用戶
配置文件的搜索目錄列表。把 Choices$Write 設為你想存儲文件的目錄 (這樣你就可以
記住上次會話的自己的搜索模式和位置標記)。

==============================================================================
							*riscos-munging*
2. 文件名改寫 (munging)

缺省地，所有路徑名改寫都被關閉。所以 Vim 應該和一個正常的 RISC OS 應用一樣。因
此，如果你想編輯 "doc/html"，那就可以輸入 "*vi doc/html"。

只有以下情況需要改寫:

- C 程序裡搜索被包含的文件，因為它們的文件名總是被改寫的。參看 |[I|。
  注意: 確保你使用這個命令的時候在正確的目錄上 (那就是，在子目錄 "c" 和 "h"
        裡)。

- 用 |:so| 執行腳本
  "$VIM/" 開始的路徑被這樣改寫:

  $VIM/syntax/help.vim  ->  Vim:syntax.help

  另外，".vim" 結尾的文件的擴展名被去掉，而且斜槓被替換成句號。

有些 tag 文件和腳本文件也許需要重新改寫才能在這個移植版本中應用。

==============================================================================
							*riscos-commandline*
3. 命令行的使用

要在命令行中啟動 Vim，用 "*vi" 命令 (或者要進入 |Ex-mode|，用 "*ex")。

輸入 "*vi -h" 得到可用之選項。

在高彩模式裡，運行命令行版本的 Vim 可能會使得滾屏很慢。切換到一個色彩低的模
式，或者用 GUI 的版本。

另外，就像一般的文本程序一樣，按住 Ctrl 會更慢，而 Ctrl-Shift 甚至會使之凍結。

==============================================================================
							*riscos-gui*
4. 桌面的使用

限制:

- 左側的滾動條不能正常工作 (右側和底部的則沒問題)。
- 如果它落在後面，滾動速度不會增加。

即使右下方沒有相應的圖標，你也可以通過拖拽窗口的右下角來改變窗口大小，

你還可以使用 --rows 和 --columns 參數來設定 Vim 窗口的初始大小，類似這樣: >

  *Vi -g --rows 20 --columns 80

支持全局剪貼板。所以你可以選擇一些文本，把它直接貼到另一個應用程序裡 (只要後者
也支持剪貼板)。

點擊菜單鍵，會得到一個和正常 RISC OS 程序類似的菜單界面。按住 Shift 再點擊，則
(從全局剪貼板裡) 粘貼。

把一個文件拖拽到窗口裡，就會用這個文件來替換_當前的_緩衝區 (光標所在的這個，而
不是你拖到的那個)。

按住 Ctrl 再拖拽之則會在一個新的 Vim 窗口裡編輯這個文件 (參看 |:sp|)。

在插入模式下，按住 Shift 再拖拽文件會插入這個文件的路徑名。

:browse :w 打開一個標準的 RISC OS 保存框。
:browse :e 打開一個目錄的查看器。

關於字體部分，你可以選擇系統字體、描邊 (outline) 字體、通過 ZapRedraw 得到的系
統字體和通過 ZapRedraw 得到的任何字體: >

  :set guifont=
<			使用 VDU 驅動得到的系統字體。支持粗體和下劃線。
>
  :set guifont=Corpus.Medium
<			使用命名的描邊字體。你可以使用任何字體，不過只有象
			Corpus 這樣的等寬字體才能顯示正確。
>
  :set guifont=Corpus.Medium:w8:h12:b:i
<			和前者一樣，不過選用 8x12 點的粗體斜體字。
			如果只指定寬度和高度的中的一個，這假定兩者都指定相同的
			值。如果都不指定，則假定大小為 10 點。

多謝 John Kortink，Vim 可以使用 ZapRedraw 模塊了。字體可以用 "!" (或者要兩倍高
度，用 "!!") 開頭，就像這樣: >

  :set guifont=!!
<			使用 ZapRedraw 得到的系統字體。在 StrongARM 處理器上，
			刷新能快些。不過你沒法得到粗體或者斜體字。兩倍高度。
>
  :set guifont=!script
<			用命名的 Zap 字體 (在 VimFont$Path 中的一個目錄)。刷新
			速度和 "!!" 一樣，而且你能得到一個更好看的字體。
			目前，只提供了 "man+" 和 "script" 兩種字體。不過你可以
			使用任何在 VimFont$Path 裡的 Zap 字體。
			Vim 會試圖從命名的目錄中讀入字體文件 "O"、"B"、"I" 和
			"IB"。只有 "O" (正常字體) 必須存在。聯結文件目前還不支
			持。

要 注意 在使用 ZapRedraw 的時候，編輯條 (譯者注: 光標？) 出現在你所在字符的前
面而不是後面。另外，屏幕模式為 8 位 0 時，刷新會不正確。如果字體包括控制字符，
你可以通過改變 Vim 的 'isprint' 選項來顯示它們。

如果你發現你的機器上滾動太慢，嘗試一下 'scrolljump' 和 'ttyscroll' 選項。

特別的，StrongARM 用戶也許會發現: >

  :set ttyscroll=0

在高彩模式會滾屏快一些。

==============================================================================
							*riscos-remote*
5. 遠程的使用 (telnet)

我已經附帶了一個內建的 termcap 入口，不過你可以編輯這個文件，從而可以在遠程終
端上使用 Vim 的時候能夠得到更多的控制編碼。

儘管在我的 Acorn 上沒有因特網連接，我成功地通過 loopback 連接在一個 FreeTerm
窗口裡運行過 Vim。

用 "*vi -T ansi"，看起來使用沒有問題。

==============================================================================
							*riscos-temp-files*
6. 臨時文件

如果 Vim 崩潰了，交換文件和備份文件 (如果存在的話)，會保存在 'directory' 和
'bdir' 選項指定的目錄裡。缺省地，交換文件在 <Wimp$ScrapDir> (就是在 !Scrap 裡
面)，而備份文件在你保存文件所在的同一目錄。這樣，Vim 允許你在下次編輯時，嘗試
修復文件。

要看到交換文件的列表，按 <F12> 並輸入 "*vi -r"。

如果你試圖編輯不同的目錄的兩個同名文件時，Vim 不會再顯示任何 ATTENTION 的警告
了。

不過，如果你試圖 (在兩個不同的 Vim 裡) 編輯同一個文件兩次，它也不會警告。當
然，在你保存文件時，它仍然會警告你修改日期已經發生了變化。

==============================================================================
							*riscos-interrupt*
7. 中斷

要退出一個死循環的宏或者別的什麼，在命令行版本裡按住 Escape，在 GUI 版本裡按下
CTRL-C。

==============================================================================
							*riscos-memory*
8. 內存使用

在 RISC OS 3.5 或以後的版本裡，Vim 會動態使用區域。如果是比較老的機器，編輯
!RunTxt 和 Gvim 文件。我不知道 UnixLib 缺省做什麼，所以我還是要保證安全行事。

如果沒有動態區域，Vim 不會工作很好，因為它不會在運行以後改變自己的內存分配。所
以，你應該修改 "!Vim.Gvim" 和 "!Vim.!RunTxt" 來選擇適合你的最佳大小。你也許需
要至少 1400K。

==============================================================================
							*riscos-filetypes*
9. 文件類型

現在，你可以為特定的文件類型指定專門的自動命令了。指定的方式是 &xxx，其中的
xxx 是文件類型。

文件類型必須以數字指定 (例如， &fff 代表文本文件)。

5.3 版本以來的系統已經有了改變。新的事件序列是:

- 讀入文件。|'osfiletype'| 設為 RISC OS 的文件類型。
- 基於文件類型和路徑名，Vim 試圖把 |'filetype'| 設置為相應的 Vim 類型。
- 設置這個選項可能會載入語法文件和執行其他操作。
- 會用文件類型 |'osfiletype'| 保存文件。

以下例子會說明清楚一些:

  讀入的文件類型	osfiletype	filetype ~
  C 代碼 "c.hellow"	Text (&fff)	C
  LaTeX 文檔		LaTeX (&2a8)	TeX
  Draw 文檔		DrawFile (&aff)	(沒有改變)

==============================================================================
							*riscos-shell*
10. 外殼

- 因為很多路徑名都有感歎號，感歎號 (!) 只有在後面緊跟一個空格或者回車的時候才
  會被替代，

- 你可以在命令前附加一個 "~"，這樣就不會顯示它的輸出結果。這也意味著你後來不需
  要再按 <Enter>，而且也不用重新刷新屏幕。{僅在 GUI 版本上才有}

==============================================================================
							*riscos-porting*
11. 移植新的 RISC OS 發佈版本

下載你所需的一切:

- 得到最新的軟件發佈版本 (參看 www.vim.org)
- 得到運行時環境文件 (如這些幫助文件)
- 得到 RISC OS 的可執行發佈版本 (如有可能)


解壓:

- 新建一個 raFS 盤，並把壓縮檔放到這裡。
- 用 gzip 解壓
- 用 tar 從包裡釋放   (*tar xELf 50 archive/tar)


重新編譯源代碼:

- 建立 c、s 和 h 目錄。
- 把所有的頭文件放在 "h" 裡。		     \
- 把所有的 C 文件放在 "c" 裡。		     | 然後扔掉它們的擴展名
- 把所有的彙編文件 ("swis/s") 放在 "s" 裡。  /
- 把所有 "proto" 裡的文件改名到 "h" 裡，就像這樣:
    raFS::VimSrc.source.proto.file/pro
	  變成
    raFS::VimSrc.source.h.file_pro
- 在文件 "h.proto" 和 "c.termlib" 裡，搜索並替換
    .pro"
       為
    _pro.h"
- 如果想要，建立一個簡單的 Makefile 並執行 "*make -k"。
  在 Makefile 裡用 "CC = gcc -DRISCOS -DUSE_GUI -O2 -x c"。
- 在可執行的發佈版本裡，把可執行文件存為 !Vim.Vim。


更新運行時環境:

- 用新文件替換掉 !Vim.Resources 裡舊的或者不存在的文件。
- 刪除 "doc" 裡除了 "tags" 以外不以 "/txt" 結尾的文件。
- 除了 "doc" 裡的文件以外，刪掉所有文件的擴展名。
- 編輯 "doc.tags" 文件。刪除第二列的文件擴展名:
	:%s/^\(.[^\t]*\t.*\)\.txt\t/\1\t/
- 刪除語法文件裡所有的擴展名。把它們分成兩個目錄，以繞開舊的 ADFS 文件系統的
  77 個入口項的限制。
- 編輯 "Vim:FileType" 使得同時能匹配 "*.c.*" 和 "*/c"，依此類推。
  也加入文件類型的檢查。
- 編輯 "Vim:Menu" 並刪除菜單裡的所有鍵說明 >
	:%s/<Tab>[^ \t]*//
<
 vim:tw=78:ts=8:ft=help:norl:
