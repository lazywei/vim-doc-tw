*usr_31.txt*	For Vim version 7.3.  最近更新：2006年5月

		     VIM USER MANUAL - by Bram Moolenaar
		     譯者：lang2 http://vimcdoc.sf.net

			      利用 GUI


Vim 可以很好地在終端內工作，但是 GUI 也有其優點。比如：一個使用文件的命令可以
利用文件瀏覽器，需要作選擇時可以利用對話框。使用快捷鍵可以更方便的使用菜單。

|31.1|	文件瀏覽器
|31.2|	確認
|31.3|	菜單快捷鍵
|31.4|	Vim 窗口位置及大小
|31.5|	雜項

           後一章: |usr_32.txt|  撤銷樹
           前一章: |usr_30.txt|  編輯程序
             目錄: |usr_toc.txt|

==============================================================================
*31.1*	文件瀏覽器

在使用 File/Open... 菜單的時候你會看到一個文件瀏覽器。這會使你更容易找到要編輯
的文件。但是如果你想把窗口分割並編輯另一個文件呢？沒有一個菜單項是做這個的。你
當然可以先用 Window/Split 然後再用 File/Open...，但這樣適得其反。
   大多數時候你使用 Vim 都是鍵入命令的，同樣，打開一個文件瀏覽器也可以。為了讓
split 命令使用文件瀏覽器，在它前面加上 "browse" 就行了: >

	:browse split

選中一個文件後 ":split" 命令就會與其一起被執行。如果你取消文件對話框就什麼都不
會發生。當前窗口也不會被分割。
   你也可以指定一個文件名作為參數。這將告訴瀏覽器從那裡開始查找文件。例如: >

	:browse split /etc

文件瀏覽器將以 "/etc" 作為起始目錄。

":browse" 命令幾乎可被添加在任何打開文件的命令前。
   如果沒有指定目錄，Vim 會自己決定從哪裡開始瀏覽。缺省情況 Vim 會從上次同樣的
目錄開始。這樣當你用 ":browse split" 命令並選中了一個 "/usr/local/share" 裡的
文件，下次你在用 ":browse" 時，瀏覽將從 "/usr/local/share" 開始。
   用 'browsedir' 選項可以改變瀏覽的啟動目錄。可能的選項值包括:

	last		使用上次的目錄 (缺省)
	buffer		使用當前緩衝區所在的目錄
	current		使用當前目錄

例如，當你在 "/usr" 目錄內編輯文件 "/usr/local/share/readme" 時，那麼命令: >

	:set browsedir=buffer
	:browse edit

會從 "/usr/local/share" 開始瀏覽，類似地: >

	:set browsedir=current
	:browse edit

會從 "/usr" 開始瀏覽。

	備註:
	為了避免使用鼠標，多數文件瀏覽器提供鍵盤操作。這些操作因系統而異，這裡
	不作解釋。可能的情況下 Vim 使用系統的標準瀏覽器。請參閱你所用系統的文
	檔。

當你不是使用 GUI 版本時，你也可以使用文件瀏覽窗口來選擇文件。然而，":browse"
命令就無效了。參閱 |netrw-browse|。

==============================================================================
*31.2*	確認

Vim 會保護你的文件不被意外的覆蓋或者其它的信息丟失。如果你要作一些可能有危險的
事，Vim 會以一個錯誤信息提醒你並建議在命令後加上 ! 來確認你希望進行該操作。
   為了避免重新輸入一個帶有 ! 的命令，你可以要求 Vim 用一個對話框來向你詢問。
你就可以選擇 "OK" 或 "Cancel" 來告訴 Vim 你的要求。
   例如，你正在編輯一個文件並做了一些改動。你要開始編輯另一個文件: >

	:confirm edit foo.txt

Vim 會彈出一個類似下面的對話框:

	+-----------------------------------+
	|				    |
	|   ?	Save changes to "bar.txt"?  |
	|				    |
	|   YES   NO		 CANCEL     |
	+-----------------------------------+

你可以作選擇了。如果你希望保存變動，選擇 "YES"。如果你想放棄變動: "NO"。如果你
想放棄編輯新文件的操作而返回來看看自己都做了那些改動用 "CANCEL"。 你會回到原來
的文件，你所做的改動也都還在。

就像 ":browse" 一樣，":confirm" 命令也可以被加在多數編輯其它文件的命令之前。你
還可以把它們兩個聯起來用: >

	:confirm browse edit

如果當前緩衝區被改動的話這個命令會產生一個對話框。接著會彈出一個文件瀏覽器來選
擇將要編輯的文件。

	備註:
	在對話框中你可以使用鍵盤來作選擇操作。通常來說 <Tab> 鍵和光標鍵可以改
	變選項。鍵入 <Enter> 會確認選項。但這也跟你用的系統有關。

當你不是使用 GUI 版本的時候， ":confirm" 也是有效的。Vim 不會彈出一個對話框，
而是將詢問顯示在 Vim 窗口的底部並提示你鍵入選擇。>

	:confirm edit main.c
<	Save changes to "Untitled"? ~
	[Y]es, (N)o, (C)ancel:  ~

你可以鍵入單鍵來作出選擇。不用鍵入 <Enter>，這和其它命令行的輸入不同。

==============================================================================
*31.3*	菜單快捷鍵

所有的 Vim 命令都是用鍵盤來完成的。在不知道命令名稱的情況下，使用菜單會簡單
些。但是你就得把手從鍵盤上移開去抓鼠標。
   通常菜單用鍵盤也可以操作。這決定於你所使用的系統，但多數情況下是這樣工作
的：將 <Alt> 鍵和菜單項中帶下劃線的字母連用。例如，<A-w> (<Alt> 加 w) 彈出
Window 菜單。
   在 Window 菜單下，"split" 菜單項中的 p 下面劃了線。放開 <Alt> 鍵然後按 p 就
可以選中它了。

在用 <Alt> 鍵選中菜單後，你可以用光標鍵來在菜單內移動。<Right> 選擇一個子菜
單， <Left> 關閉之。<Esc> 也用來關閉菜單。<Enter> 選中一個菜單項。

使用 <Alt> 鍵來操作菜單和使用 <Alt> 鍵的映射會出現衝突。'winaltkeys' 可以用來
告訴 Vim 如何對待 <Alt> 鍵。
   缺省值 "menu" 是一個明智的選擇：如果該鍵組合是一個菜單快捷鍵那麼就不能被作
為映射。所有其它的鍵都可以。
    "no" 表示不使用 <Alt> 鍵組合來操作菜單。這樣你就必須使用鼠標。所有 <Alt>
鍵組合都可以被用作鍵盤映射。
    "yes" 表示 Vim 會使用 <Alt> 鍵組合來操作菜單。另外的 <Alt> 鍵組合也可以用
作其它用途。

==============================================================================
*31.4*	Vim 窗口位置及大小

要查看當前 Vim 窗口在屏幕上的位置可以用: >

	:winpos

這只對 GUI 有效。輸出可能是這樣的:

	Window position: X 272, Y 103 ~

位置是以屏幕像素為單位的。你可以通過數字來將 Vim 窗口移動到別處。例如，將其向
左移動一百個像素: >

	:winpos 172 103
<
	備註:
	報告的窗口位置和窗口被移動的位置可能會有小的出入。這是由窗口周圍的邊框
	引起的。邊框是被窗口管理器加上的。

你可以在你的啟動腳本中使用這個命令來將窗口定位到一個指定的位置。

Vim 窗口的大小是以字符數目計算的。因此它和所使用的字體的大小有關。你可以查看當
前的窗口大小: >

	:set lines columns

要改變窗口大小只要改變 'lines' 和/或 'columns' 選項的值即可: >

	:set lines=50
	:set columns=80

取得窗口大小的操作在終端和在 GUI 上都可以。但是設定大小在絕大多數終端裡都是不
可能的。

在啟動 X-Window 版本的 gvim 時你可以在命令行指定窗口的位置和大小: >

	gvim -geometry {width}x{height}+{x_offset}+{y_offset}

{width} 和 {height} 的單位是字符。{x_offset} 和 {y_offset} 的單位是像素。例: >

	gvim -geometry 80x25+100+300

==============================================================================
*31.5*	雜項

你可以使用 gvim 來編輯一個 e-mail。在你的 e-mail 程序裡你得選擇 gvim 作為其編
輯程序。當你嘗試這種配置的時候，你會發現行不通：郵件程序認為編輯已經結束了，可
實際上 gvim 還在運行著！
   這裡的情況是由於 gvim 啟動時會將自己從 shell 分離出來的緣故。如果你是從終端
啟動 gvim 的話這當然沒有問題，你還可以在 shell 裡作其它事。但如果你的確希望等
待 gvim 結束的話，你必須阻止這個分離動作。"-f" 參數就是用來做這個的: >

	gvim -f file.txt

"-f" 代表前台 (foreground)。這樣 Vim 就會掛起它啟動所在的 shell，直到你編輯完
畢並退出為止。


推 遲 啟 動 GUI

在 Unix 上你可以先在終端裡啟動 Vim。當你在一個 shell 裡完成各種不同任務的時候
這很有方便。如果當你在編輯某個文件時決定你想使用 GUI，你可以這樣做: >

	:gui

Vim 就會打開 GUI 窗口並不再使用終端。你可以繼續在終端裡作其它事情。 "-f" 參數
在這裡也可以用來將 GUI 放置在前台：":gui -f"。


GVIM 啟 動 文 件

當 gvim 啟動時，它會讀取 gvimrc 文件。這和啟動 Vim 時用到的 vimrc 文件類似。
gvimrc 文件可以被用來為 GUI 設定專用的選項和命令。例如，你可以設定 'lines' 的
值來指定窗口的大小: >

	:set lines=55

在終端裡使用是沒有用的，因為它的大小是固定的 (除了那些支持調整大小的 xterm)。
   Vim 在 vimrc 文件相同的地方找尋 gvimrc 文件。通常來說在 Unix 上是
"~/.gvimrc"； MS-Windows 上是 "$VIM/_gvimrc"。$MYGVIMRC 環境變量設為該值，這樣
你可以用下面的命令編輯此文件，如果有的話: >

	:edit $MYGVIMRC
<
   如果出於某種原因你不想使用通常的 gvimrc 文件，你可以利用 "-U" 參數來指定另
外的一個: >

	gvim -U thisrc ...

這使你可以用 gvim 來做另外一類編輯。例如你可以用另外的字體大小。
   要完全跳過讀取 gvimrc 文件: >

	gvim -U NONE ...

==============================================================================

下一章: |usr_32.txt| 撤銷樹

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
