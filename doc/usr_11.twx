*usr_11.txt*	For Vim version 7.3.  最後修改時間:2010年7月

		    Vim 用戶手冊 - by Bram Moolenaar
		(譯者：Nek_in http://vimcdoc.sf.net)

			      從崩潰中恢復


你的計算機崩潰過嗎？是不是還正好在你編輯了幾個小時以後？不要驚慌！Vim 已經保存
了大部分的信息使你可以恢復你的大多數數據。本章告訴你怎樣恢復這些數據並向你介紹
Vim 是如何處理交換文件的。

|11.1|	基本恢復
|11.2|	交換文件在哪
|11.3|	是不是崩潰了？
|11.4|	深入閱讀

     下一章：|usr_12.txt|  小竅門
     前一章：|usr_10.txt|  做大修改
       目錄：|usr_toc.txt|

==============================================================================
*11.1*	基本恢復

在大多數情況下，恢復一個文件相當簡單。假設你知道正在編輯的是哪個文件 (並且硬盤
沒壞的話)。可以用 "-r" 選項啟動 Vim：
>
	vim -r help.txt

Vim 會讀取交換文件 (用於保存你的編輯數據的文件) 並且提取原文的編輯碎片。如果
Vim 恢復了你的改變，你會看到如下文字 (當然了，文件名會不一樣)：

	Using swap file ".help.txt.swp" ~
	Original file "~/vim/runtime/doc/help.txt" ~
	Recovery completed. You should check if everything is OK. ~
	(You might want to write out this file under another name ~
	and run diff with the original file to check for changes) ~
	You may want to delete the .swp file now. ~

	(譯者註：中文情況下是：
	使用交換文件 ".help.txt.swp"~
	原文件 "~/vim/runtime/doc/help.txt"~
	恢復完成。請確定一切正常. ~
	(你可能想要把這個文件另存為別的文件名，~
	再執行 diff 與原文件比較以檢查是否有改變)~
	現在可以刪除 .swp 文件。~
	)

為了安全起見，可以用另一個文件名保存這個文件：
>
	:write help.txt.recovered

可以把這個文件與原文件作一下比較，看看恢復的效果如何。這方面 Vimdiff 可以幫很
大的忙 (參見 |08.7|)。例如: >

	:write help.txt.recovered
	:edit #
	:diffsp help.txt

注意用一個比較新的原文件來比較 (你在計算機崩潰前最後保存過的文件)，並且檢查有
沒有東西丟失了 (由於某些問題導致 Vim 無法恢復)。
    如果在恢復的過程中 Vim 顯示出一些警告信息，注意小心閱讀。這應該是很少見
的。

如果恢復產生的文件和文件內容完全一致，你會看到以下消息:

	Using swap file ".help.txt.swp" ~
	Original file "~/vim/runtime/doc/help.txt" ~
	Recovery completed. Buffer contents equals file contents. ~
	You may want to delete the .swp file now. ~

通常這是因為你已經恢復過改變，或者修改後寫入了文件。此時刪除交換文件應該安全。

最後所做的一些修改不能恢復是正常的。Vim 在你停止大約 4 秒不輸入的時候或者輸入
大約兩百個字符以後才會更新交換文件。這間可以通過 'updatetime' 和 'updatecount'
兩個選項來調整。這樣，如果系統崩潰前 Vim 沒有更新交換文件，最後一次更新後編輯
的內容就會丟失。

如果你編輯的時候沒有給定文件名，可以用一個空的字符串來表示文件名：
>
	vim -r ""

你需要進入原來的目錄執行這個命令，否則 Vim 是找不到這個交換文件的。

==============================================================================
*11.2*	交換文件在哪

Vim 可以把交換文件保存在幾個不同的地方。通常是原文件所在的目錄。要知道這一點，
進入該目錄，然後輸入：
>
	vim -r

Vim 會列出所有它能找到的交換文件。它還會從其它目錄尋找本目錄文件的交換文件，但
它不會尋找其它目錄裡的交換文件，更不會遍及整個目錄樹。
    這個命令的輸出如下：

	Swap files found: ~
	   In current directory: ~
	1.    .main.c.swp ~
		  owned by: mool   dated: Tue May 29 21:00:25 2001 ~
		 file name: ~mool/vim/vim6/src/main.c ~
		  modified: YES ~
		 user name: mool   host name: masaka.moolenaar.net ~
		process ID: 12525 ~
	   In directory ~/tmp: ~
	      -- none -- ~
	   In directory /var/tmp: ~
	      -- none -- ~
	   In directory /tmp: ~
	      -- none -- ~

	(譯者：中文的情形如下：
	找到以下交換文件:~
	   位於當前目錄:~
	1.    .main.c.swp ~
		    所有者: mool    日期: Tue May 29 21:00:25 2001 ~
		    文件名: ~mool/vim/vim6/src/main.c ~
		    修改過: 是 ~
		    用戶名: mool     主機名: masaka.moolenaar.net ~
		   進程 ID: 12525 ~
	   位於目錄 ~/tmp:~
		-- 無 --~
	   位於目錄 /var/tmp:~
		-- 無 --~
	   位於目錄 /tmp:~
		-- 無 --~
	)

如果有幾個交換文件，其中一個可能是你要的，Vim 會給出一個文件列表，你需要輸入一
個表示這個文件的數字。小心檢查那幾個文件的時間，並確定哪一個才是你需要的。
  萬一你不知道是哪個的話，一個一個試一試。


使 用 指 定 的 交 換 文 件

如果你知道要用哪個文件，你可以指定交換文件的名字。Vim 會找出交換文件所對應的原
始文件的名字。

例如： >
	Vim -r .help.txt.swo

這個方法在交換文件在一個非預期的目錄中時很有用。Vim 知道 *.s[uvw][a-z] 模式的
文件是交換文件。

如果這還不行，看看 Vim 報告的文件名是什麼，然後根據需要給文件換名。根據
'directory' 選項的值你可以知道 Vim 會把交換文件放到什麼地方。

	備註:
	Vim 在 'dir' 選項指定的目錄中尋找名為 "filename.sw?" 的交換文件。如果
	通配符不能正常工作 (例如 'shell' 選項不正確)，Vim 轉而嘗試文件
	"filename.swp"。如果仍失敗，你就只能通過給定交換文件的名稱來恢復原來的
	文件了。

==============================================================================
*11.3*	是不是崩潰了？				 *ATTENTION*	*E325*

Vim 盡可能保護你不要做傻事。有時你打開一個文件，天真地以為文件的內容會顯示出
來。可是，Vim 卻給出一段很長的信息：

		E325: ATTENTION ~
	Found a swap file by the name ".main.c.swp" ~
		  owned by: mool   dated: Tue May 29 21:09:28 2001 ~
		 file name: ~mool/vim/vim6/src/main.c ~
		  modified: no ~
		 user name: mool   host name: masaka.moolenaar.net ~
		process ID: 12559 (still running) ~
	While opening file "main.c" ~
		     dated: Tue May 29 19:46:12 2001 ~
 ~
	(1) Another program may be editing the same file. ~
	    If this is the case, be careful not to end up with two ~
	    different instances of the same file when making changes. ~
	    Quit, or continue with caution. ~
 ~
	(2) An edit session for this file crashed. ~
	    If this is the case, use ":recover" or "vim -r main.c" ~
	    to recover the changes (see ":help recovery"). ~
	    If you did this already, delete the swap file ".main.c.swp" ~
	    to avoid this message. ~

	(譯者註：翻譯成中文如下：

		E325: 注意~
	 發現交換文件 "main.c.swp" ~
	     所有者：mool     日期：2001年5月29日 星期二 21:09:28~
	     文件名：~mool/vim/vim6/src/main.c~
	     修改過：否~
	     用戶名：mool   主機名：masaka.moolenaar.net~
	     進程號：12559 (仍在運行) ~
	 正在打開文件 "main.c" ~
	       日期：2001年5月29日 星期二 19:46:12~
~
	(1) 另一個程序可能也在編輯同一個文件。~
	    如果是這種情況，修改時請注意避免同一個文件產生兩個不同的版本。 ~
	    ~
	    退出，或小心地繼續。~
~
	(2) 上次編輯此文件時崩潰。~
	    如果是這樣，請用 ":recover" 或 "vim -r main.c" ~
	    恢復修改的內容 (請見 ":help recovery")。~
	    如果你已經進行了恢復，請刪除交換文件 ".main.c.swp" ~
	    以避免再看到此消息。~

	) 

你遇到這個信息是因為 Vim 發現你編輯的文件的交換文件已經存在。這一定是有什麼地
方出問題了。可能的原因有兩個：

1. 這個文件正在被另一個進程編輯。注意有 "process ID" 那行。它看起來是這樣的：

		process ID: 12559 (still running) ~

    "still running" 表示同一台計算機上有一個進程正在編輯這個文件。在非 Unix 的
    系統上你不會得到這個信息。而如果你通過網絡編輯這個文件，可能也得不到這個信
    息，因為那個進程不在你的機器上。在這兩種情況下，你要自己找到原因。
       如果另一個 Vim 正在編輯這個文件，繼續編輯會導致同一個文件有兩個版本。最
    後存盤的文件會覆蓋前一個版本。這樣的結果是一些編輯數據丟失了。這種情況下，
    你最好退出這個 Vim。

2. 交換文件可能是由於前一次 Vim 或者計算機崩潰導致的。檢查提示信息中的日期。如
   果交換文件比你正在編輯的文件新，而且出現這個信息：

		modified: YES ~

   這就表明你很可能需要恢復了。
       如果文件的日期比交換文件新，可能是在崩潰後被修改過了 (也許你已經恢復
   過，只是沒有刪除交換文件？)，也可能文件在崩潰前保存過，但這發生在在最後一次
   寫入該交換文件之後 (那你運氣了，你根本不需要這個舊的交換文件)。Vim 會用如下
   語句提醒你：

      NEWER than swap file! ~

      (譯者註：意為 "文件比交換文件新")


無 法 讀 取 的 交 換 文 件

有時下面這樣的信息

	[cannot be read] ~

	或 [無法讀取] (中文信息，譯者)~

會出現在交換文件的文件名之下。這可好可壞，依情況而定。

如果上次編輯在作出任何修改前就崩潰了的話，是好事。這樣交換文件的長度為 0。你只
要刪除之然後繼續即可。

如果情況是你對交換文件沒有讀權限，就比較糟糕。你可能得以只讀方式瀏覽該文件。或
者退出。在多用戶系統中，如果你以別人的身份登錄並做了上一次修改，先退出登錄然後
以那個身份重新登錄可能會 "治癒" 該讀取錯誤。不然的話，你得找出是誰做的上一次修
改 (或正在修改)，然後和那個人聊聊。

如果情況是交換文件所在的磁盤物理性地損壞了，就非常糟糕了。幸運的是，這種情況幾
乎不會發生。
你可能需要以只讀方式查看文件 (如果允許的話)，看看到底有多少改動被 "忘記" 了。
如果你是改動文件的那個人，準備好重做你的改動。


怎 麼 辦？ 					*swap-exists-choices*

如果 Vim 版本支持對話框，你可以從對話框的五個選擇中 (譯者注: 原文如此) 挑一
個：

  Swap file ".main.c.swp" already exists! ~
  [O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort, (D)elete it: ~

  (譯者：含義是：
  交換文件 ".main.c.swp" 已經存在！~
  以只讀方式打開([O])，直接編輯((E))，恢復((R))，退出((Q))，中止((A))，刪除 ~
交換文件((D))：~
  )

O  用只讀方式打開文件。當你只是想看看文件的內容，而不打算恢復它的時候用這個選
   項。你可能知道有人在編輯它，但你想看看它的內容，而不會修改它。

E  直接編輯。小心使用這個選擇！如果這個文件已經被另一個文件打開，你編輯它會導
   致它有兩個版本。Vim 已經警告過你了，安全比事後說對不起要好。

R  從交換文件中恢復文件。如果你知道交換文件中有新的東西，而你想恢復它，選擇這
   一項。

Q  退出。不再編輯該文件。在有另一個 Vim 編輯該文件的時候選這一項。
       如果你剛打開 Vim，這會退出 Vim。當你用多個窗口打開幾個文件，Vim 只會在
   第一個文件遇到交換文件的時候退出。如果你是通過編輯命令打開文件，該文件不會
   被載入，Vim 會回到原來的文件中。

A  中止。類似 (Q) 退出，但同時中止更多的命令。這在試圖加載一個編輯多個文件的腳
   本 (例如一個多窗口的會話) 時很有用。

D  刪除交換文件。當你能確定你不再需要它的時候選這一項。例如，它不包括修改的數
   據，或者你的文件比交換文件新。
       在 Unix 系統上，只有建立這個交換文件的進程不再運行，這個選擇才會出現。

如果沒有出現對話框 (你使用的 Vim 不支持對話框)，你只能手工處理。要恢復一個文
件，使用如下命令：
>
	:recover

Vim 不是總能檢測到一個文件有交換文件的。當另一個會話把交換文件放到別的位置或者
在編輯另一台機器的文件的時候，雙方使用的交換文件路徑不一樣都會發生這個問題。所
以，不要老是等 Vim 來提醒你。

如果你確實不想看到這個信息，你可以在 'shortmess' 選項中加上 'A' 標誌位。不過一
般你不需要這樣做。

關於加密和交換文件關係的註釋，見 |:recover-crypt|。

==============================================================================
*11.4*	深入閱讀

|swap-file|	解釋交換文件在什麼地方創建以及名字是什麼。
|:preserve|	手工刷新交換文件
|:swapname|	查看當前文件的交換文件
'updatecount'	多少個鍵被敲下後執行一次交換文件刷新
'updatetime'	交換文件刷新後的超時時間
'swapsync'	交換文件刷新後是否執行磁盤同步
'directory'	列出用於保存交換文件的目錄
'maxmem'	寫入交換文件前的內存使用限制
'maxmemtot'	同上，當用於所有文件

==============================================================================

下一章：|usr_12.txt|  小竅門

版權：參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
