*debugger.txt*	For Vim version 7.3.  最近更新: 2006年7月


		     Vim 參考手冊    作者：Gordon Prieur
	   譯者: iCrazy <icrazy@ustc.edu>  http://vimcdoc.sf.net


支持調試器的特性					*debugger-support*

1. 調試器的特性			|debugger-features|
2. Vim 編譯選項			|debugger-compilation|
3. 整合的調試器			|debugger-integration|

{Vi 沒有以上的功能}

==============================================================================
1. 調試器的特性						*debugger-features*

以下的功能可以和調試器、集成編程環境 (IPE) 或集成開發環境 (IDE) 集成使用：

	替代命令輸入					|alt-input|
	調試標號					|debug-signs|
	調試源代碼高亮					|debug-highlight|
	信息頁腳					|gui-footer|
	氣泡表達式求值					|balloon-eval|

這些特性主要是針對圖形界面的 gvim 而新增的。然而，|alt-input| 和
|debug-highlight| 是同時針對 vim 和 gvim 進行開發的。一些其他的功能略做修改，
即可在非 GUI 的 vim 上使用。但是，我沒有這樣做，我也沒有測試過針對非圖形 GUI
界面編譯出的 vim 的可靠性。


1.1 替代命令輸入					*alt-input*

要使 Vim 和一個調試器一起工作，至少必須有一種和調試器進行輸入連接的方式，或者
有一個外部工具。儘管很多情況下，也同時會有一個輸出連接，但這並不是必要的。

輸入連接的目的是讓外部調試器把命令傳送給 Vim。調試器送來的命令必須足以使它自己
顯示當前的調試環境和狀態。

目前的實現是基於 X 工具包中的 dispatch 循環和對 XtAddInput() 函數的調用的。 


1.2 調試標號						*debug-signs*

很多調試器用在一些行前面加一個小記號或使這些行顏色高亮的方式來給它們做標記。命
令 |:sign| 可以使得調試器設定這種圖形標號。這項特性有什麼作用呢？舉例來說，它
可以用來使調試器顯示一個箭頭，從而指示正在被調試的程序的程序計數器 (PC)。另一
個用處是在有斷點的行後面顯示一個小的停止標號。這些可見的標號可以使用戶得知一些
調試器的狀態信息。

這些特性不僅僅可以和調試器一起使用。它們可以使一個 IPE 高亮顯示編譯錯誤、查找
到的文本等等。標號功能還可以和 |debug-highlight| 一起工作，從而保證標號可以被
顯眼的顯示出來。

調試標號可以用命令 |:sign| 來定義和設置。


1.3 調試源代碼高亮					*debug-highlight*

這項特性可以使得您把一行文字突出地高亮。這種高亮是用來使某一行突出顯示的。高亮
功能在 vim 和 gvim 中都可以工作，而調試標號一般僅在 gvim 下工作。Sun
Microsystem 的 dtterm 是一個例外，它有一個 "sign gutter" 可以用來顯示標號。


1.4 信息頁腳						*gui-footer*

信息頁腳可以用來顯示調試器或 IPE 中傳來的信息。它還可以用來顯示菜單和工具欄提
示。頁腳區域位於 GUI 窗口的底部，在用來顯示冒號 (:) 命令的那一行的下方。

頁腳的顯示是用 'guioptions' 中的字母 'F' 來控制的。


1.5 氣泡表達式求值					*balloon-eval*

這項特性可以使一個調試器或其他的外部工具根據鼠標所指的位置顯示動態的信息。它的
目的在於使 Sun 的 Visual WorkShop 調試器能夠顯示表達式表達式求值。實際上，這個
特性是用通用的方式實現的，所以它還可以用來顯示其他的信息。

氣泡表達式求值還有一些可以設置的參數。對於 Motif，字體列表和顏色可以通過 X 
資源 (XmNballoonEvalFontList, XmNballoonEvalBackground, 和
XmNballoonEvalForeground) 來設定。

選項 'balloondelay' 用來設定顯示氣泡之前的延遲時間。
選項 'ballooneval' 必須打開。

氣泡表達式求值僅當用 |+balloon_eval| 特性編譯時有效。

氣泡表達式求值功能還被用來為工具欄顯示提示。對於這個用途，無須設置選項
'ballooneval'，但是其他選項的值將被應用。

另一種使用氣泡表達式的方法是使用 'balloonexpr' 選項。完全由用戶定義。

==============================================================================
2. Vim 編譯選項						*debugger-compilation*

調試器特性是為了和 Sun 的 Visual WorkShop 集成編程環境 (ipe) 一起使用而開發
的。事實上，它們使用了一種通用的方式，所以其他的調試器也可以使用一部分，甚至是
所有的那些原本被 Sun 的 ipe 所使用的工具。

以下的編譯時的預處理程序變量控制著這些特性：

    交替命令輸入				ALT_X_INPUT
    調試符號					FEAT_SIGNS
    調試高亮					FEAT_SIGNS
    信息頁腳					FEAT_FOOTER
    氣泡表達式求值				FEAT_BEVAL

最先提供且帶有完整 IPE/IDE 的整合來自 Sun Visual WorkShop。如果需要編譯一個帶
有 VWS 接口的 gvim，請設置下面這個標誌位，它會設置以上所有的標誌位：

    Sun Visual WorkShop				FEAT_SUN_WORKSHOP

==============================================================================
3. 整合的調試器						*debugger-integration*

一個完全整合的 調試器/IPE/IDE 是 Sun 的 Visual WorkShop 集成編程環境。

對 Sun NetBeans 的支持，可見 |netbeans|。

 vim:tw=78:sw=4:ts=8:ft=help:norl:
