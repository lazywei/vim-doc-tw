*usr_32.txt*	For Vim version 7.3.  最近更新: 2010年7月

		     VIM USER MANUAL - by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net

			      撤銷樹


Vim 提供了多層撤銷功能。如果你撤銷了一些改變然後又進行了一些新的改變，你就在撤
銷樹裡建立了一個分支。本文本討論如何在分支間來回移動。

|32.1|	撤銷到文件寫入時的狀態
|32.2|	為每次改變進行編號
|32.3|	撤銷樹內任意跳轉
|32.4|	時間旅行

           後一章: |usr_40.txt|  創建新的命令
           前一章: |usr_31.txt|  利用 GUI
             目錄: |usr_toc.txt|

==============================================================================
*32.1*	撤銷到文件寫入時的狀態

有時你做了一些改變，然後發現還是想恢復到最近寫入文件時的狀態。沒問題，用下面的
命令就可以: >

	:earlier 1f

這裡，"f" 代表 "file" (文件)。

可以重複此命令，回到更遙遠的過去。使用不同於 1 的計數值可以回去得快一些。

如果回去太久了，可以這樣往前: >

	:later 1f

注意 這些命令真的是依據時間序列進行的。如果你在撤銷一些改變後又進行過改變，這
一點很有區別。下一節有所解釋。

另外也請 注意 我們說的是文本寫入。要把撤銷信息寫入文件見 |undo-persistence|。

==============================================================================
*32.2*	為每次改變進行編號

|02.5| 一節，我們只討論了單線的撤銷/重做。其實，可以出現分支。當你撤銷了一些改
變，又進行了一些新的改變，新的改變構成了撤銷樹的一個分支。

讓我們從文本 "one" 開始。第一個要做的改變是附加 " too"。然後移動到第一個 'o'
上並修改為 'w'。這時我們有了兩個改變，分別編號為 1 和 2，而文本有三個狀態:

		one ~
		 |
	      改變 1
		 |
	      one too ~
		 |
	      改變 2
		 |
	      one two ~

如果我們撤銷一次改變，回到 "one too"，然後把 "one" 換成 "me"，我們就在撤銷樹裡
建立了一個分支:

		one ~
		 |
	      改變 1
		 |
	      one too ~
	      /     \
	 改變 2    改變 3
	    |         |
	 one two    me too ~

現在你可以用 |u| 命令來撤銷。如果你做兩次，你得到的是 "one"。用 |CTRL-R| 來重
做，你會到達 "one too"。多做一次 |CTRL-R| 又把你帶到 "me too"。現在我們看到，
撤銷/重做使用最近使用的分支，在樹內上下移動。

這裡重要的是改變發生的順序。這裡說的改變不考慮撤銷和重做。每次改變後，你會得到
一個新的文本狀態。

注意 只有改變被編號，上面顯示的文本沒有標識符。通常，通過它上方的改變號來引用
它。但有時也通過他下方的某個改變之一來引用。特別是在樹內往上移動的時候，這樣你
可以知道哪個改變剛剛被撤銷掉。

==============================================================================
*32.3*	撤銷樹內任意跳轉

那麼你現在怎麼能到 "one two" 呢？你可以用這個命令: >

	:undo 2

文本現在成為了 "one two"，因為它在改變號 2 之下。用 |:undo| 命令可以跳轉到樹內
任何改變之下的文本。

現在再進行一項改變: 把 "one" 改成 "not":

		one ~
		 |
	      改變 1
		 |
	      one too ~
	      /     \
	 改變 2    改變 3
	    |	      |
	 one two    me too ~
	    |
	 改變 4
	    |
	 not two ~

現在你又改了主意想回到 "me too" 了。用 |g-| 命令。它在時間點上往後退，也就是
說，它不是在樹內上下移動，而是回到之前所在的改變。

你可以重複 |g-|，這樣你會看到文本的變化過程:
	me too ~
	one two ~
	one too ~
	one ~

用 |g+| 時間點上往前進:
	one ~
	one too ~
	one two ~
	me too ~
	not two ~

|:undo| 用於你知道你要跳轉到哪個改變的場合。|g-| 和 |g+| 用於你不知道具體要到
達的改變號的情況。

你可以在 |g-| 和 |g+| 之前加上計數來重複執行。

==============================================================================
*32.4*	時間旅行

如果你在文本上工作了一段時間，撤銷樹變得相當大。這時你可能想回到幾分鐘之前的文
本上。

要看撤銷樹裡有什麼分支，用: >

	:undolist
<	number changes  time ~
	     3       2  16 seconds ago
	     4       3  5 seconds ago

這裡你可以看到每個分支上葉結點的編號，還有改變發生的時間。假定我們在改變號 4
下方的 "not two" 那裡，你可以這樣回到十秒前: >

	:earlier 10s

取決於改變發生了多長時間，你回到達樹內的某個位置。|:earlier| 命令參數可以用
"m" 代表分鐘，"h" 代表小時，"d" 代表天。用一個很大的數，你可以一路回到很久以
前: >

	:earlier 100d

要 (再次) 進入未來世界，用 |:later| 命令: >

	:later 1m

參數可以用 "s"、"m" 和 "h"，和 |:earlier| 完全類似。

要看到更多的細節，或者要對信息進行操作，可以用 |undotree()| 函數。要看看它返回
什麼: >

	:echo undotree()

==============================================================================

下一章: |usr_40.txt|  創建新的命令

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
