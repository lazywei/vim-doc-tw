*pattern.txt*   For Vim version 7.3.  最近更新：2009年4月


		  VIM REFERENCE MANUAL    by Bram Moolenaar
		    譯者: lang2 http://vimcdoc.sf.net


模式及查找命令					*pattern-searches*

最基本的東西可以在用戶手冊的 |03.9| 節中找到。在 |usr_27.txt| 也有一些解釋。

1. 查找命令			|search-commands|
2. 匹配模式的定義		|search-pattern|
3. 魔術				|/magic|
4. 模式項總覽			|pattern-overview|
5. 倍數項			|pattern-multi-items|
6. 普通匹配原			|pattern-atoms|
7. 忽略大小寫			|/ignorecase|
8. 合成用字符			|patterns-composing|
9. 與 Perl 匹配模式的比較	|perl-patterns|
10. 高亮顯示匹配		|match-highlight|

==============================================================================
1. 查找命令					*search-commands* *E486*

							*/*
/{pattern}[/]<CR>	正向查找第 [count] 次出現 {pattern} 的地方
			(|exclusive| 開動作)。

/{pattern}/{offset}<CR>	正向查找第 [count] 次出現 {pattern} 的地方並向上或下移
			動 |{offset}| 行。|linewise| 行動作。

							*/<CR>*
/<CR>			正向查找第 [count] 次出現處，使用上次的模式
			|last-pattern| 以及上次的 |{offset}|。

//{offset}<CR>		正向查找第 [count] 次出現處，使用上次的模式
			|last-pattern| 以及新偏移 |{offset}|。若 {offset} 為
			空，不使用任何偏移。

							*?*
?{pattern}[?]<CR>	反向查找第 [count] 次出現 {pattern} 的地方
			(|exclusive| 開動作)

?{pattern}?{offset}<CR>	反向查找第 [count] 次出現 {pattern} 的地方
			並向上或下移動 |{offset}| 行 |linewise| 行動作。

							*?<CR>*
?<CR>			反向查找第 [count] 次出現處，使用上次的模式
			|last-pattern| 以及上次的 |{offset}|。

??{offset}<CR>		反向查找第 [count] 次出現處，使用上次的模式
			|last-pattern| 以及新偏移 |{offset}|。若 {offset} 為
			空，不使用任何偏移。

							*n*
n			將上次的 "/" 或 "?" 重複 [count] 次。
			|last-pattern| {Vi: 無計數}

							*N*
N			將上次的 "/" 或 "?" 在相反方向上重複 [count] 次。
			|last-pattern| {Vi: 無計數}

							*star* *E348* *E349*
*			正向查找第 [count] 次出現距離當前光標最近的單詞的地
			方。用於查找的單詞是以下最先符合條件的:
				1. 光標所在的關鍵字 |'iskeyword'|
				2. 當前行內的光標後的第一個關鍵字。
				3. 光標所在的非空白單詞
				4. 當前行內的光標後的第一個非空白單詞
			只查找整字，就像使用了命令 "/\<keyword\>" 一樣。
			(|exclusive| 開動作) {Vi 無此功能} 
			使用 'ignorecase'，不使用 'smartcase'。

							*#*
#			同 "*"，但反向查找。也可以用磅符號 (字符 163)。如果
			"#" 的功能和退格鍵一樣，試著在啟動 Vim 前使用
			"stty erase <BS>" (<BS> 是 CTRL-H 或真的退格鍵)。
			{Vi 無此功能}

							*gstar*
g*			同 "*"，但不使用 "\<" 和 "\>"。這樣查找就會匹配非整字
			的地方。{Vi 無此功能}

							*g#*
g#			同 "#"，但不使用 "\<" 和 "\>"。這樣查找就會匹配非整字
			的地方。{Vi 無此功能}

							*gd*
gd			跳轉 (goto) 至局部聲明 (declaration)。當光標下是一個局
			部變量時，此命令會跳轉到該變量被聲明的地方。
			首先，Vim 會查找當前函數的起始處，就像使用 "[[" 一樣。
			如果找不到會停止在第一行。如果找到， Vim 會反向搜索直
			到找到一個空行，然後從這裡開始正向查找光標所在的關鍵
			字，就像使用了 "*" 一樣，但看起來像註釋的行會被忽略。
			(見 'comments' 選項)。
			注意 這並非總有效。Vim 不會做語法分析。它僅僅查找關鍵
			字的匹配。如果頭文件也需要搜索的話，可以使用
			|include-search| 列出的命令。
			這個命令之後，可以使用 |n| 正向查找下一個匹配 (不能反
			向)。
			{Vi 無此功能}

							*gD*
gD			跳轉 (goto) 至全局聲明 (Declaration)。當光標下是一個全
			局變量時，此命令會跳轉到該變量被聲明的地方。此命令和
			"gd" 命令一樣，不過查找總是從第一行開始。{Vi 無此功能}

							*1gd*
1gd			同 "gd"，但忽略光標位置前結束的 {} 塊裡的匹配。
			{Vi 無此功能}

							*1gD*
1gD			同 "gD"，但忽略光標位置前結束的 {} 塊裡的匹配。
			{Vi 無此功能}

							*CTRL-C*
CTRL-C			中止當前的 (搜索) 命令。在 MS-DOS 上用 CTRL-Break
			|dos-CTRL-Break|。
			在普通模式下，任何等待的命令將被終止。

							*:noh* *:nohlsearch*
:noh[lsearch]		停止 'hlsearch' 選項的高亮顯示。如果再執行查找命令或者
			設定 'hlsearch' 選項，高亮會自動打開。此命令無法在自動
			命令裡使用，因為高亮的狀態會在自動命令執行期間自動保存
			和恢復 |autocmd-searchpat|。
			執行用戶函數時也是如此。

如果打開 'incsearch' 選項，鍵入查找模式時，即時顯示當前的匹配。不過，你還得用
<CR> 來結束查找命令並將光標定位到顯示的匹配。也可以用 <ESC> 來放棄查找。

如果打開 'hlsearch'，最後一次查找命令的所有匹配點都會被高亮。用 |:nohlsearch|
命令來暫停。

					*search-offset* *{offset}*
這些命令查找一個指定的模式。而 "/" 和 "?" 命令還可以指定一個額外的偏移量。有兩
種偏移：行偏移和字符偏移。{Vi 沒有字符偏移}

偏移用來指定光標相對於找到的匹配的位置:
    [num]	[num] 行向下，第一列
    +[num]	[num] 行向下，第一列
    -[num]	[num] 行向上，第一列
    e[+num]	[num] 字符向右 (從匹配結束 (end) 處算起)
    e[-num]	[num] 字符向左 (從匹配結束 (end) 處算起)
    s[+num]	[num] 字符向右 (從匹配開始 (start) 處算起)
    s[-num]	[num] 字符向左 (從匹配開始 (start) 處算起)
    b[+num]	[num] 等價於 s[+num] (從匹配開始 (begin) 處算起)
    b[-num]	[num] 等價於 s[-num] (從匹配開始 (begin) 處算起)
    ;{pattern}  開始另一項搜索，見 |//;|

如果給出了 '-' 或 '+' 但是省略了 [num]，會使用缺省的 1。
如果使用了 'e' 偏移，查找會成為 |inclusive| 閉動作 (光標要到達的字符本身會包含
在操作裡)。

示例:

模式			光標位置	~
/test/+1		"test" 下一行，第一列
/test/e			"test" 的後一個 't'
/test/s+2		"test" 中的 's'
/test/b-3		"test" 前的第三個字符

如果把這些命令之一和一個操作符連用，影響的是查找之前和之後光標位置之間的字符。
然而，如果使用了行偏移，影響的是兩光標位置之間的所有整行。

一個演示如何查找一個模式並用另一個單詞來更改匹配的例子: >
	/foo<CR>	查找 "foo"
	c//e		修改從當前位置到匹配結尾的部分
	bar<Esc>	輸入替換文本
	//<CR>		跳轉到下一個相同匹配的開始
	c//e		修改從當前位置到匹配結尾的部分
	beep<Esc>	輸入替換文本
			等等。
<
							*//;* *E386*
一個很特別的偏移是 ';' 後面接另一個查找命令。例如: >

   /test 1/;/test
   /test.*/+1;?ing?

其中第一例會先找到下一個出現 "test 1" 的地方，然後尋找在它之後 "test" 的第一次
出現之處。

這就好像接連執行兩次查找命令，不同之處在於:
- 它可以被當作操作符之後的單個移動命令。
- 以後的 "n" 或 "N" 命令基於第一個查找操作。
- 當有錯誤時光標原地不動。

							*last-pattern*
最近使用的模式和偏移會被記住。它們可以用來重複查找，而且查找的方向和計數都可以
修改。注意 Vim 會記住兩個模式：一個是普通模式下查找命令用的，另一個是替代命令
":s" 用的。每次給出一個空白的模式時，都將用到前次使用模式。

'magic' 選項的值是和最近使用模式本身綁定的。如果你改變了 'magic'，最近使用模式
的解釋方法不會改變。'ignorecase' 選項就不同。當 'ignorecase' 的值改變時，該模
式會匹配另外的文本。

如果你設定了 'hlsearch' 選項，所有最近使用的查找模式的匹配點都會高亮。

要清除最近使用的查找模式: >
	:let @/ = ""
這不會把該模式設置為空串，因為那樣會匹配所有的東西。該模式是真的清除了，就像
Vim 剛剛啟動一樣。

查找通常會跳過那些不移動光標位置的匹配。下一次匹配是開始於下一個字符還是在跳過
那些匹配之後取決於 'cpoptions' 選項中的 'c' 標誌位。見 |cpo-c|。
	     帶 'c' 標誌位:   "/..." 前進 1 至 3 個字符
	   不帶 'c' 標誌位:   "/..." 前進 1 個字符
帶 'c' 標誌位對應結果難以完全確定，因為查找可以從第一列開始，忽略任何匹配，直
到找到超過光標位置的匹配為止。

如果反向尋找，要是如上所述 'cpoptions' 裡包含了 'c' 標誌位的話，從行首開始搜
索，使用光標位置之前的最後一個匹配。

在 Vi 裡 ":tag" 命令會將最近查找模式設定為要搜索的標籤。除非 'cpoptions' 選項
中包括 't' 標誌位，Vim 不會這樣做，前次查找模式仍然被記住。查找模式總被存入查
找歷史記錄。

如果 'wrapscan' 選項的值為真 (缺省) 的話，查找會在緩衝區的結尾折返到首部。如果
不為真，反向查找會在開始處停止；正向查找會在結尾處停止。如果該選項為真但找不到
該模式，會給出一個錯誤信息："pattern not found"，光標原地不動。如果不為真，取
決於查找的方向是正向還是反向，給出的信息是："search hit BOTTOM without match"
或者 "search hit TOP without match"。如果該選項為真，當查找折返時會分別顯示：
"search hit TOP, continuing at BOTTOM" 或 "search hit BOTTOM, continuing at
TOP"。此時，消息可以用設定 'shortmess' 選項裡的 's' 標誌位來關閉。該信息的顯示
會使用 'w' 的高亮方法 (缺省: 突出)。

							*search-range*
用 \%>l 項目，你可以限定 "/" 命令查找的範圍。例如，要在行 199 之下行 300 之上
搜索單詞 "limit": >
	/\%>199l\%<300llimit
另見 |/\%>l|。

另一個方法是使用 ":substitute" 命令並與 'c' 聯用。例: >
   :.,300s/Pattern//gc
這個命令會從光標所在處開始查找 "Pattern"，直到第 300 行。在匹配處，你會被提示
鍵入一個字符。鍵入 'q' 終止；鍵入 'n' 找下一個匹配。

"*"，"#"，"g*" 和 "g#" 命令依照以下的次序查找在光標附近的一個單詞，使用以下最
先找到的那個:
- 光標所在的關鍵字。
- 同行的光標右側的第一個關鍵字。
- 光標下的第一個字串 (WORD)。
- 同行的光標右側的第一個字串 (WORD)。
關鍵字只能包括字母和 'iskeyword' 中的字符。字串 (WORD) 可以包括任何非空白
(<Tab> 和／或 <Space>)。
備註 如果你用十個指頭打字的話，這些字符是很容易記住的：
"#" 在你的左手中指上 (向左上查找)；"*" 在你的右手中指上 (向右下查找)。
(不過，這取決於你的鍵盤佈局)。

==============================================================================
2. 模式的定義				*search-pattern* *pattern* *[pattern]*
					*regular-expression* *regexp* *Pattern*
					*E76* *E383* *E476*

頭一道菜已經在用戶手冊的第 27 章 |usr_27.txt| 上過了。

						*/bar* */\bar* */pattern*
1. 一個模式 (pattern) 是由 "\|" 分隔開的一個或多個分支 (branch)。它可以匹配其
   中的任何一個分支匹配的文本。例如："foo\|beep" 可以匹配 "foo" 或 "beep"。如
   果超過一個分支可以匹配，選用其中的第一個。

   pattern ::=	    branch
		或  branch \| branch
		或  branch \| branch \| branch
		等。

						*/branch* */\&*
2. 一個分支是一個或多個被 "\&" 分隔的鄰接。它匹配最後一個鄰接，但僅僅當前面所
   的鄰接也在同樣位置匹配。例:
	"foobeep\&..." 匹配 "foobeep" 中的 "foo"。
	".*Peter\&.*Bob" 匹配同時包括 "Peter" 和 "Bob" 的一行

   branch ::=	    concat
		或  concat \& concat
		或  concat \& concat \& concat
		等。

						*/concat*
3. 一個鄰接 (concat) 是一或多個相鄰的組件 (piece)。它匹配第一個組件，後接第二
   個組件的匹配，等等。例如: "f[0-9]b"，先匹配 "f"，然後是一個數位，接著 "b"。

   concat  ::=	    piece
		或  piece piece
		或  piece piece piece
		等。

						*/piece*
4. 一個組件是一個匹配原 (atom)，後面可能帶一個倍數 (multi)，用來表示該匹配原匹
   配的次數。例如："a*" 匹配任意個 "a" 組成的序列: ""，"a"，"aa" 等。參見
   |/multi|。

   piece   ::=	    atom
		或  atom  multi

						*/atom*
5. 一個匹配原可以是一個很長的條目列表中的一個。許多匹配原用來匹配文本中的一個
   字符，通常是一個普通的字符或字符類。也可以用圓括號來將一個模式變成一個匹配
   原。下面的 "\z(\)" 構造僅用在語法高亮中。

   atom    ::=	    ordinary-atom		|/ordinary-atom|
		或  \( pattern \)		|/\(|
		或  \%( pattern \)		|/\%(|
		或  \z( pattern \)		|/\z(|


==============================================================================
3. 魔術								*/magic*

某些字符在模式中是按本義出現的。它們匹配自身。然而，當前面有一個反斜槓時，這些
字符具有特殊的含義。

另外一些字符即使沒有反斜槓也代表特殊的意思。它們反而需要一個反斜槓來匹配按本義
出現的自身。

一個字符是否按本義出現取決於 'magic' 選項以及下面將解釋的條目。
							*/\m* */\M*
使用 "\m" 會使得其後的模式的解釋方式就如同設定了 'magic' 選項一樣。而且將忽略
'magic' 選項的實際值。
使用 "\M" 會使得其後的模式的解釋方式就如同設定了 'nomagic' 選項一樣。
							*/\v* */\V*
使用 "\v" 會使得其後的模式中所有 '0'-'9'，'a'-'z'，'A'-'Z' 和 '_' 之外的字符都
當作特殊字符解釋。"very magic"

使用 "\V" 會使得其後的模式中只有反斜槓有特殊的意義。"very nomagic"

示例:
在這之後: \v	   \m	    \M	     \V		匹配 ~
		'magic' 'nomagic'
	  $	   $	    $	     \$		匹配行尾
	  .	   .	    \.	     \.		匹配任何字符
	  *	   *	    \*	     \*		前面匹配原的任意次重複
	  ()	   \(\)     \(\)     \(\)	組成為單個匹配原
	  |	   \|	    \|	     \|		分隔可選分支
	  \a	   \a	    \a	     \a		字母字符
	  \\	   \\	    \\	     \\		反斜槓 (按本義)
	  \.	   \.	    .	     .		英文句號 (按本義)
	  \{	   {	    {	     {		'{'  (按本義)
	  a	   a	    a	     a		'a'  (按本義)

{僅 Vim 支持 \m，\M，\v 和 \V}

建議始終將 'magic' 選項保持在缺省值 －  'magic'。這可以避免移植性的麻煩。要使
模式不受該選項值的影響，在模式前面加上 "\m" 或 "\M"。

==============================================================================
4. 模式項總覽						*pattern-overview*

倍數總覽。						*/multi* *E61* *E62*
更多解釋和示例見下，點擊鏈接即可。					*E64*

	  倍數 ~
     'magic' 'nomagic'	匹配前面的匹配原 ~
|/star|	*	\*	0 或更多	盡可能多
|/\+|	\+	\+	1 或更多	盡可能多 (*)
|/\=|	\=	\=	0 或 1		盡可能多 (*)
|/\?|	\?	\?	0 或 1		盡可能多 (*)

|/\{|	\{n,m}	\{n,m}	n 到 m		盡可能多 (*)
	\{n}	\{n}	n		準確 (*)
	\{n,}	\{n,}	最少 n		盡可能多 (*)
	\{,m}	\{,m}	0 到 m		盡可能多 (*)
	\{}	\{}	0 或更多	盡可能多 (和 * 相同) (*)

|/\{-|	\{-n,m}	\{-n,m}	n 到 m		盡可能少 (*)
	\{-n}	\{-n}	n		準確 (*)
	\{-n,}	\{-n,}	最少 n		盡可能少 (*)
	\{-,m}	\{-,m}	0 到 m		盡可能少 (*)
	\{-}	\{-}	0 或更多	盡可能少 (*)

							*E59*
|/\@>|	\@>	\@>	1，要求完整的模式匹配 (不能回溯) (*)
|/\@=|	\@=	\@=	無，但要求匹配 |/zero-width| (*)
|/\@!|	\@!	\@!	無，但要求_不_匹配 |/zero-width| (*)
|/\@<=|	\@<=	\@<=	無，但要求反向匹配 |/zero-width| (*)
|/\@<!|	\@<!	\@<!	無，但要其反向_不_匹配 |/zero-width| (*)

(*) {Vi 無此功能}


普通匹配原總覽。					*/ordinary-atom*
更多解釋和示例見下，點擊鏈接即可。

          普通匹配原 ~
      magic   nomagic	匹配 ~
|/^|	^	^	行首 (在模式起始) |/zero-width|
|/\^|	\^	\^	按本義出現的 '^'
|/\_^|	\_^	\_^	行首 (用於任何地方) |/zero-width|
|/$|	$	$	行尾 (在模式結尾) |/zero-width|
|/\$|	\$	\$	按本義出現的 '$'
|/\_$|	\_$	\_$	行尾 (用於任何地方) |/zero-width|
|/.|	.	\.	任何單個字符 (不包括換行)
|/\_.|	\_.	\_.	任何單個字符，包括換行
|/\<|	\<	\<	單詞的起始 |/zero-width|
|/\>|	\>	\>	單詞的結尾 |/zero-width|
|/\zs|	\zs	\zs	任何字符，設定匹配部分起始
|/\ze|	\ze	\ze	任何字符，設定匹配部分結束
|/\%^|	\%^	\%^	文件首 |/zero-width|		*E71*
|/\%$|	\%$	\%$	文件尾 |/zero-width|
|/\%V|	\%V	\%V	可視區域內 |/zero-width|
|/\%#|	\%#	\%#	光標位置 |/zero-width|
|/\%'m|	\%'m	\%'m	位置標記 m 的位置 |/zero-width|
|/\%l|	\%23l	\%23l	在第 23 行 |/zero-width|
|/\%c|	\%23c	\%23c	在第 23 列 |/zero-width|
|/\%v|	\%23v	\%23v	在虛擬第 23 列 |/zero-width|

字符類 {Vi 無此功能}:				*/character-classes*
|/\i|	\i	\i	標識符字符 (見 'isident' 選項)
|/\I|	\I	\I	同 "\i"，但不包括數字字符
|/\k|	\k	\k	關鍵字字符 (見 'iskeyword' 選項)
|/\K|	\K	\K	同 "\k"，但不包括數字字符
|/\f|	\f	\f	文件名字符 (見 'isfname' 選項)
|/\F|	\F	\F	同 "\f"，但不包括數字字符
|/\p|	\p	\p	可顯示字符 (見 'isprint' 選項)
|/\P|	\P	\P	同 "\p"，但不包括數字字符
|/\s|	\s	\s	空白字符； <Space> 和 <Tab>
|/\S|	\S	\S	非空白字符：\s 之反
|/\d|	\d	\d	數位:			[0-9]
|/\D|	\D	\D	非數位:			[^0-9]
|/\x|	\x	\x	十六進制數位:		[0-9A-Fa-f]
|/\X|	\X	\X	非十六進制數位:		[^0-9A-Fa-f]
|/\o|	\o	\o	八進制數位:		[0-7]
|/\O|	\O	\O	非八進制數位:		[^0-7]
|/\w|	\w	\w	單詞字符:		[0-9A-Za-z_]
|/\W|	\W	\W	非單詞字符:		[^0-9A-Za-z_]
|/\h|	\h	\h	單詞首字符:		[A-Za-z_]
|/\H|	\H	\H	非單詞首字符:		[^A-Za-z_]
|/\a|	\a	\a	英文字母字符:		[A-Za-z]
|/\A|	\A	\A	非英文字母字符:		[^A-Za-z]
|/\l|	\l	\l	小寫字符:		[a-z]
|/\L|	\L	\L	非小寫字符:		[^a-z]
|/\u|	\u	\u	大寫字符:		[A-Z]
|/\U|	\U	\U	非大寫字符		[^A-Z]
|/\_|	\_x	\_x	其中 x 可以是以上任意一個字符：對應字符類加上換行
 (字符類結束)

|/\e|	\e	\e	<Esc>
|/\t|	\t	\t	<Tab>
|/\r|	\r	\r	<CR>
|/\b|	\b	\b	<BS>
|/\n|	\n	\n	行尾符
|/~|	~	\~	上次給出的替代字符串
|/\1|	\1	\1	第一個 \(\) 匹配的字符 {Vi 無此功能}
|/\2|	\2	\2	如 "\1"，但用第二個 \(\)
	   ...
|/\9|	\9	\9	如 "\1"，但用第九個 \(\)
								*E68*
|/\z1|	\z1	\z1	僅用於語法高亮，見 |:syn-ext-match|
	   ...
|/\z1|	\z9	\z9	僅用於語法高亮，見 |:syn-ext-match|

	x	x	一個沒有特殊含義的字符匹配其自身

|/[]|	[]	\[]	[] 內指定的任何字符之一
|/\%[]| \%[]	\%[]	一個可選匹配原的序列

|/\c|	\c	\c	忽略大小寫，不使用 'ignorecase' 選項
|/\C|	\C	\C	匹配大小寫，不使用 'ignorecase' 選項
|/\m|	\m	\m	對之後模式中字符打開 'magic' 選項
|/\M|	\M	\M	對之後模式中字符關閉 'magic' 選項
|/\v|	\v	\v	對之後模式中字符設定 'magic' 選項為 "very magic"
|/\V|	\V	\V	對之後模式中字符設定 'magic' 選項為 "very nomagic"
|/\Z|	\Z	\Z	忽略 Unicode 中的 "組合用字符"，對於搜索帶元音的希伯來
			和阿拉伯文本有用。

|/\%d|	\%d	\%d	匹配用十進制指定的字符 (如 \%d123)
|/\%x|	\%x	\%x	匹配用十六進制指定的字符 (如 \%x2a)
|/\%o|	\%o	\%o	匹配用八進制指定的字符 (如 \%o040)
|/\%u|	\%u	\%u	匹配指定的多字節字符 (如 \%u20ac)
|/\%U|	\%U	\%U	匹配指定的巨大多字節字符 (如 \%U12345678)

示例			匹配 ~
\<\I\i*		或
\<\h\w*
\<[a-zA-Z_][a-zA-Z0-9_]*
			一個標識符 (例如，在一個 C 程序裡)。

\(\.$\|\. \)		一個英文句號後跟 <EOL> 或一個空格。

[.!?][])"']*\($\|[ ]\)	一個匹配英文句子結尾的模式。幾乎和 ")" 的定義相同。

cat\Z			匹配 "cat" 和 "càt" ("a" 後跟 0x0300)
			不匹配 "càt" (字符 0x00e0)，即使它們看起來可能一樣。


==============================================================================
5. 倍數項					*pattern-multi-items*

一個匹配原後面可以跟一個表示該匹配原匹配次數和方式的修飾。這個修飾稱為倍數。
在 |/multi| 可以看到一個綜述。

						*/star* */\star* *E56*
*	(在沒有設定 'magic' 時使用 \*)
	匹配 0 或更多個前面的匹配原，盡可能多地匹配。
	示例     'nomagic'	匹配 ~
	a*	   a\*		""、"a"、"aa"、"aaa" 等。
	.*	   \.\*		任意，包括空串，不包括行尾符
	\_.*	   \_.\*	匹配至緩衝區結束
	\_.*END	   \_.\*END	匹配至緩衝區中最後一次出現 "END" 處，包括該
				"END"

	特例: 當 "*" 用在模式的開頭或者緊跟在 "^" 之後時，它匹配星號字符。

	要當心，重複匹配 "\_." 會包括大量的文本，因而可能會花很長時間。例如，
	"\_.*END" 匹配從當前位置開始到文件中最後一次出現 "END" 的地方。因為
	"*" 會盡可能多的匹配，它會先跳過到文件結束前的所有行，然後一次退一個字
	符以查找 "END"。

							*/\+* *E57*
\+	匹配一個或更多前面的匹配原。盡可能多。{Vi 無此功能}
	例		匹配 ~
	^.\+$		任意空行
	\s\+		一個以上的空白字符

							*/\=*
\=	匹配 0 或 1 個前面的匹配原。盡可能多。{Vi 無此功能}
	例		匹配 ~
	foo\=		"fo" 和 "foo"

							*/\?*
\?	和 \= 一樣。不能和反向查找的 "?" 命令中使用。{Vi 無此功能}

						*/\{* *E58* *E60* *E554*
\{n,m}	匹配 n 至 m 個前面的匹配原。盡可能多
\{n}	匹配 n 個前面的匹配原
\{n,}	匹配至少 n 個前面的匹配原。盡可能多
\{,m}	匹配 0 至 m 個前面的匹配原。盡可能多
\{}	匹配 0 個以上前面的匹配原。盡可能多 (和 * 等價)
							*/\{-*
\{-n,m}	匹配 n 至 m 個前面的匹配原。盡可能少
\{-n}	匹配 n 個前面的匹配原
\{-n,}	匹配至少 n 個前面的匹配原。盡可能少
\{-,m}	匹配 0 至 m 個前面的匹配原。盡可能少
\{-}	匹配 0 個以上前面的匹配原。盡可能少
	{Vi 沒有這些}

	n 和 m 是正的十進制數或零
								*non-greedy*
	如果一個 "-" 緊接在 "{" 之後，那麼最短匹配優先算法將啟用 (見下面的例
	子)。特別的，"\{-}" 和 "*" 一樣，但使用最短匹配優先算法。_不過_，更早
	開始的匹配比更短的匹配優先: "a\{-}b" 匹配 "xaaab" 中的 "aaab"。

	示例			匹配 ~
	ab\{2,3}c		"abbc" 或 "abbbc"
	a\{5}			"aaaaa"
	ab\{2,}c		"abbc"、"abbbc"、"abbbbc" 等
	ab\{,3}c		"ac"、"abc"、"abbc" 或 "abbbc"
	a[bc]\{3}d		"abbbd"、"abbcd"、"acbcd"、"acccd" 等。
	a\(bc\)\{1,2}d		"abcd" 或 "abcbcd"
	a[bc]\{-}[cd]		"abcd" 中的 "abc"
	a[bc]*[cd]		"abcd" 中的 "abcd"

	} 之前可以加 (也可以不加) 一個反斜槓: \{n,m\}。

							*/\@=*
\@=	零寬度匹配前面的匹配原。{Vi 無此功能}
	類似於 Perl 中的 "(?=pattern)"。
	示例			匹配 ~
	foo\(bar\)\@=		"foobar" 中的 "foo"
	foo\(bar\)\@=foo	空
							*/zero-width*
	"\@=" (或 "^"，"$"，"\<"，"\>") 的匹配不包括任何字符。這些字符僅僅是用
	來檢查匹配是否存在。這很容易搞錯，因為後續的項會在同樣位置作匹配。上面
	的最後一個例子不會匹配 "foobarfoo"，因為 Vim 會嘗試在 "bar" 匹配的同樣
	地方匹配 "foo"。

	注意 使用 "\&" 同使用 "\@=" 是一樣的: "foo\&.." 等於 "\(foo\)\@=.."。
	但用 "\&" 容易些，你可以省了那些括號。


							*/\@!*
\@!	零寬度否匹配，亦即，要求前面的匹配原在當前位置_不_匹配。
	|/zero-width| {Vi 無此功能}
	類似於 Perl 中的 '(?!pattern)"。
	示例			匹配 ~
	foo\(bar\)\@!		任意後面不帶 "bar" 的 "foo"
	a.\{-}p\@!		"a"，"ap"，"app" 等。後面不帶 "p"
	if \(\(then\)\@!.\)*$	"if " 後面無跟隨 "then"

	使用 "\@!" 要小心，因為很多地方一個模式可以不匹配。"a.*p\@!" 會匹配一
	個 "a" 直到行尾，因為 ".*" 匹配所有行內的字符，而 "p" 不在行尾匹配。
	"a.\{-}p\@!" 則可以匹配 "a"，"ap"，"aap" 等中的一項，只要它們不再緊跟
	另外一個 "p"，這是因為 "." 可以匹配 "p" 而 "p\@!" 不匹配這個 "p" 的後
	面。

	你不能用 "\@!" 去尋找匹配所在位置之前的否匹配。"\(foo\)\@!bar" 會匹配
	"foobar" 中的 "bar"，因為在 "bar" 匹配的位置上，"foo" 並不匹配。如果
	不想匹配 "foobar"，你可以嘗試 "\(foo\)\@!...bar"，但它不能匹配在行首出
	現的 "bar"。最好的方法是用 "\(foo\)\@<!bar"。

							*/\@<=*
\@<=	零寬度反向匹配。要求前面的匹配原緊貼在後面的模式之前匹配。
	|/zero-width| {Vi 無此功能}
	類似於 Perl 的 '(?<=pattern)"，但是 Vim 允許使用非固定寬度的模式。
	示例			匹配 ~
	\(an\_s\+\)\@<=file	在 "an" 和若干個空白或者行尾符之後的 "file"。
	為了提高性能，最好避免這個倍數項。可以用 "\zs" 替代 |/\zs|。要匹配
	上述的示例： >
		an\_s\+\zsfile

<	"\@<=" 和 "\@<!" 檢查剛好在其後模式匹配點之前出現的匹配文本。理論上，
	這些匹配可以從當前位置之前的任何地方開始，為了限制所需的時間，只有其後
	匹配所在的行和它上一行 (如果有上一行的話) 會被檢索。這對大多數的應用來
	說已經足夠，而且也不會減慢速度太多。
	在 "\@<=" 和 "\@<!" 之後的模式其實先被匹配，所以不能用 "\1" 之類的結構
	來引用零寬度匹配原中的 \(\)。反過來倒是可以的。
	示例			匹配 ~
	\1\@<=,\([a-z]\+\)	",abc" in "abc,abc"

							*/\@<!*
\@<!	零寬度反向否匹配，要求前面的匹配原_不_緊貼在其後的模式之前匹配。換而言
	之，如果在當前行或之前的一行中沒有任何位置這個匹配原可以匹配而且它的匹
	配文本剛好緊貼在其後模式的匹配點之前。|/zero-width| {Vi 無此功能}
	類似於 Perl 的 '(?<!pattern)"，但是 Vim 允許使用非固定寬度的模式。
	該倍數所引用的匹配原必須緊貼在其後匹配之前，所以這個匹配原可以用 ".*"
	結尾。警告：該倍數項可能會很慢 (因為在匹配之前的許多位置都要被檢查)。
	示例			匹配 ~
	\(foo\)\@<!bar		任何不在 "foobar" 中的 "bar"
	\(\/\/.*\)\@<!in	不在 "//" 之後 (中間可以有間隔) 的 "in"

							*/\@>*
\@>	匹配前面的匹配原時要求完整匹配 (不能回溯)。{Vi 無此功能}
	類似於 Perl 中的 "(?>pattern)"。
	示例		匹配 ~
	\(a*\)\@>a	無 ("a*" 用盡了所有的 "a"，後面不可能再有)

	試圖匹配前面的匹配原，就如同匹配一個完整的模式那樣。如果以後無法匹配，
	不會用較短的子模式或者任何其它的方法來重試該匹配原。注意觀察以下兩者的
	不同: "a*b" 和 "a*ab" 都匹配 "aaab"，但是後者中的 "a*" 僅僅匹配前兩個
	"a"。"\(a*\)\@>ab" 不會匹配 "aaab"，因為 "a*" 匹配了 "aaa" (盡可能多
	的 "a")，導致 "ab" 無法匹配。


==============================================================================
6.  普通匹配原					*pattern-atoms*

一個普通匹配原可能是:

							*/^*
^	在模式起點或在 "\|"，"\("，"\%("，"\n" 之後: 匹配行首；在其它位置匹配
	按本義出現的 '^' 字符。|/zero-width|
	示例		匹配 ~
	^beep(		C 函數 "beep" 開始的地方 (很可能)。

							*/\^*
\^	匹配按本義出現的 '^' 字符。可以用於任何位置。

							*/\_^*
\_^	匹配行首。|/zero-width| 可以用於任何位置。
	示例		匹配 ~
	\_s*\_^foo	空白字符及空行，後接行首的 "foo"。

							*/$*
$	在模式終點或 "\|"、"\)" 或 "\n" (打開 'magic' 的話) 之前: 匹配行尾
	<EOL>；其它位置，匹配按本義出現的 '$' 字符。|/zero-width|

							*/\$*
\$	匹配按本義出現的 '$' 字符。可以用於任何位置。

							*/\_$*
\_$	匹配行尾。|/zero-width|  可以用於任何位置。注意："a\_$b" 永遠無法匹
	配，因為 "b" 不能匹配行尾符。可以使用 "a\nb" 代替 |/\n|。
	示例		匹配 ~
	foo\_$\_s*	"foo" 在行尾，後接空白字符及空行

.	('nomagic' 的情形: \.)				*/.* */\.*
	匹配任何單個字符，不包括行尾符。

							*/\_.*
\_.	匹配任何單個字符或行尾符。當心："\_.*" 會一直匹配到緩衝區結尾！

							*/\<*
\<	匹配單詞起點：下一個字符是單詞的首字符。'iskeyword' 選項指定哪些是組成
	單詞的字符。|/zero-width|

							*/\>*
\>	匹配單詞終點：前一個字符是單詞的尾字符。'iskeyword' 選項指定哪些是組成
	單詞的字符。|/zero-width|

							*/\zs*
\zs	匹配任何位置，並將匹配起始處置於該處: 下一個字符將是整個匹配的第一個字
	符。|/zero-width|
	例如:  >
		"^\s*\zsif"
<	匹配行首的 "if"，忽略前導的空白字符。
	可以使用多次，但實際使用最後一次在匹配的分支裡遇到的。例如:  >
		/\(.\{-}\zsFab\)\{3}
<	找到第三次出現的 "Fab"。
	{Vi 無此功能} {僅當編譯時加入 |+syntax| 特性才可用}
							*/\ze*
\ze	匹配任何位置，並將匹配結尾處置於該處: 前一個字符將是整個匹配的最後一個
	字符。|/zero-width|
	可以使用多次，但實際使用最後一次在匹配的分支裡遇到的。
	例如: "end\ze\(if\|for\)" 匹配 "endif" 和 "endfor" 中的 "end"。
	{Vi 無此功能} {僅當編譯時加入 |+syntax| 特性才可用}

						*/\%^* *start-of-file*
\%^	匹配文件頭。當用於一個字符串時，匹配字符串起始處。{Vi 無此功能}
	例如，要查找一個文件中首次出現 "VIM" 的地方: >
		/\%^\_.\{-}\zsVIM
<
						*/\%$* *end-of-file*
\%$	匹配文件尾。當用於一個字符串時，匹配字符串結束處。{Vi 無此功能}
	注意 下面的模式不匹配文件中的最後一個 "VIM": >
		/VIM\_.\{-}\%$
<	它會找到下一個 VIM，因為其後的部分總會匹配。這樣才能匹配文件中的最後一
	個 "VIM": >
		/VIM\ze\(\(VIM\)\@!\_.\)*\%$
<	這裡使用了 |/\@!| 來確定在首個 "VIM" 之後_無法_再次匹配 "VIM"。
	從文件尾部反向搜索會容易些！

						*/\%V*
\%V	在可視區域內匹配。可視模式停止後，在 |gv| 將會重新選擇的區域內匹配。
	這是一個零寬度 |/zero-width| 匹配。要確保整個模式都在可視區域裡，把本
	匹配原放在匹配模式的開始和結尾處，例如: >
		/\%Vfoo.*bar\%V
<	只能用於當前緩衝區。

						*/\%#* *cursor-position*
\%#	匹配光標位置。僅對顯示於窗口內的緩衝區有效。{Vi 無此功能}
	警 告: 如果使用了該模式之後光標被移動，結果不再有效，Vim 不會自動更新
	匹配。這對語法高亮和 'hlsearch' 很重要。換言之: 在光標移動時顯示並不因
	此而更新。Vim 只對行被修改 (整行被更新) 或用戶使用 |CTRL-L| 命令時 (整
	個屏幕被更新) 進行更新。例如，要高亮顯示光標下的單詞: >
		/\k*\%#\k*
<	當設定 'hlsearch' 時，移動光標並作若干更改，你就能清楚地看到更新在何時
	進行。

						*/\%'m* */\%<'m* */\%>'m*
\%'m	匹配位置標記 m 的位置。
\%<'m	匹配位置標記 m 之前的位置。
\%>'m	匹配位置標記 m 之後的位置。
	例如，高亮位置標記 's 到 'e 的文本: >
		/.\%>'s.*\%<'e..
<	注意 在匹配裡需要兩個句號來包含位置標記 'e。這是因為 "\%<'e" 匹配 'e
	位置標記之前的字符，而既然它是零寬度匹配 |/zero-width|，它並不真正包含
	該字符。
	{Vi 無此功能}
	警 告: 如果使用模式後移動了位置標記，結果不再有效。Vim 並不自動更新匹
	配。這和 "\%#" 裡移動光標的情形類似 |/\%#|。

						*/\%l* */\%>l* */\%<l*
\%23l	匹配指定的行。
\%<23l	匹配指定行的上方 (行號更小)。
\%>23l	匹配指定行的下方 (行號更大)。
	這三個匹配原可以用來匹配緩衝區內的特定行。"23" 可以是任何行號。第一行
	為 1。 {Vi 無此功能}
	警 告：當插入和刪除行時 Vim 不會自動更新匹配。這意味著語法高亮很快就會
	有問題。
	例如，要高亮顯示光標所在行: >
		:exe '/\%' . line(".") . 'l.*'
<	當設定 'hlsearch' 時，移動光標並作若干更改，你就能清楚地看到更新在何時
	進行。

						*/\%c* */\%>c* */\%<c*
\%23c	匹配指定的列。
\%<23c	匹配指定列之前。
\%>23c	匹配指定列之後。
	這三個匹配原可以用來匹配緩衝區或字符串中的特定列。"23" 可以是任何列
	號。第一列為 1。事實上，列以字節計算 (因此對多字節字符來說是不準確
	的)。 {Vi 無此功能}
	警 告：當插入和刪除字符時 Vim 並不自動更新匹配。這意味著語法高亮很快就
	會有問題。
	例如，要高亮顯示光標所在列: >
		:exe '/\%' . col(".") . 'c'
<	當設定 'hlsearch' 時，移動光標並作若干更改，你就能清楚地看到更新在何時
	進行。
	一個匹配第 44 列單個字節的例子: >
		/\%>43c.\%<46c
<	注意："\%<46c" 匹配第 45 列，而 "." 匹配 44 列的一個字節。

						*/\%v* */\%>v* */\%<v*
\%23v	匹配指定虛擬列。
\%<23v	匹配指定虛擬列之前。
\%>23v	匹配指定虛擬列之後。
	這三個匹配原可以用來匹配緩衝區或字符串中指定的虛擬列。如果不是在匹配窗
	口內的緩衝區，使用當前窗口的選項值 (如 'tabstop')。
	"23" 可以是任何列號。第一列為 1。
	注意 某些虛擬列位置永遠無法被匹配，因為它們在製表符或其它佔用超過一個
	屏幕位置的特殊字符的中間某處。{Vi 無此功能}
	警 告：當插入和刪除字符時 Vim 並不自動更新高亮的匹配。這意味著語法高亮
	很快就會有問題。
	例如，要高亮顯示所有位於虛擬第 72 列之後的字符: >
		/\%>72v.*
<	當設定 'hlsearch' 時，移動光標並作若干更改，你就能清楚地看到更新在何時
	進行。
	要匹配直到第 17 列的文本: >
		/.*\%17v
<	這裡包括第 17 列，因為那是 "\%17v" 匹配的地方，即使這是一個零寬度
	|/zero-width| 匹配。加上一個句號來匹配下一字符的效果完全一樣: >
		/.*\%17v.
<	下例同上，但如果第 17 列沒有字符也同樣匹配: >
		/.*\%<18v.
<

字符類: {Vi 無此功能}
\i	標識符字符 (見 'isident' 選項)			*/\i*
\I	同 "\i"，但不包括數字字符			*/\I*
\k	關鍵字字符 (見 'iskeyword' 選項)		*/\k*
\K	同 "\k"，但不包括數字字符			*/\K*
\f	文件名字符 (見 'isfname' 選項)			*/\f*
\F	同 "\f"，但不包括數字字符			*/\F*
\p	可顯示字符 (見 'isprint' 選項)			*/\p*
\P	同 "\p"，但不包括數字字符			*/\P*

備註: 上面這些適用於多字節字符，而下面只匹配 ASCII 字符，因為它們由範圍限定。

						*whitespace* *white-space*
\s	空白字符； <Space> 和 <Tab>			*/\s*
\S	非空白字符：\s 之反				*/\S*
\d	數位:				[0-9]		*/\d*
\D	非數位:				[^0-9]		*/\D*
\x	十六進制數位:			[0-9A-Fa-f]	*/\x*
\X	非十六進制數位:			[^0-9A-Fa-f]	*/\X*
\o	八進制數位:			[0-7]		*/\o*
\O	非八進制數位:			[^0-7]		*/\O*
\w	單詞字符:			[0-9A-Za-z_]	*/\w*
\W	非單詞字符:			[^0-9A-Za-z_]	*/\W*
\h	單詞首字符:			[A-Za-z_]	*/\h*
\H	非單詞首字符:			[^A-Za-z_]	*/\H*
\a	英文字母字符:			[A-Za-z]	*/\a*
\A	非英文字母字符:			[^A-Za-z]	*/\A*
\l	小寫字符:			[a-z]		*/\l*
\L	非小寫字符:			[^a-z]		*/\L*
\u	大寫字符:			[A-Z]		*/\u*
\U	非大寫字符			[^A-Z]		*/\U*

	備註: 使用匹配原比使用 [] 構造要快。

	備註: 字符類不使用 'ignorecase'，"\c" 和 "\C" 的設定。

		*/\_* *E63* */\_i* */\_I* */\_k* */\_K* */\_f* */\_F*
		*/\_p* */\_P* */\_s* */\_S* */\_d* */\_D* */\_x* */\_X*
		*/\_o* */\_O* */\_w* */\_W* */\_h* */\_H* */\_a* */\_A*
		*/\_l* */\_L* */\_u* */\_U*
\_x	其中 x 為上面列出的可用字符之一：結果為對應字符類加上行尾符
(字符類結束)

\e	匹配 <Esc>					*/\e*
\t	匹配 <Tab>					*/\t*
\r	匹配 <CR>					*/\r*
\b	匹配 <BS>					*/\b*
\n	匹配行尾符					*/\n*
	當對字符串而不是緩衝區進行匹配時，匹配一個按本義出現的換行字符。

~	匹配上次給出的替代字符串			*/~* */\~*

\(\)	一個由轉義的括號括起來的模式。			*/\(* */\(\)* */\)*
	例："\(^a\)" 匹配行首的 'a'。			*E51* *E54* *E55*

\1      匹配和第一個 \( 和 \) 之間的子表達式的匹配文本	*/\1* *E65*
	相同的字符串。 {Vi 無此功能}
	例如: "\([a-z]\).\1" 匹配 "ata"，"ehe"，"tot" 等。
\2      類似於 "\1"，但使用第二子表達式，		*/\2*
   ...							*/\3*
\9      類似於 "\1"，但使用第三子表達式。		*/\9*
	備註: 各組的標號是基於哪一個 "\(" 先出現 (自左至右)，而_非_哪一個先匹
	配。

\%(\)	一個由轉義的括號括起來的模式。			*/\%(\)* */\%(* *E53*
	類似 \(\)，但不算作一個子表達式。這樣做允許使用更多的群組，並且處理時
	會稍快些。
	{Vi 無此功能}

x	一個沒有特殊含義的單個字符，匹配其自身

							*/\* */\\*
\x	一個反斜槓帶一個沒有特殊含義的單個字符，保留作將來的擴展

[]	('nomagic' 的情形: \[])		*/[]* */\[]* */\_[]* */collection*
\_[]
	一個集合。一組由方括號括起來的字符。匹配集合中的任何一個字符。
	示例		匹配 ~
	[xyz]		'x'、'y' 或 'z' 之一
	[a-zA-Z]$	出現在行尾的字母字符
	\c[a-z]$	同上
								*/[\n]*
	如果在集合前加上 "\_" 的話，同時匹配行尾符，這等價於給集合加上 "\n"。
	即使該模式以 "^" 開始，也能匹配行尾符！因此 "\_[^ab]" 將匹配行尾符以及
	所有非 "a" 或 "b" 的字符。
	這使其與 Vi 兼容：沒有 "\_" 或 "\n" 時，集合不匹配行尾符。
								*E769*
	如果沒有 ']'，Vim 不會給出錯誤信息，而是假設不使用集合。可用於直接搜索
	'['。不過內部搜索會得到 E769。

	如果集合以 "^" 開始，它匹配所有_不在_集合內的字符："[^xyz]" 匹配任何不
	是 'x'、'y' 和 'z' 的字符。
	- 如果集合中的兩個字符以 '-' 隔開，表示它們之間的所有 ASCII 字符。例
	  如，"[0-9]" 匹配任何十進制數位。可以使用非 ASCII 字符，但字符值的距
	  離不能超過 256.
	- 字符類表達式被解釋為該字符類代表的字符集合。支持以下字符類：
			  名稱		內容 ~
*[:alnum:]*		  [:alnum:]     字母和數位
*[:alpha:]*		  [:alpha:]     字母
*[:blank:]*		  [:blank:]     空格和製表字符
*[:cntrl:]*		  [:cntrl:]     控制字符
*[:digit:]*		  [:digit:]     十進制數位
*[:graph:]*		  [:graph:]     可顯示字符，不包括空格
*[:lower:]*		  [:lower:]     小寫字母 (使用 'ignorecase' 時代表所有
					字母)
*[:print:]*		  [:print:]     可顯示字符，包括空格
*[:punct:]*		  [:punct:]     標點字符
*[:space:]*		  [:space:]     空白字符
*[:upper:]*		  [:upper:]     大寫字母 (使用 'ignorecase' 時代表所有
					字母)
*[:xdigit:]*		  [:xdigit:]    十六進制數位
*[:return:]*		  [:return:]	<CR> 字符 
*[:tab:]*		  [:tab:]	<Tab> 字符
*[:escape:]*		  [:escape:]	<Esc> 字符
*[:backspace:]*		  [:backspace:]	<BS> 字符
	  方括號括起的字符類表達式是對於方括號定界的集合的擴充。例如，下面的模
	  式是一個 UNIX 文件名: "[-./[:alnum:]_~]\+"。即至少有一個字符的字符列
	  表，其中字符可以是 '-'，'.'，'/'，字母，數位，'_' 或 '~' 中的一個。
	  這些項僅對 8 位字符有效。
							*/[[=* *[==]*
	- 等價類 (equivalence class)。匹配的字符和被比較的字符 "幾乎" 相同，但
	  重音的區別可以忽略，茲舉一例。形式是:
		[=a=]
	  目前只提供 latin1 的實現，也能用於 utf-8 和 latin9 的 latin1 字符。
							*/[[.* *[..]*
	- 排序規則元素 (collation element)。目前只能簡單地接受如下形式的單個字
	  符:
		[.a.]
							  */\]*
	- 要在集合之內包括字符 ']'，^'，'-' 或 '\'，只需在該字符前加上反斜槓：
	  "[xyz\]]"，"[\^xyz]"，"[xy\-z]" 和 "[xyz\\]"。
	  (備註: POSIX 不支持這種反斜槓的用法)。
	  對於 ']' 你也可以將其作為第一個字符 (但可能在 "^" 之後) 而無須轉義：
	  "[]xyz]" 或 "[^]xyz]"  {Vi 無此功能}。
	  對於 '-' 你也可以將其作為第一個或最後一個字符："[-xyz]"，"[^-xyz]"
	  或 "[xyz-]"。
	  對於 '\' 你也可以將其放置在除了 "^]-\bdertnoUux" 以外的任何一個字符
	  之前而無須轉義："[\xyz]" 匹配 '\'，'x'，'y' 及 'z'。但是用 "\\" 好
	  些，因為將來的擴展可能會在 '\' 之後使用其它字符。
	- 當 'cpoptions' 中不包括 'l' 標誌位時，以下轉義可用 {Vi 無此功能}：
		\e	<Esc>
		\t	<Tab>
		\r	<CR>	(_不是_行尾符！)
		\b	<BS>
		\n	換行符，見上 |/[\n]|
		\d123	字符的十進製表示
		\o40	字符的八進製表示，最大值為 0377
		\x20	字符的十六進製表示，最大值為 0xff
		\u20AC	多字節字符的十六進製表示，最大值為 0xffff
		\U1234	多字節字符的十六進製表示，最大值為 0xffffffff
	  備註: 其它曾在前面提到的反斜槓轉義碼 (譯者注: 如 \s、\d 等)
		在方括號 [] 之內是不起作用的！
	- 用集合來匹配可能會很慢。因為每個字符都要和集合中的每一個字符作比較。
	  盡可能使用上面提到的其它匹配原。例如：同樣是匹配一個數位，"\d" 要比
	  "[0-9]" 快的多。

						*/\%[]* *E69* *E70* *E369*
\%[]	一個可選匹配原的序列。它總能匹配，但試圖匹配盡量多的列出的匹配原，而在
	第一個不匹配的地方終止。例如： >
		/r\%[ead]
<	匹配 "r"，"re"，"rea" 或者 "read"。採用最長可能的匹配。下面例子可以用
	來匹配 Ex 命令 "function"，其中 "fu" 是必須的而 "nction" 是可選的: >
		/\<fu\%[nction]\>
<	這裡用到了單詞結尾匹配原 "\>" 來避免匹配 "full" 中的 "fu"。
	當要匹配的不是普通字符時，問題就變得更複雜了。你不一定會經常這樣，但可
	以這麼做。例如: >
		/\<r\%[[eo]ad]\>
<	匹配 "r"，"re"，"ro"，"rea"，"roa"，"read" 及 "road"。
	[] 裡不能有 \(\)、\%(\) 或 \z(\) 項，\%[] 也不能嵌套。
	要包含 "["，用 "[[]" 而 "]" 則可用 "[]]"，例如: >
		/index\%[[[]0[]]]
<	匹配 "index"、"index["、"index[0" 和 "index[0]"。
	{僅當編譯時加入 |+syntax| 特性才有效}

				*/\%d* */\%x* */\%o* */\%u* */\%U* *E678*

\%d123	匹配十進制指定的字符。後面必須跟著非數位。
\%o40	匹配八進制指定的字符，至多 0377。
	小於 040 的數必須後面跟著非八進制的數位或非數位。
\%x2a	匹配不超過兩位十六進制數位指定的字符。
\%u20AC	匹配不超過四位十六進制數位指定的字符。
\%U1234abcd	匹配不超過八位十六進制數位指定的字符。

==============================================================================
7. 忽略大小寫						*/ignorecase*

如果選項 'ignorecase' 打開的話，忽略正常字母的大小寫。設定 'smartcase' 會在模
式只包含小寫字母時才忽略大小寫。
							*/\c* */\C*
如果模式的任何位置出現了 "\c"，整個模式會像打開 'ignorecase' 一樣處理。真正的
'ignorecase' 和 'smartcase' 的值會被忽略。"\C" 的效果恰好相反: 強制對整個模式
匹配大小寫。
{僅 Vim 支持 \c 和 \C}
注意 'ignorecase'，"\c" 和 "\C" 對字符類無效。

例如:
	模式	'ignorecase'  'smartcase'	匹配 ~
	foo	  關		-		foo
	foo	  開		-		foo Foo FOO
	Foo	  開		關		foo Foo FOO
	Foo	  開		開		    Foo
	\cfoo	  -		-		foo Foo FOO
	foo\C	  -		-		foo

技術細節:						*NL-used-for-Nul*
文件中的 <Nul> 字符在內存中存儲為 <NL>。顯示為 "^@"。翻譯是在讀寫文件時完成
的。為了在查找模式中匹配 <Nul> 你可以使用 CTRL-@ 或 "CTRL-V 000"。這應該不出你
的所料。在內部，該字符被替換為 <NL>。不尋常的是鍵入 CTRL-V CTRL-J 同樣插入一個
<NL>，因此也搜索文件中的 <Nul>。{Vi 則完全不能處理文件中的 <Nul> 字符}

							*CR-used-for-NL*
當 'fileformat' 為 "mac" 時，<NL> 字符在內部儲存為 <CR>。在文本裡顯示為 "^J"。
除此以外，和 <NL> 作為 <Nul> 的用法類似。

在作表達式求值時，模式中的 <NL> 字符匹配字符串中的 <NL>。用 "\n" (反斜槓 n) 來
匹配 <NL> 在這裡是行不通的，它僅對緩衝區內的文本有效。

							*pattern-multi-byte*
模式匹配對於多字節字符同樣適用。大體上使用並無區別，不過要注意無效字節可能引起
的問題，一個包含無效字節的模式永遠不會得到匹配。

==============================================================================
8. 合成用字符						*patterns-composing*

							*/\Z*
如果模式的任何位置出現了 "\Z"，合成用字符將被忽略。這時，只比較基本字符，合成
用字符可以不同，其數量也可以不同。這一功能只在 'encoding' 為 'utf-8' 時有意
義。

如果一個合成用字符出現在模式的開始處或在不包含合成用字符的項目之後出現，它匹配
任何包含該合成用字符的字符。

句號和合成用字符聯用和合成用字符本身的效果相同，但是你不用擔心該字符前面出現的
是什麼項目。

合成用字符出現的順序是重要的，雖然對一個字符而言，其上多個合成用字符的順序調換
並不影響它的外觀。將來這一點可能會改變。

==============================================================================
9. 與 Perl 模式的比較					*perl-patterns*

Vim 中的正則表達式和 Perl 的在功能上來說非常相似。它們之間的區別基本上只是在表
示方法上。這裡給出一個它們之間的區別的總結:

功能				Vim 方言	Perl 方言 ~
----------------------------------------------------------------
強制不區分大小寫		\c		(?i)
強制區分大小寫			\C		(?-i)
不須被引用的群組		\%(atom\)	(?:atom)
保守的倍數描述			\{-n,m}		*?，+?，??，{}?
零寬度匹配			atom\@=		(?=atom)
零寬度否匹配			atom\@!		(?!atom)
零寬度反向匹配			atom\@<=	(?<=atom)
零寬度反向否匹配		atom\@<!	(?<!atom)
無重試匹配			atom\@>		(?>atom)

Vim 和 Perl 匹配一個字符串中的換行符時有所不同:

在 Perl 裡，^ 和 $ 缺省只匹配文本的開始和結尾。但是你也可以設定 'm' 標誌位來使
它們匹配內嵌的換行符。你還可以設定 's' 標誌位使句號 (.) 可以也用來匹配換行符。
(順便提一下，使用類似上面 i 標誌位的用法，可以在在模式內部改變這兩個標誌位。)

另一方面，Vim 中的 ^ 和 $ 永遠匹配內嵌的換行符。但另外有兩個匹配原： \%^ 和
\%$，可以分別用來匹配 (且只匹配) 文本的起始和結尾。對第二個問題，Vim 用 \_ "修
飾符" 來解決：把它放在一個句號或字符類之前，對應的模式就可以同時匹配換行字符。

最後，以下這些結構是 Perl 獨有的：
- 在正則表達式內執行任意代碼:  (?{perl 代碼})
- 條件表達式:  (?(條件)真值表達式|假值表達式)

... 而這些是 Vim 獨有的：
- 改變模式的 'magic' 屬性:  \v \V \m \M (對於避免反斜槓非常有用)
- 可選匹配原的序列:  \%[atoms]
- \& (\& 之於 \| 就像 "與" 之於 "或"；它強迫多個模式在同一個位置匹配)
- 通過行/列號匹配:  \%5l \%5c \%5v
- 設置匹配的開始和結束位置:  \zs \ze

==============================================================================
10. 高亮顯示匹配					*match-highlight*

							*:mat* *:match*
:mat[ch] {group} /{pattern}/
		定義一個在當前窗口高亮顯示的模式。它會以 {group} 高亮。例: >
			:highlight MyGroup ctermbg=green guibg=green
			:match MyGroup /TODO/
<		除了 // 以外，任何字符都可以用來標識一個 {pattern} 的開始和結
		束。要當心某些特殊的字符，例如 '"' 和 '|'。

		該命令執行時，{group} 必須已經定義。
		
		對於 'hlsearch' 要高亮的字符，仍然適用 {group} 高亮，因為匹配
		高亮的優先級比 'hlsearch' 要高。同樣的，語法高亮 (見 'syntax')
		也被匹配否決。

		注意 使用 'hlsearch' 高亮顯示最近使用的查找模式對所有窗口都有
		效，而以 ":match" 定義的模式僅僅對當前窗口生效。當切換至另一個
		緩衝區時，該設定被保留。

		'ignorecase' 不起作用。在模式中使用 |/\c| 來忽略大小寫，否則，
		大小寫總是區分的。
		
		'redrawtime' 定義搜索模式匹配的最大時間。

		匹配行尾而 Vim 只重繪部分顯示時，結果可能會令你意想不到。這是
		因為 Vim 在重繪開始的行上尋找匹配的緣故。

		另見 |matcharg()| 和 |getmatches()|。前者返回上次 |:match| 命
		令使用的高亮組和模式。後者返回 |matchadd()| 和 |:match| 兩者定
		義的所有高亮組和模式的列表。

		|:match| 定義的高亮匹配僅限於三個 (除了 |:match| 以外，還有
		|:2match| 和 |:3match|)。而 |matchadd()| 無此限制，而且還能排
		定匹配的優先級。

		另一個例子，高亮顯示虛擬第 72 列之後的所有文本: >
			:highlight rightMargin term=bold ctermfg=blue guifg=blue
			:match rightMargin /.\%>72v/
<		要高亮顯示所有位於虛擬第 7 列的文本: >
			:highlight col8 ctermbg=grey guibg=grey
			:match col8 /\%<8v.\%>7v/
<		注意 用兩個項目是為了匹配那些佔用了超過一個虛擬列的字符，例如
		TAB。

:mat[ch]
:mat[ch] none
		清除上次定義的匹配模式。


:2mat[ch] {group} /{pattern}/					*:2match*
:2mat[ch]
:2mat[ch] none
:3mat[ch] {group} /{pattern}/					*:3match*
:3mat[ch]
:3mat[ch] none
		和上面的 |:match| 完全類似，但設置不同的匹配。這樣，同時可以有
		三組激活的匹配。如果不同匹配在相同位置出現，最小編號的匹配優
		先。
		":3match" 命令用於 |matchparen| 插件。建議使用 ":match" 進行手
		動的搜索，而 ":2match" 用於其它的插件。


 vim:tw=78:ts=8:ft=help:norl:
