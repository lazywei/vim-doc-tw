*visual.txt*    For Vim version 7.3.  最後更新：2010年5月

		     VIM 用戶手冊 - Bram Moolenaar 著
		  (譯者： quhongjun http://vimcdoc.sf.net )


可視模式				*Visual* *Visual-mode* *visual-mode*

可視模式提供一種靈活易用的方法選擇一塊文本供操作符使用。它也是選擇一個文本列塊
的唯一方法。

關於本章的介紹包含在用戶手冊的 |04.4| 節中。

1. 使用可視模式				|visual-use|
2. 進入和退出可視模式			|visual-start|
3. 改變可視區域				|visual-change|
4. 操作可視區域				|visual-operators|
5. 列塊操作				|blockwise-operators|
6. 重複					|visual-repeat|
7. 示例					|visual-examples|
8. 選擇模式				|Select-mode|

{Vi 不包含可視模式。"可視模式" 這個名稱專指普通模式，以區別於 Ex 模式}
{僅當編譯時打開 |+visual| 特性才有效}

==============================================================================
1. 使用可視模式						*visual-use*

使用可視模式包含三個部分：
1. 用 "v"、"V" 或 CTRL-V 標記文本的開始。
   當前光標下的字符將被作為標記的起始點。
2. 把光標移到要標記的文本末尾。
   起始點和光標之間的文本 (包括當前光標下的字符) 將被高亮顯示。
3. 鍵入操作符命令。
   操作符命令將被應用到高亮顯示的字符。

'highlight' 選項用來設置可視模式下的高亮顯示方式。
'virtualedit' 選項用來設置是否允許光標停留在沒有字符的位置。

通常高亮顯示的文本包括當前光標下的字符。
然而，如果 'selection' 選項被設置為 "exclusive"，並且當前光標位於可視區域之
後，那麼光標下的字符將不被包括。

使用 "v" 命令，被高亮的文本將不包括起始點之前和結束點之後的字符。然而，所有的
大寫命令和非字母命令 ("~" 和 "U" 除外) 仍將作用在整行上。請參考下面的操作命令
列表。

							*visual-block*
使用 CTRL-V (列塊可視模式)，高亮區域是從開始點到光標之間的一個矩形區域。然而，
有些操作符仍將作用在整行上 (參見下面的列表)。修改 (c) 和替代 (s) 操作將刪除高
亮區域的文本，然後從左上角開始插入。

==============================================================================
2. 進入和退出可視模式					*visual-start*

						*v* *characterwise-visual*
v			進入可視模式，以字符為單位選擇。

						*V* *linewise-visual*
V			進入可視模式，以行為單位選擇。

						*CTRL-V* *blockwise-visual*
CTRL-V			進入列塊可視模式。備註: 在 Windows 環境中，CTRL-V 可能
			被映射為粘貼操作，所以可能無法用來進入列塊可視模式。參
			見 |CTRL-V-alternative|。

在可視模式下，按 <Esc>、點擊鼠標左鍵或鍵入任意一個跳轉到另外一個緩衝區的命令，
都會取消當前選擇區的高亮顯示，不影響任何文本。同時，在字符可視模式按 "v"、列塊
可視模式按 "CTRL-V" 以及行可視模式按 "V" 將起到同樣效果。按 CTRL-Z 鍵將終止可
視高亮顯示，然後掛起當前編輯器或者啟動新的 shell。|CTRL-Z|

當鍵入 "v"、"CTRL-V" 和 "V" 時的模式轉換:	*v_v* *v_CTRL-V* *v_V*
原有模式	     "v"	      "CTRL-V"		     "V"	~

普通		    可視	      列塊可視		   行可視
可視		    普通	      列塊可視		   行可視
列塊可視	    可視	        普通		   行可視
行可視		    可視	      列塊可視		    普通

						*gv* *v_gv* *reselect-Visual*
gv			啟動可視模式，重新選擇上一次的選擇區和相同模式。
			在可視模式下，該命令將交換當前和上一次選擇區。
			在可視模式下使用 "p" 或 "P" 後，本命令選擇被粘貼的文
			本。

							*<LeftMouse>*
<LeftMouse>		設置當前光標位置。如果處在可視模式，則退出可視模式。此
			功能只有在 'mouse' 選項包含 'n' 或 'a' 才可用。如果點
			擊位置與屏幕最後一行的距離在 'so' 選項設置的範圍之內，
			屏幕文本將會上滾。同樣，如果點擊位置與屏幕第一行的距離
			在 'so' 選項設置的範圍之內，屏幕文本將會下滾。

							*<RightMouse>*
<RightMouse>		如果當前不是可視模式，則進入可視模式。光標位置和鼠標點
			擊位置之間的文本將被高亮顯示。如果當前已經處於可視模
			式，文本高亮選擇區的起點或終點之一將被置為鼠標點擊的位
			置。起點或終點的選擇取決於誰離點擊位置更近。此功能只有
			在 'mouse' 選項包含 'n' 或 'a' 時才可用。

			備註: 當 'mousemodel' 被設為 "popup"，本操作將引發
			<S-LeftMouse> 動作，而不是 <RightMouse>。

							*<LeftRelease>*
<LeftRelease>		如果 <LeftRelease> 的位置與 <LeftMouse> 不同，那麼它的
			作用等同於 <LeftMouse>。在舊版本的 xterm 中，鼠標釋放
			之前是看不到所選擇的區域的，除非可以訪問 xterm 運行的
			顯示設置 (通過 DISPLAY 環境變量或 -display 參數)。此功
			能只有在 'mouse' 選項包含 'n' 或 'a' 時才可用。

如果可視模式沒有激活，同時 "v"、"V" 或 CTRL-V 命令之前包含一個計數 (count)，那
麼上一次選擇區的大小將被作為本次選擇操作的參考值。然後你可以移動選擇區的結束點
並對選擇區進行操作。選擇區類型與上次相同 (字符選擇，行選擇，或列塊選擇)。
- 行選擇模式: 行的數目與計數相乘。
- 列塊模式: 行和列的數目分別與計數相乘。
- 普通可視模式，選擇區在一行以內: 選擇區的字符數與計數相乘。
- 普通可視模式，選擇區包含多行: 行的數目與計數相乘，最後一行的字符數目與上一次
  選擇區相同。
文本的起始點在光標位置。如果上一次的命令中包含了 "$" 命令來擴展高亮文本，那麼
選擇區將擴展到最長行的最後一列。

如果你想選取和上一次完全一樣的選擇區，請使用 "gv" |gv| |v_gv| 命令。

							*v_<Esc>*
<Esc>			可視模式下: 停止可視模式。

							*v_CTRL-C*
CTRL-C			可視模式下: 停止可視模式。如果插入模式等待中 (模式信息
			顯示為 "-- (插入) 可視 --")，插入模式同時被停止。

==============================================================================
3. 改變可視區域						*visual-change*

							*v_o*
o			跳到高亮文本的另一端 (Other): 當前光標位置變成高亮文本
			的起點，光標移動到高亮文本的另一端。高亮區域保持不變。

							*v_O*
O			跳到高亮文本的另一端。同 "o" 命令相似，但是在列塊模式
			下，光標移動到水平方向的另一個角。如果這個角上的字符占
			據了多個屏幕位置 (例如一個 <Tab>)，那麼高亮的文本區域
			會被改變。

							*v_$*
如果 "$" 命令和列塊模式同時使用，那麼高亮文本區域的右邊界將取決於高亮區域中最
長的行。如果遇到一個不是直上直下的移動命令，那麼這個規則將終止。

有很多命令可以移動塊的結束點。但是不能使用 Ex 命令，以及其它可能改變或放棄文件
的命令。下面這些命令 (或者以它們開始的命令): "."、"&"、CTRL-^、"Z"、CTRL-]、
CTRL-T、CTRL-R、CTRL-I 和 CTRL-O 將會引起鈴聲，但可視模式保持不變。

當切換到同一緩衝區的另外一個窗口時，目標窗口中的光標位置會被調整，以使相同的可
視區域被選中。這一點特別適合在一個窗口查看可視區域的起點，而在另一個窗口查看它
的終點。這時候可以用鼠標右鍵 <RightMouse> (或者，當 'mousemodel' 選項置為
"popup" 時，用 <S-LeftMouse>) 來拖拽可視區域兩端之一。

==============================================================================
4. 操作可視區域						*visual-operators*

對可視區域可以使用的操作符包括:
	~	切換大小寫					|v_~|
	d	刪除						|v_d|
	c	修改 (4)					|v_c|
	y	抽出						|v_y|
	>	右移 (4)					|v_>|
	<	左移 (4)					|v_<|
	!	通過外部命令過濾 (1)				|v_!|
	=	通過 'equalprg' 選項的命令過濾 (1)		|v_=|
	gq	按照 'textwidth' 指定的寬度排版行 (1)		|v_gq|

可用的對象包括:
	aw	一個單詞 (包括空格)				|v_aw|
	iw	內含單詞					|v_iw|
	aW	一個字串 (包括空格)				|v_aW|
	iW	內含字串					|v_iW|
	as	一個句子 (包括空格)				|v_as|
	is	內含句子					|v_is|
	ap	一個段落 (包括空格)				|v_ap|
	ip	內含段落					|v_ip|
	ab	一個 () 塊 (包括小括號)				|v_ab|
	ib	內含 () 塊					|v_ib|
	aB	一個 {} 塊 (包括大括號)				|v_aB|
	iB	內含 {} 塊					|v_iB|
	at	一個 <tag> </tag> 塊 (包含 tag)			|v_at|
	it	內含 <tag> </tag> 塊				|v_it|
	a<	一個 <> 塊 (包括 <>)				|v_a<|
	i<	內含 <> 塊					|v_i<|
	a[	一個 [] 塊 (包括 [])				|v_a[|
	i[	內含 [] 塊					|v_i[|
	a"	一個雙引號字符串 (包括引號)			|v_aquote|
	i"	內含雙引號字符串				|v_iquote|
	a'	一個單引號字符串 (包括引號)			|v_a'|
	i'	內含單引號字符串				|v_i'|
	a`	一個反引號字符串 (包括反引號)			|v_a`|
	i`	內含反引號字符串				|v_i`|

其它可以使用的命令:
	:	為高亮的行啟動 Ex 命令				|v_:|
	r	修改 (4)					|v_r|
	s	修改						|v_s|
	C	修改 (2) (4)					|v_C|
	S	修改 (2)					|v_S|
	R	修改 (2)					|v_R|
	x	刪除						|v_x|
	D	刪除 (3)					|v_D|
	X	刪除 (2)					|v_X|
	Y	抽出 (2)					|v_Y|
	p	放置						|v_p|
	J	連接 (1)					|v_J|
	U	變成大寫					|v_U|
	u	變成小寫					|v_u|
	^]	查找標籤					|v_CTRL-]|
	I	列塊插入					|v_b_I|
	A	列塊添加					|v_b_A|

(1): 總是應用到整行，見 |:visual_example|。
(2): 如果不是使用 CTRL-V，應用到整行。
(3): 如果不是使用 CTRL-V，應用到整行。如果使用 CTRL-V，刪除到行尾。
(4): 如果使用 CTRL-V，只對列塊操作。

注意 ":vmap" 可以進行可視模式下的鍵盤映射。例如，如果你不想讓 "/" 命令擴展選擇
區，而是將高亮的文本作為關鍵字進行搜索，可以這樣映射: >
	:vmap / y/<C-R>"<CR>
(<> 記法要求逐字鍵入它的內容 |<>|，同時必須在 'cpoptions' 選項中移去 'B' 和
'<' 標誌位)

如果你想用 """ 命令指定一個寄存器，只須將寄存器命令加在操作符之前:
"v{move-around}"xd"

如果你想給命令加上計數，只須將數字加在操作符之前: "v{move-around}3>" (向右縮進
3 次)。

							*{move-around}*
{move-around} 是任何移動命令的組合。注意 它與 {motion} 的區別，後者只代表
_一個 _移動命令。

對可視區域的另一種操作方法是用模式中的 |/\%V| 項。例如，要在可視區域中把 '(' 
全部替代為 '#': >

	:%s/\%V(/X/g

==============================================================================
5. 列塊操作						*blockwise-operators*

{僅當編譯時加入 |+visualextra| 特性才有效}

提醒: 嘗試打開 'virtualedit' 選項，以便列塊選擇的起點和終點可以超越一行的結尾
或位於製表符的中間。

列塊插入							*v_b_I*
對一個列塊可視模式下的選擇區，I{string}<ESC> 命令將會從選擇區開始的位置在每一
行插入字符串 {string}。但是只有那些和選擇區有交集的行才會被插入，因此過短的行
將不受影響。如果選擇區包含製表符，製表符將會被分開，以維持選擇區的可視列不變。
見 |v_b_I_example|。

列塊添加							*v_b_A*
對一個列塊可視模式下的選擇區，A{string}<ESC> 命令將會從選擇區結束處開始在每一
行插入字符串 {string}。當行的長短不同的時候，將導致選擇區的右邊界不是直線，這
時候列塊添加操作的行為就會有所不同:
1. 如果列塊是用 <C-v>$ 命令產生的:
    這種情況下字符串被附加到每一行的結尾。
2. 如果列塊是用 <C-v>{move-around} 命令產生的:
    這種情況下字符串將被附加到每一行列塊的結尾。對於比較短的行，行尾和列塊結尾
    列之間將以空白填充。
見 |v_b_A_example|。
備註: 對於那些由於過短而沒有擴展到選擇區的行，"I" 和 "A" 的操作結果是不同的。
這樣的設計是有意的，以便你能夠選擇自己所希望的操作。

列塊修改 (c)							*v_b_c*
選擇區的所有文本將被相同的字符串代替。當使用 "c" 命令的時候選擇區的文本將被刪
除，然後進入插入模式。這時候你可以鍵入不帶回車的文本。當你按 <Esc> 的時候所鍵
入的文本將被插入選擇區的每一行。

列塊修改 (C)							*v_b_C*
同 "c" 命令，但是選擇區將擴展到每一行的結尾。

								*v_b_<*
列塊平移							*v_b_>*
列塊按照 'shiftwidth' 指定的單位移動。與塊的右邊界無關。塊的左邊界決定了從哪一
點開始右移，填充的空白根據 'ts' 和 'et' 設置的寬度最優化製表符的使用方式。而塊
的左邊界決定了左移的終止點。
見 |v_b_>_example|。
見 |v_b_<_example|。

列塊替換							*v_b_r*
高亮區域的每個字符被同一個字符代替。製表符將被分割，虛擬空白字符也將被替換，以
保持屏幕佈局。
見 |v_b_r_example|。


==============================================================================
6. 重複							*visual-repeat*

當重複一個可視模式操作時，該操作將被應用到與上次操作相同數量的文本上:
- 行可視模式: 相同數量的行。
- 列塊可視模式: 相同數量的行和列。
- 選擇區在一行之內的普通可視模式: 相同數量的字符。
- 跨越多行的普通可視模式: 相同數量的行，最後一行的字符數與上次相同。
重複操作的起始點在當前光標位置。如果重複的命令中包含 "$" 命令來擴展選擇區，那
麼重複操作將應用到最長行的最右一列。


==============================================================================
7. 示例							*visual-examples*

							*:visual_example*
目前 ":" 命令只能作用在一整行。當你選擇某一行的一部分，執行一個類似 ":!date"
的命令，命令輸出將替換當前行的全部。如果你只想讓它替換行的一部分，則必須做一個
映射。在將來的版本中，":" 可能可以作用於行的一部分。

下面這個示例能夠用 "date" 命令的輸出替換所選擇的文本: >
	:vmap _a <Esc>`>a<CR><Esc>`<i<CR><Esc>!!date<CR>kJJ

(<> 記法要求逐字鍵入它的內容 |<>|，同時必須在 'cpoptions' 選項中移去 'B' 和
'<' 標誌位)

它所做的是:
<Esc>		停止可視模式
`>		移動到可視區域的結尾
a<CR><Esc>	在可視區域的結尾斷行
`<		跳到可視區域的開始
i<CR><Esc>	在可視區域的起點斷行
!!date<CR>	通過 date 命令過濾可視文本
kJJ		把行重新連接起來

							*visual-search*
下面這個鍵盤映射能夠將當前的選擇區作為關鍵字進行搜索: >
	:vmap X y/<C-R>"<CR>

(<> 記法要求逐字鍵入它的內容 |<>|，同時必須在 'cpoptions' 選項中移去 'B' 和
'<' 標誌位)

注意 某些特殊字符 (例如 '.' 和 '*') 可能會引起問題。

列塊可視模式示例					*blockwise-examples*
在下面的示例中，我將說明列塊操作命令以及命令所執行的結果。在所有的示例中，光標
起始點位於測試文本第一行的 'a' 字符上。
假定使用模式行的設置為: ":ts=8:sw=4:"。

另外，進行這樣的設置將有助於顯示操作細節:
:set hls
/<TAB>
這裡的 <TAB> 是一個真正的 TAB (即按下 Tab 鍵)。

測試文本是:

abcdefghijklmnopqrstuvwxyz
abc		defghijklmnopqrstuvwxyz
abcdef  ghi		jklmnopqrstuvwxyz
abcdefghijklmnopqrstuvwxyz

1. fo<C-v>3jISTRING<ESC>					*v_b_I_example*

abcdefghijklmnSTRINGopqrstuvwxyz
abc	      STRING  defghijklmnopqrstuvwxyz
abcdef  ghi   STRING	jklmnopqrstuvwxyz
abcdefghijklmnSTRINGopqrstuvwxyz

2. fo<C-v>3j$ASTRING<ESC>					*v_b_A_example*

abcdefghijklmnopqrstuvwxyzSTRING
abc		defghijklmnopqrstuvwxyzSTRING
abcdef  ghi		jklmnopqrstuvwxyzSTRING
abcdefghijklmnopqrstuvwxyzSTRING

3. fo<C-v>3j3l<..						*v_b_<_example*

abcdefghijklmnopqrstuvwxyz
abc	      defghijklmnopqrstuvwxyz
abcdef  ghi   jklmnopqrstuvwxyz
abcdefghijklmnopqrstuvwxyz

4. fo<C-v>3j>..							*v_b_>_example*

abcdefghijklmn		  opqrstuvwxyz
abc			    defghijklmnopqrstuvwxyz
abcdef  ghi			    jklmnopqrstuvwxyz
abcdefghijklmn		  opqrstuvwxyz

5. fo<C-v>5l3jrX						*v_b_r_example*

abcdefghijklmnXXXXXXuvwxyz
abc	      XXXXXXhijklmnopqrstuvwxyz
abcdef  ghi   XXXXXX    jklmnopqrstuvwxyz
abcdefghijklmnXXXXXXuvwxyz

==============================================================================
8. 選擇模式						*Select* *Select-mode*

選擇模式看起來與可視模式非常相似，但是在選擇模式所接受的命令與可視模式有很大不
同。它類似於 Microsoft Windows 上的選擇模式。如果 'showmode' 選項打開，處於選
擇模式的時候在屏幕底端會顯示 "-- 選擇 --"。

進入選擇模式的幾種方法:
- 使用鼠標選擇一片區域，同時 'selectmode' 選項包含 "mouse"。'mouse' 必須包含對
  應當前模式的標誌位。
- 在按下 Shift 鍵的同時，鍵入不可顯示的光標移動命令，同時 'selectmode' 選項包
  含 "key"。例如: <S-Left> 和 <S-End>。'keymodel' 選項也必須包含 "startsel"。
- 鍵入 "v"、"V" 或 CTRL-V 命令，同時 'selectmode' 選項包含 "cmd"。
- 在普通模式鍵入 "gh"、"gH" 或 "g_CTRL-H" 命令。
- 在可視模式，鍵入 CTRL-G。				*v_CTRL-G*

選擇模式的命令:
- 所有可顯示字符、<NL> 和 <CR> 將刪除當前的選擇區，然後進入插入模式。插入鍵入
  的字符。
- 鍵入不可顯示移動命令的同時，按下 Shift 鍵，將擴展當前的選擇區。
  'keymodel' 選項必須包含 "startsel"。
- 鍵入不可顯示移動命令的同時，_沒有_按下 Shift 鍵，將退出選擇模式。
  'keymodel' 選項必須包含 "stopsel"。
- 按 ESC 鍵退出選擇模式。
- CTRL-O 臨時切換到可視模式執行一個命令。		*v_CTRL-O*
- CTRL-G 切換到可視模式。

除此之外，所有鍵入字符的處理方式與可視模式相同。

如果選擇模式是按行選擇，那麼在選擇模式使用操作符時，所選中的行將被作為操作對
象，但是作用的方式與按字符選擇相同。舉例來說：如果刪除了一整行，之後它可以被粘
貼到另一行的中間。


選擇模式中的鍵盤映射和菜單				*Select-mode-mapping*

|:vmap| 或 |:vmenu| 命令定義的映射和菜單可以同時用於可視模式和選擇模式。如果用
於選擇模式，Vim 自動切換到可視模式，以便執行與可視模式相同的操作。如果你不希望
這樣，可以使用 |:xmap| 或者 |:smap|。

用戶一般期待可顯示字符會替代選擇區域。所以，要避免選擇模式下映射可顯示字符。也
可以在 |:map| 和 |:vmap| 之後用 |:sunmap| 來撤銷選擇模式下的映射。

當鍵盤映射或菜單命令執行完畢，Vim 回到選擇模式，選擇區被重新激活。除非選擇區域
被刪除，切換到另外一個緩衝區，或者窗口佈局被改變。

當鍵入一個字符，將引起當前選擇區被刪除從而進入插入模式。插入模式的鍵盤映射將應
用到這個剛剛鍵入的字符。這可能會引起一些混淆，因為它意味著在選擇模式輸入的字符
使用了插入模式的映射。語言的映射與此相同。

							*gV* *v_gV*
gV			當一個選擇模式的鍵盤映射或菜單命令被執行完畢後，不再自
			動選擇可視區域。把 gV 放在鍵盤映射或菜單命令的結尾即
			可。或者至少應該在任何對選擇區操作的命令之後。

							*gh*
gh			啟動字符方式的選擇模式。同 "v" 命令類似，但是啟動的是
			選擇模式，而不是可視模式。
			助記: "get highlighted"。

							*gH*
gH			啟動按行選擇的選擇模式。同 "V" 命令類似，但是啟動的是
			選擇模式，而不是可視模式。
			助記: "get Highlighted"。

							*g_CTRL-H*
g CTRL-H		啟動列塊方式的選擇模式。同 CTRL-V 命令類似，但是啟動的
			是選擇模式，而不是可視模式。
			助記: "get Highlighted"。

 vim:tw=78:ts=8:ft=help:norl:
