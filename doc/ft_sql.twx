*ft_sql.txt*	For Vim version 7.3.  最近更新: 2010年7月

				作者: David Fishburn
				譯者: Willis
				http://vimcdoc.sf.net

這裡介紹用於 SQL 文件的文件類型插件。

結構化查詢語言 (Structured Query Language，SQL) 是規範支持用戶和關係型數據庫進
行交互的語句的標準。Vim 包含了 SQL 導航、縮進和語法高亮的功能。

1. 導航						|sql-navigation|
    1.1 matchit					|sql-matchit|
    1.2 文本對像動作				|sql-object-motions|
    1.3 預定義對像動作				|sql-predefined-objects|
    1.4 宏					|sql-macros|
2. SQL 方言					|sql-dialects|
    2.1 SQLSetType				|SQLSetType|
    2.2 SQLGetType				|SQLGetType|
    2.3 SQL 方言缺省值				|sql-type-default|
3. 增加新的 SQL 方言				|sql-adding-dialects|
4. 全能 SQL 補全				|sql-completion|
    4.1 靜態模式				|sql-completion-static|
    4.2 動態模式				|sql-completion-dynamic|
    4.3 教程					|sql-completion-tutorial|
	4.3.1 補全表				|sql-completion-tables|
	4.3.2 補全列				|sql-completion-columns|
	4.3.3 補全過程				|sql-completion-procedures|
	4.3.4 補全視圖				|sql-completion-views|
    4.4 定制補全				|sql-completion-customization|
    4.5 SQL 映射				|sql-completion-maps|
    4.6 使用其它文件類型			|sql-completion-filetypes|

==============================================================================
1. 導航						*sql-navigation*

SQL 文件類型為文件導航提供了一些選項。


1.1 matchit					*sql-matchit*
-----------
matchit 插件 (http://www.vim.org/scripts/script.php?script_id=39) 提供許多附加
功能，並且可以為不同語言定制。matchit 插件通過定義緩衝區局部變量 b:match_words
來進行配置。在若干關鍵字上按 % 鍵會把光標移動到匹配文本處。例如，如果光標在
"if" 上，按 % 會在 "else"、"elseif" 和 "end if" 關鍵字之間循環。

支持以下關鍵字: >
    if
    elseif | elsif
    else [if]
    end if

    [while 條件] loop
	leave
	break
	continue
	exit
    end loop

    for
	leave
	break
	continue
	exit
    end loop

    do
	語句
    doend

    case
    when
    when
    default
    end case

    merge
    when not matched
    when matched

    create[ 或 replace] procedure|function|event
    returns


1.2 文本對像動作				*sql-object-motions*
-----------------------
Vim 預定義了若干處理文本對像動作 |object-motions|的鍵。本文件插件試圖把這些鍵
翻譯成對 SQL 語言有意義的映射。

存在以下的普通模式 |Normal| 和可視模式 |Visual| 映射 (編輯 SQL 文件時): >
    ]]		    正向移動到下一個 'begin'
    [[		    反向移動到前一個 'begin'
    ][		    正向移動到下一個 'end'
    []		    反向移動到前一個 'end'


1.3 預定義對像動作				*sql-predefined-objects*
-----------------------------
多數關係型數據庫支持若干標準特性、表、索引、觸發器和存儲過程。每個供應商也有一
些私有的對象。以下一組映射的建立是為了方便在這些對像間移動。取決你使用的數據庫
供應商，應該可以調整可用的對象。本文件插件試圖定義許多標準和附加的對象。為了盡
可能靈活，|vimrc| 裡可以這樣改寫可用的對象列表: >
    let g:ftplugin_sql_objects = 'function,procedure,event,table,trigger' .
		\ ',schema,service,publication,database,datatype,domain' .
		\ ',index,subscription,synchronization,view,variable'
		
存在使用上述列表的下述普通模式 |Normal| 和可視模式 |Visual| 映射: >
    ]}		    正向移動到下一個 'create <對像名>'
    [{		    反向移動到前一個 'create <對像名>'

重複按 ]} 會在每個 create 語句之間循環: >
    create table t1 (
	...
    );

    create procedure p1
    begin
	...
    end;

    create index i1 on t1 (c1);

缺省的 g:ftplugin_sql_objects 設置是: >
    let g:ftplugin_sql_objects = 'function,procedure,event,' .
		\ '\\(existing\\\\|global\\s\\+temporary\\s\\+\\)\\\{,1}' .
		\ 'table,trigger' .
		\ ',schema,service,publication,database,datatype,domain' .
		\ ',index,subscription,synchronization,view,variable'

該設置同時能處理以下情形: >
    create table t1 (
	...
    );
    create existing table t2 (
	...
    );
    create global temporary table t3 (
	...
    );

缺省，文件類型插件只尋找 CREATE 語句。在 |vimrc| 裡你可以改寫下行為: >
    let g:ftplugin_sql_statements = 'create,alter'

文件類型插件定義了三種註釋類型: >
    1.	--
    2.	//
    3.	/*
	 *
	 */

存在用於註釋的下述普通模式 |Normal| 和可視模式 |Visual| 映射: >
    ]"		    正向移動到註釋開始處
    ["		    反向移動到註釋結束處



1.4 宏						*sql-macros*
----------
支持 Vim 尋找宏定義的特性 |'define'|。使用以下正規表達式: >
    \c\<\(VARIABLE\|DECLARE\|IN\|OUT\|INOUT\)\>

該設置可以處理下面的代碼: >
    CREATE VARIABLE myVar1 INTEGER;

    CREATE PROCEDURE sp_test(
	IN myVar2 INTEGER,
	OUT myVar3 CHAR(30),
	INOUT myVar4 NUMERIC(20,0)
    )
    BEGIN
	DECLARE myVar5 INTEGER;

	SELECT c1, c2, c3
	  INTO myVar2, myVar3, myVar4
	  FROM T1
	 WHERE c4 = myVar1;
    END;

把光標放在下面這行的 "myVar1" 上: >
	 WHERE c4 = myVar1;
		     ^

按下面的任何一個鍵: >
    [d
    [D
    [CTRL-D


==============================================================================
2. SQL 方言					*sql-dialects* *sql-types*
						*sybase* *TSQL* *Transact-SQL*
						*sqlanywhere*
						*oracle* *plsql* *sqlj*
						*sqlserver*
						*mysql* *postgresql* *psql*
						*informix*

所有關係型數據庫都支持 SQL。各供應商之間通用 SQL 的一個語言子集 (例如，CREATE
TABLE、CREATE INDEX)，但供應商自己對 SQL 有相當多的擴展。Oracle 支持 "CREATE
OR REPLACE" 語法，CREATE TABLE 語句也可以指定列缺省值，還有過程語言 (用於存儲
過程和激發器)。

Vim 發佈提供的語法高亮缺省基於 Oracle 的 PL/SQL。SQL 縮進腳本缺省支持 Oracle
和 SQL Anywhere。文件類型插件缺省支持所有供應商並保持供應商中立，但可以進行擴
展。

Vim 支持許多不同的供應商，目前這是通過語法腳本完成的。不幸的是，如果你要切換語
法規則，必須建立以下之一:
    1.	新文件類型
    2.	定制的自動命令
    3.	手動步驟 / 命令

大多數用戶只使用一個供應商的數據庫產品，因此最好能在 |vimrc| 裡指定缺省值。


2.1 SQLSetType					*sqlsettype* *SQLSetType*
--------------
對於使用多個不同的數據庫的用戶，最好隨時為每個緩衝區都可以切換不同的供應商規則
(縮進、語法)。ftplugin/sql.vim 文件定義以下函數: >
    SQLSetType
<
如果不帶任何參數，此函數設置縮進和語法腳本回缺省值，見 |sql-type-default|。
如果關閉 Vi 兼容模式 |'compatible'|，<Tab> 鍵可以補全可選參數。

輸入函數名和空格，然後用補全就可以提供參數。該函數接受的參數是待執行的 Vim 腳
本名。因此，利用 |cmdline-completion| 特性，它在 |'runtimepath'| 裡查找所有名
字包含 'sql' 的腳本。
此過程需要對名字的拼寫進行猜測。下面是一些例子: >
    :SQLSetType
    :SQLSetType sqloracle
    :SQLSetType sqlanywhere
    :SQLSetType sqlinformix
    :SQLSetType mysql

最容易的方法是用 <Tab> 字符，先用第一個 <Tab> 補全命令名 (SQLSetType)，在空格
和另一個 <Tab> 之後，顯示可用的 Vim 腳本名的列表: >
    :SQL<Tab><space><Tab>


2.2 SQLGetType					*sqlgettype* *SQLGetType*
--------------
你隨時可以用 SQLGetType 命令得到正在使用的 SQL 方言。ftplugin/sql.vim 定義此函
數: >
    SQLGetType

會顯示: >
    Current SQL dialect in use:sqlanywhere


2.3 SQL 方言缺省值				*sql-type-default*
-----------------------
前面已經提到，Vim 語法規則缺省基於 Oracle (PL/SQL)。你可以在 |vimrc| 裡加上以
下各行之一，對此進行修改: >
    let g:sql_type_default = 'sqlanywhere'
    let g:sql_type_default = 'sqlinformix'
    let g:sql_type_default = 'mysql'

如果你在 |vimrc| 裡加入: >
    let g:sql_type_default = 'sqlinformix'

下次編輯 SQL 文件時，Vim 會自動載入以下的腳本: >
    ftplugin/sql.vim
    syntax/sqlinformix.vim
    indent/sql.vim
<
注意沒有載入 indent/sqlinformix.sql，這時因為沒有 Informix 專用的縮進文件。如
果指定文件不存在，Vim 會載入缺省文件。


==============================================================================
3. 增加新的 SQL 方言				*sql-adding-dialects*

如果使用 Vim 缺省發佈還沒有提供定製版本的 SQL 方言，查看 http://www.vim.org，
瞭解現在是否已經有你需要的定製版本。如果還沒有，你可以從複製一個現有的腳本開始
做起。閱讀 |filetype-plugins| 瞭解詳情。

為了幫助識別這些腳本，建立文件時應使用 "sql" 前綴。例如，如果你決定建立 SQLite
數據庫的定製版本，可以從下表中挑選要建立的文件: >
    Unix
	~/.vim/syntax/sqlite.vim
	~/.vim/indent/sqlite.vim
    Windows
	$VIM/vimfiles/syntax/sqlite.vim
	$VIM/vimfiles/indent/sqlite.vim

不需要修改 SQLSetType 函數。在你使用 SQLSetType 命令時，它會自動挑選新的 SQL
文件並載入它們。


==============================================================================
4. 全能 SQL 補全				*sql-completion*
						*omni-sql-completion*

Vim 7 包含了代碼補全的接口和函數以允許插件開發者為任何語言提供代碼補全。Vim 7
已經包含了 SQL 語言代碼補全。

SQL 補全插件有兩種方式，靜態和動態。靜態模式從當前語法高亮規則裡提取數據來構造
彈出菜單，而動態模式直接從數據庫提取數據來構造彈出菜單。這包括所有的表和列、過
程名和更多對象。

4.1 靜態模式					*sql-completion-static*
---------------
編輯文件類型為 SQL 的文件時，靜態彈出菜單包含激活的語法規則裡定義的項目。插件
缺省定義了一些映射以幫助用戶重新定義要顯示的項目清單。
缺省的靜態映射是: >
    imap <buffer> <C-C>a <C-\><C-O>:call sqlcomplete#Map('syntax')<CR><C-X><C-O>
    imap <buffer> <C-C>k <C-\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>
    imap <buffer> <C-C>f <C-\><C-O>:call sqlcomplete#Map('sqlFunction')<CR><C-X><C-O>
    imap <buffer> <C-C>o <C-\><C-O>:call sqlcomplete#Map('sqlOption')<CR><C-X><C-O>
    imap <buffer> <C-C>T <C-\><C-O>:call sqlcomplete#Map('sqlType')<CR><C-X><C-O>
    imap <buffer> <C-C>s <C-\><C-O>:call sqlcomplete#Map('sqlStatement')<CR><C-X><C-O>

"<C-C>" 也可以由用戶在 .vimrc 裡自定義，因為不是在所有平台下它都可用: >
    let g:ftplugin_sql_omni_key = '<C-C>'
>
靜態映射 (基於語法高亮組) 都符合以下格式: >
    imap <buffer> <C-C>k <C-\><C-O>:call sqlcomplete#Map('sqlKeyword')<CR><C-X><C-O>

讓我們把這行命令拆開來解釋一下: >
    imap		   - 建立插入模式映射
    <buffer>		   - 只用於此緩衝區
    <C-C>k		   - 你選擇的要映射的鍵
    <C-\><C-O>		   - 執行單個命令，然後回到插入模式
    :call sqlcomplete#Map( - 允許 SQL 補全插件執行一些例行函數，使之可以和其他
			     補全插件一起使用。
			     指示你想要 SQL 補全插件補全哪個項目。
			     該例中我們要求插件顯示語法高亮組 'sqlKeyword' 的
			     項目。
			     編輯 SQL 文件時，執行下面命令可以查看高亮組名清單
			     以供選擇
				 :syntax list
    'sqlKeyword'	   - 我們要求顯示 sqlKeyword 高亮組的項目
    )<CR>		   - 執行 :let 命令
    <C-X><C-O>		   - 激活全能補全的標準鍵擊。傳遞 'sqlKeyword' 參數指
			     定 SQL 補全插件用 sqlKeyword 高亮組的項目來構造彈
			     出菜單。該插件同時緩存結果直到 Vim 重啟為止。它用
			     syntaxcomplete 插件來提取 syntax 列表。

使用 'syntax' 關鍵字是個特例。它使用 syntaxcomplete 插件來提取所有的語法項目。
這樣可以有效使用所有 Vim SQL 語法文件。此文檔編寫時，這裡包含了不同 SQL 方言的
10 種語法文件 (見上第 3 節，|sql-dialects|)。

這裡是從語法文件提取的可用項目的例子: >
     All
	 - 包含所有語法高亮組的內容
     Statement
	 - Select、Insert、Update、Delete、Create、Alter、...
     Function
	 - Min、Max、Trim、Round、Date、...
     Keyword
	 - Index、Database、Having、Group、With
     Option
	 - Isolation_level、On_error、Qualify_owners、Fire_triggers、...
     Type
	 - Integer、Char、Varchar、Date、DateTime、Timestamp、...


4.2 動態模式					*sql-completion-dynamic*
----------------
動態模式直接從數據庫提取數據來構造彈出菜單。為了打開動態功能，你需要安裝
dbext.vim 插件。(http://vim.sourceforge.net/script.php?script_id=356)。

SQL 補全插件的若干特性使用動態模式。安裝完 dbext 插件後，參閱 dbext-tutorial
教程來瞭解附加的配置和使用說明。dbext 插件允許 SQL 補全插件顯示表、過程、視圖
和列的清單。 >
     表清單
	 - 所有模式 (schema) 擁有者的所有表
     過程清單
	 - 所有模式擁有者的所有存儲過程
     視圖清單
	 - 所有模式擁有者的所有視圖
     列清單
	 - 選擇的表包含的所有列

要在插入模式下打開彈出菜單，可以分別為每組使用下面的鍵組合 (其中 <C-C> 意味著
按住 CTRL 鍵的同時按住 C):
     表清單		   - <C-C>t
			   - <C-X><C-O> (缺省映射假定使用表)
     存儲過程清單	   - <C-C>p
     視圖清單		   - <C-C>v
     列清單		   - <C-C>c

     鑽進 / 鑽出           - 查看顯示表清單的彈出窗口時，<Right> 可將當前高亮
			     的表替代為該表的列清單。
			   - 查看顯示列清單的彈出窗口時，<Left> 可將列清單替代
			     為表清單。
			   - 這樣你可以快速鑽進表裡查看包含的列然後快速回來。
			   - <Right> 和 <Left> 可在 |.vimrc| 中指定: >
                                let g:ftplugin_sql_omni_key_right = '<Right>'
                                let g:ftplugin_sql_omni_key_left  = '<Left>'

SQL 補全插件緩存若干彈出窗口的顯示清單。這樣，重新顯示這些清單的速度就會大大加
快。如果數據庫加入了新表或新列，插件緩存需要清空。此功能的缺省映射是: >
    imap <buffer> <C-C>R <C-\><C-O>:call sqlcomplete#Map('ResetCache')<CR><C-X><C-O>


4.3 SQL 教程					*sql-completion-tutorial*
----------------

本教程的目的是為了帶你瞭解 SQL 補全插件的常用功能，以便: >
     a) 你能熟悉插件的使用
     b) 你能得到一些常用功能的介紹
     c) 說明如何定制你的特定偏好
     d) 展示插件 "最好用" 的方法 (最容易的配置方法)。

首先，建立新緩衝區: >
     :e tutorial.sql


靜態特性
---------------
要得到各種清單，只要進入插入模式，輸入:
    <C-C>s   (顯示 SQL 語句)
這時你可以往下翻頁查看清單，直到看到 "select" 為止。如果你知道要找什麼項目，比
如你知道該語句以字母 "s" 開頭，可以先預輸入 (不輸入引號) "se" 然後按:
    <C-Space>t
假定彈出清單裡高亮了 "select"，按 <Enter> 選擇該項目。現在輸入:
    * fr<C-C>a (顯示所有語法項目)
然後選擇彈出清單裡的 "from"。

編寫存儲過程時可用 "type" 清單。它包含數據庫支持類型的清單。這取決於你使用的語
法文件，因此可能是也可能不是完全準確。SQL Anywhere 語法文件 (sqlanywhere.vim)
包含此支持: >
     BEGIN
	DECLARE customer_id <C-C>T <-- 從清單裡選擇一個類型


動態特性
----------------
要利用動態特性，先安裝 (http://vim.sourceforge.net/script.php?script_id=356)
dbext.vim 插件。它也帶有自己的教程。從 SQL 補全插件的角度而言，dbext 提供的主
要特性是連接到數據庫。dbext 的連接設置文件是定義連接信息的最有效的方法。一旦建
立好連接，SQL 補全插件在後台使用 dbext 的功能來為彈出菜單填充數據。

下面假設 dbext.vim 已經經過正確配置。簡單的測試方法是運行命令 :DBListTable。如
果顯示了表清單，那麼 dbext.vim 工作正常。如果不行，查詢 dbext.txt 文檔。

假定你照著 dbext-tutorial 教程來做，可以按 <C-C>t 來顯示表清單。這時會有一些延
遲，因為 dbext 正在建立表清單。顯示清單後按 <C-W> 會同時刪除彈出菜單和清單激活
時已經選中的表名。 >

 4.3.1 補全表:					*sql-completion-tables*

按 <C-C>t 顯示通過 dbext 插件連接的數據庫裡的表清單。
注意: 所有 SQL 補全彈出菜單都支持在按鍵映射之前輸入前綴。這時，彈出菜單只包含
該前綴開始的項目。 >

 4.3.2 補全列:					*sql-completion-columns*

SQL 補全插件也能顯示特定表的列清單。<C-C>c 激活列補全。

注意: 下面的例子在彈出菜單激活時用 <Right> 來激活列清單。

使用列補全的示例:
     - 再按一次 <C-C>t 顯示表清單。
     - 補全窗口顯示清單時，按 <Right>，表清單會被替換為高亮表包含的列清單 (在
       同樣短暫的延遲後)。
     - 按下 <Left>，列清單又被替換為表清單。這樣，你就可以來回快速進出各種表和
       列清單。
     - 高亮同一個表時，如果又按 <Right>，你會注意到不再有延遲，這是因為列清單
       已經進行了緩存。如果改變了已經緩存的表的模式 (schema)， <C-C>R 命令可以
       清除 SQL 補全緩存。
     - 注意: <Right> 和 <Left> 設計在補全窗口激活時工作。如果沒有激活補全窗
       口，執行普通的 <Right> 或 <Left>。

讓我們看看如何動態構造 SQL 語句。select 語句需要一個列清單。SQL 補全插件有兩個
方法構造列清單。 >
    一次一列:
<	1. 輸入 SELECT 後，按 <C-C>t 顯示表清單。
	2. 從清單裡選擇一個表。
	3. 按 <Right> 顯示列清單。
	4. 從清單裡選擇列並按回車。
	5. 輸入 "," 並按 <C-C>c。一般，生成列清單需要光標在表名上。插件使用該
	   名字來決定從哪個表提取列清單。在這一步，因為我們按 <C-C>c 時光標不
	   在表名上，顯示前一次使用的表的列清單。選擇另一列，然後繼續。
	6. 根據需要，反覆進行第 5 步。 >
    特定表的所有列:
<	1. 輸入 SELECT 後，按 <C-C>t 顯示表清單。
	2. 高亮你需要所有列清單的表。
	3. 按 <Enter> 從清單裡選擇該表。
	4. 按 <C-C>l 來請求該表以逗號分隔的所有列的清單。
	5. 基於第三步選擇的表名，插件試圖決定合適的表別名。你會得到提示，接受
	   或者修改該別名。然後按 OK。
	6. 表名被該表用逗號分隔的列清單替換，每列前面都會加上表的別名。
	7. 步驟 3 和 4 可以被 <C-C>L 替換，它在映射裡內嵌了 <C-Y> 以選擇清單裡
	   當前正在高亮的表。

編寫 select 語句時進行了一項特殊的準備工作。考慮下列語句: >
     select *
       from customer c,
	    contact cn,
	    department as dp,
	    employee e,
	    site_options so
      where c.

"c" 是 "customer" 表的別名。在插入模式下輸入最後一個 "c." 之後，按 <C-C>c 或
<C-X><C-O> 會因此彈出 customer 表的列清單。因為插件會往回查找到 select 語句開
始處並從那裡開始尋找 FROM 字句定義的表清單。該例中它發現了字符串 "customer c"
並因此知道 "c" 是 customer 表的別名。這裡也支持可選的 "AS" 關鍵字， "customer
AS c"。 >


 4.3.3 補全過程:				*sql-completion-procedures*

和表清單類似，<C-C>p 顯示數據庫裡保存的存儲過程的清單。 >

 4.3.4 補全視圖:				*sql-completion-views*

和表清單類似，<C-C>v 顯示數據庫裡視圖的清單。


4.4 定制補全					*sql-completion-customization*
----------------------------

在 |vimrc| 裡，可以用若干選項定制 SQL 補全插件: >
    omni_sql_no_default_maps (無缺省映射)
<	- 缺省: 沒有定義
	- 如果定義此變量，不建立全能補全的映射。詳見 |sql-completion-maps|。
>
    omni_sql_use_tbl_alias (使用表別名)
<	- 缺省: a
	- 只有生成逗號分隔的列清單時才使用此設置。缺省映射為 <C-C>l。生成列清
	  單時，每列前面都加上一個別名，例如:  e.emp_id, c.emp_name。此選項有
	  三種設置: >
		n - 不使用別名
		d - 使用缺省的 (經過計算的) 別名
		a - 要求確認別名
<
	  以下一些規則決定別名:
	       1.  如果表名包含 '_'，用它作為分隔符: >
		   MY_TABLE_NAME --> MTN
		   my_table_name --> mtn
		   My_table_NAME --> MtN
<	       2.  如果表名_不_包含 '_'，但_包含_混合大小寫，使用大小寫作為分
		   隔符: >
		   MyTableName --> MTN
<	       3.  如果表名_不_包含 '_' 而且也_不_包含混合大小寫，使用表的第一
		   個字母: >
		   mytablename --> m
		   MYTABLENAME --> M

    omni_sql_ignorecase (忽略大小寫)
<	- 缺省: 'ignorecase' 的當前設置
	- 合法的設置是 0 或 1。
	- 啟動補全之前如果輸入一些字符，產生的列表會被過濾，只顯示這些字符開始
	  的項目。如果此選項為 0，列表過濾時考慮大小寫的敏感性。 >

    omni_sql_include_owner (包含擁有者)
<	- 缺省: 0，除非安裝了 dbext.vim 3.00
	- 合法的設置是 0 或 1。
	- 如果用 dbext.vim 3.00 或更高版本補全表、過程或視圖，對像清單裡同時包
	  含擁有者的名字。補全這些對像時如果打開了 omni_sql_include_owner，擁
	  有者的名字會被替代。 >

    omni_sql_precache_syntax_groups (預緩存語法組)
<	- 缺省:
	  ['syntax','sqlKeyword','sqlFunction','sqlOption','sqlType','sqlStatement']
	- sqlcomplete 可以和其它補全插件一起使用。|sql-completion-filetypes|
	  提供簡要說明。當文件類型暫時改為 SQL 時， sqlcompletion 插件緩存此選
	  項列表列出的語法組。
>

4.5 SQL 映射					*sql-completion-maps*
------------

缺省 SQL 映射在本文檔的其它章節裡已經有更詳細的描述。這裡列出所有映射，並帶有
每個映射的簡短描述。

靜態映射
-----------
這些映射使用 Vim 的語法高亮規則來給補全清單填充數據。 >
    <C-C>a
<	- 顯示所有的 SQL 語法項目。 >
    <C-C>k
<	- 顯示所有 'sqlKeyword' 定義的 SQL 語法項目。 >
    <C-C>f
<	- 顯示所有 'sqlFunction' 定義的 SQL 語法項目。 >
    <C-C>o
<	- 顯示所有 'sqlOption' 定義的 SQL 語法項目。 >
    <C-C>T
<	- 顯示所有 'sqlType' 定義的 SQL 語法項目。 >
    <C-C>s
<	- 顯示所有 'sqlStatement' 定義的 SQL 語法項目。

動態映射
------------
這些映射使用 dbext.vim 插件來給補全清單填充數據。 >
    <C-C>t
<	- 顯示表清單。 >
    <C-C>p
<	- 顯示過程清單。 >
    <C-C>v
<	- 顯示視圖清單。 >
    <C-C>c
<	- 顯示特定表的列清單。 >
    <C-C>l
<	- 顯示特定表用逗號分隔的列清單。 >
    <C-C>L
<	- 顯示特定表用逗號分隔的列清單。
	  只有補全窗口激活時才能使用此映射。 >
    <Right>
<	- 顯示補全窗口當前高亮表的列清單。 >
    <Left>
<	- 顯示表清單。 >
    <C-C>R
<	- 本映射刪除所有緩存項目並強制 SQL 補全重新生成所有的項目清單。

定制映射
----------------
根據需要，你可以建立許多附加的鍵映射。一般來說，映射指定不同的語法高亮組。

如果你不希望建立缺省的映射或者選擇的鍵不能用於你的平台 (通常在 *nix 上)，在
|vimrc| 裡定義下面的變量: >
    let g:omni_sql_no_default_maps = 1

不要直接編輯 ftplugin/sql.vim！如果修改了此文件，將來的更新會覆蓋你的改動。Vim
有一個特殊的目錄結構，你可以進行定制而無須修改 Vim 發佈裡包含的文件。如果你希
望定制映射，建立 after/ftplugin/sql.vim (見 |after-directory|)，並在那裡放上和
ftplugin/sql.vim 相同的映射並使用你自己的鍵擊。之所以選擇 <C-C>，是因為它在
Windows 和 *nix 平台上都能工作。Windows 平台上也可用 <C-Space> 或 ALT 鍵。


4.6 使用其它文件類型				*sql-completion-filetypes*
------------------------------

很多時候，SQL 可以用於不同的文件類型。例如，Perl、Java、PHP 和 Javascript 都可
以和數據庫進行交互。通常你既需要 SQL 補全，也需要當前編輯的語言的補全功能。

使用下面的步驟，這很容易做到 (假設 Perl 文件): >
    1.	:e test.pl
    2.	:set filetype=sql
    3.	:set ft=perl

步驟 1
------
開始編輯 Perl 文件。Vim 自動設置文件類型為 "perl"。缺省，Vim 執行合適的文件類
型文件 ftplugin/perl.vim。如果你依照 |ft-syntax-omni| 的指示使用語法補全插件，
那麼 |'omnifunc'| 選項已經被設置為 "syntax#Complete"。按 <C-X><C-O> 會顯示全能
補全的彈出菜單，裡面包含 Perl 的語法項目。

步驟 2
------
手動設置文件類型為 'sql' 會激活相應的文件類型文件 ftplugin/sql.vim。該文件定義
很多特定於緩衝區的 SQL 補全的映射，見 |sql-completion-maps|。現在這些映射已經
建立，而 SQL 補全插件也已經初始化。所有 SQL 語法項目也在緩存裡準備完畢。SQL 文
件類型腳本會檢測到我們在試圖使用兩個不同的補全插件。因為 SQL 映射都以 <C-C> 開
始，而這些映射只在使用時才會激活 |'omnifunc'|。所以用 <C-X><C-O> 仍然可以繼續
使用 Perl 補全 (使用語法補全插件)，而 <C-C> 則使用 SQL 補全的功能。

步驟 3
------
把文件類型設回 Perl，那麼所有與 "perl" 有關的項目都回到原來的設置。

vim:tw=78:ts=8:ft=help:norl:
