*usr_22.txt*	For Vim version 7.3.	最近更新：2008年4月

		     VIM 用戶手冊 - Bram Moolenaar 著
		  譯者： Chimin Yen http://vimcdoc.sf.net
				    
			      尋找要編輯的文件


到處都是文件，你怎麼查找它們呢？Vim 為我們提供了在目錄樹間瀏覽的種種方法。還有
若干命令讓你從一個文件通過文件名跳轉到一個文件。而且，Vim 還記著曾經編輯過哪些
文件。

|22.1|	文件瀏覽器
|22.2|	當前目錄
|22.3|	查找文件
|22.4|	緩衝區列表

       下一章: |usr_23.txt|  編輯特殊文件
       前一章: |usr_21.txt|  離開和回來
         目錄: |usr_toc.txt|

==============================================================================
*22.1*	文件瀏覽器

Vim 有個插件可以用來編輯一個目錄。試一下這個命令: >

	:edit .

借助魔術般的自動命令和 Vim 腳本功能，目錄的內容被用來填充窗口。看起來就像這
樣: 

" ============================================================================ ~
" Netrw Directory Listing                                        (netrw v109) ~
"   Sorted by      name ~
"   Sort sequence: [\/]$,\.h$,\.c$,\.cpp$,*,\.info$,\.swp$,\.o$\.obj$,\.bak$ ~
"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec ~
" ============================================================================ ~
../ ~
./ ~
check/ ~
Makefile ~
autocmd.txt ~
change.txt ~
eval.txt~ ~
filetype.txt~ ~
help.txt.info ~

你可以看到這樣一些條目:

1.  瀏覽工具的名稱和版本號
2.  瀏覽目錄名
3.  排序方法 (可以是名字、時間或大小)
4.  名字如何排序 (目錄優先，然後是 *.h 文件、*.c 文件，等等)
5.  如何得到幫助 (用 <F1> 鍵)，然後是可用命令的概括列表
6.  文件列表，包括 "../"，用戶可以由此列出父目錄。

如果你啟用了語法高亮功能，那麼，目錄裡不同部分就顯示成不同顏色，讓你比較容易辨
認它們。

你可以用普通模式下的 Vim 命令在文本內到處移動。例如，移動光標到一個文件名上並
按下 <Enter> 鍵。你就可以編輯那個文件了。要回到瀏覽器，再用一次 ":edit ." 或
":Explore" 即可，按 CTRL-O 也行。

試一下把光標移至某個目錄名，按 <Enter> 鍵。結果，瀏覽器就進了該目錄，並把那裡
的條目顯示出來。對準第一個目錄 "../" 按 <Enter> 鍵， 讓你返回父目錄。按 "-" 鍵
可達到同樣的目的，且無須先把光標移到 "../" 條目上。

你可以按 <F1> 鍵獲取關於 netrw 文件瀏覽器功能的幫助。幫助文字如下: >

    9. Directory Browsing	 netrw-browse   netrw-dir   netrw-list   netrw-help 

    MAPS								 netrw-maps 
     	 <F1>.............Help.......................................|netrw-help|
     	 <cr>.............Browsing...................................|netrw-cr|
     	 <del>............Deleting Files or Directories..............|netrw-delete|
     	 -................Going Up...................................|netrw--|
     	 a................Hiding Files or Directories................|netrw-a|
     	 mb...............Bookmarking a Directory....................|netrw-mb|
     	 gb...............Changing to a Bookmarked Directory.........|netrw-gb|
     	 c................Make Browsing Directory The Current Dir....|netrw-c|
     	 d................Make A New Directory.......................|netrw-d|
     	 D................Deleting Files or Directories..............|netrw-D|
     	 <c-h>............Edit File/Directory Hiding List............|netrw-ctrl-h|
     	 i................Change Listing Style.......................|netrw-i|
     	 <c-l>............Refreshing the Listing.....................|netrw-ctrl-l|
     	 o................Browsing with a Horizontal Split...........|netrw-o|
     	 p................Use Preview Window.........................|netrw-p|
     	 P................Edit in Previous Window....................|netrw-p|
     	 q................Listing Bookmarks and History..............|netrw-q|
     	 r................Reversing Sorting Order....................|netrw-r|
<    	(等等)

<F1> 鍵把你帶到 netrw 目錄瀏覽內容的幫助頁面。這是一個常規的幫助頁面，同樣常規
的 |CTRL-]| 跳轉到帶標籤的幫助項目，而 |CTRL-O| 則返回。

要選擇顯示和編輯的文件: (光標在某文件名上)

	<enter>		在當前窗口打開文件			   |netrw-cr|
	o		橫向分割窗口並顯示文件			   |netrw-o|
	v		豎向分割窗口並顯示文件			   |netrw-v|
	p		使用 |preview-window|	 		   |netrw-p|
	P		在上次的窗口中編輯			   |netrw-P|
	t		在新標籤頁中打開文件			   |netrw-t|

接下來的普通模式命令用來控制瀏覽器顯示:

	i		控制列表風格 (瘦、長、寬和樹形)。長列表包含文件大小和
			日期信息。
	s		反覆按 s 會改變文件排序的方式；可以按照名字、修改日期
			或文件大小排序。
	r		逆轉排列順序。

略舉數例其它的普通模式命令:

	c		把當前目錄改成顯示在窗口中的那個目錄。(見
			|g:netrw_keepdir|，它也控制此行為)
	R		為光標下文件改名。Vim 將提示你提供新文件名。
	D		刪除光標下文件。Vim 將提示你確認刪除動作。
	mb gb		建立書籤/轉到書籤


還有命令模式；還是一樣，只舉數例:

	:Explore [directory]	瀏覽指定/當前目錄
	:NetrwSettings		當前 netrw 設置的綜合列表，帶有幫助鏈接。

netrw 瀏覽器不限於你的本地機器；也可使用 url，如下:    (拖尾的 / 是必需的)

	:Explore ftp://somehost/path/to/dir/
	:e scp://somehost/path/to/dir/

詳見 |netrw-browse|。

==============================================================================
*22.2*	當前目錄

正如 shell 一樣，Vim 也有當前目錄的概念。假設你在主目錄，並要編輯幾個儲存在目
錄 "VeryLongFileName" 下的文件。你可以這樣做: >

	:edit VeryLongFileName/file1.txt
	:edit VeryLongFileName/file2.txt
	:edit VeryLongFileName/file3.txt

為了避免太多的鍵擊，你可以這樣做: >

	:cd VeryLongFileName
	:edit file1.txt
	:edit file2.txt
	:edit file3.txt

":cd" 命令可以用來改變當前目錄。你可以用 ":pwd" 命令來查看當前目錄使什麼: >

	:pwd
	/home/Bram/VeryLongFileName

Vim 記得最近訪問過的那個目錄。你可以用 "cd -" 命令回去那兒。例如: 
 >
	:pwd
	/home/Bram/VeryLongFileName
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/VeryLongFileName
	:cd -
	:pwd
	/etc


窗 口 本 地 目 錄

當你把窗口一分為二以後，兩個窗口的當前目錄是一樣的。而當你要在新窗口內編輯幾個
存放在當前目錄以外某處的文件時，你可以讓新窗口採用不同的當前目錄，同時保持原窗
口當前目錄不變。新窗口採用的當前目錄稱為本地目錄。 >

	:pwd
	/home/Bram/VeryLongFileName
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/VeryLongFileName

只要你不發出 ":lcd" 命令，所有窗口共享同一個當前目錄。在一個窗口執行一次 ":cd"
命令，也同時改變其它窗口的當前目錄。
   執行過 ":lcd" 命令的窗口記得它特有的當前目錄。在其它窗口執行 ":cd" 或
":lcd" 命令對它毫無影響。
   在一個採用特有當前目錄的窗口執行 ":cd" 命令以後，該窗口就回過頭來又採用共享
的當前目錄了。

==============================================================================
*22.3*	查找文件

假定現在你在編輯一個 C 程序，該程序有這樣一行: 

	#include "inits.h" ~

你想要查看文件 "inits.h" 裡有些什麼。把光標移到該文件名上，並鍵入: >

	gf

Vim 就會找到並打開這個文件。
   那麼，如果該文件不在當前目錄裡怎麼辦？Vim 將利用 'path' 選項來尋找這個文
件。該選項是一系列目錄名，Vim 會在其中為你尋找文件。
   假設你把你的頭文件存放在目錄 "c:/prog/include" 裡。下面這個命令把該目錄加入
'path' 選項: >

	:set path+=c:/prog/include

這個目錄名是一絕對路徑。不管你在哪兒，它都指向同一目錄。如果你已經知道要編輯的
文件位於當前文件所在目錄下某個子目錄裡，你該怎麼辦呢？那樣的話，你可以指定一個
相對路徑。相對路徑以 "." 開始:
>
	:set path+=./proto

這個命令告訴 Vim 到目錄 "proto" 裡找文件，而 "proto" 則位於你在其中用了 "gf"
命令的文件所在的目錄下面。如此一來，對 "inits.h" 用 "gf" 命令，就讓 Vim 以當前
文件所在目錄為起點，尋找 "proto/inits.h"。
   如果不加 "./"，只用 "proto"，Vim 就會進入當前目錄下的 "proto" 目錄尋找。然
而當前目錄可能不是你在編輯的這個當前文件所在的目錄。

'path' 選項還允許你用其它許多方法來指定在其中尋找文件的目錄。參見關於 'path'
選項的幫助。
   'isfname' 選項用來決定哪些字符可用於文件名，以及哪些不可以 (如上例中的雙引
號 " 字符)。

當你要找的文件名沒出現在你編輯的文件裡時，你可以鍵入這個文件名: >

	:find inits.h

然後 Vim 就利用 'path' 選項來確定該文件的位置。這就跟 ":edit" 命令一樣，只不過
":edit" 命令不用 'path' 選項。

要在新窗口內打開那個已經找到的文件，用 CTRL-W f，而不是 "gf"，或用 ":sfind" 而
不是 ":find"。

有個好辦法可以直接啟動 Vim 來編輯 'path' 中的某個文件: >

	vim "+find stdio.h"

這會在你的 'path' 中查找 "stdio.h"。雙引號是必需的，用來把括起來的當做一個參數
|-+c|。

==============================================================================
*22.4*	緩衝區列表

Vim 編輯器使用術語 "緩衝區" 來描述編輯當中的文件。實際上，緩衝區是你編輯的文件
的副本。你修改完緩衝區，就把緩衝區的內容寫進文件。緩衝區不僅存放文件內容，而且
還存放著全部標記，設定，以及其它跟被編輯文件相關的東西。


隱 藏 的 緩 沖 區

假設你在編輯文件 one.txt，同時又要編輯文件 two.txt。你本來可以簡單地用 ":edit 
two.txt" 來辦到，但由於你已經修改了 one.txt，那樣做就沒用了。而你又不想在此時
就把 one.txt 存盤。Vim 可以為你解決這個問題: >

	:hide edit two.txt

緩衝區 "one.txt" 從屏幕消失，但 Vim 仍然知道你在編輯這個緩衝區，因而保留著它修
改過的文本。這樣的緩衝區稱為隱藏的緩衝區: 緩衝區存放著文本，但你看不見它。
   ":hide" 命令參數是另一個命令。":hide" 使得那個命令表現得就像 'hidden' 選項
已被設定。你也可以不用 ":hide" 命令而設定 'hidden' 選項。其作用是當離開任何緩
沖區時，該緩衝區變成隱藏。
   小心！當你的隱藏的緩衝區已經改動，千萬不要在所有緩衝區存盤之前就退出 Vim。


非 激 活 緩 沖 區

   一個緩衝區一經使用，Vim 就記住了一些有關該緩衝區的信息。即使它既不顯示在窗
口內，又非隱藏緩衝區，它也仍然在緩衝區列表上。這樣的緩衝區稱為非激活緩衝區。一
般而言， 

   激活		顯示在窗口內，並加載文本
   隱藏		不顯示在窗口內，但加載文本
   非激活	不顯示在窗口內，不加載文本

非激活緩衝區不會被遺忘，因為 Vim 保存著關於它們的信息，如標記等。而且記住文件
名有個好處，你可以調閱你編輯過的文件名，再次編輯它們。


緩 沖 區 列 表

你可以用這個命令查看緩衝區列表:

	:buffers

另一個作用相當的命令，雖然意思不那麼明白，但鍵入時省事多了: >

	:ls

其輸出可能像這樣:

  1 #h	"help.txt"			line 62 ~
  2 %a+	"usr_21.txt"			line 1 ~
  3	"usr_toc.txt"			line 1 ~

第一欄存放緩衝區號。你可以利用它來編輯文件，而不用鍵入文件名，參見下文。
   緊隨緩衝區號的是些標誌位。然後是文件名，以及光標最後一次停留的行號。
   可能出現的標誌位有以下這些 (自左至右):

	u	列表外緩衝區 |unlisted-buffer|。
	 %	當前緩衝區。
	 #	輪換緩衝區。
	  a	激活緩衝區，緩衝區被加載且顯示。
	  h	隱藏緩衝區，緩衝區被加載但不顯示。
	   =	只讀緩衝區。
	   -	不可改緩衝區， 'modifiable' 選項不置位。
	    +	已修改緩衝區。


編 輯 緩 沖 區

你可以通過指定其緩衝區號來編輯一個緩衝區，而不必鍵入文件名: >

	:buffer 2

但獲知緩衝區號的唯一途徑是查閱緩衝區列表。如果不用緩衝區號，你可以用文件名，或
其部分:

	:buffer help

Vim 將為你鍵入的文件名找到最佳匹配。如果只有一個緩衝區與之匹配，該緩衝區就被選
用。在這個例子中，被選中的就是 "help.txt"。
   要在新窗口中打開一個緩衝區: 

	:sbuffer 3

這方法也適用於文件名。


使 用 緩 沖 區 列 表

你可以用這些命令在緩衝區列表間移動: 

	:bnext		編輯下一個緩衝區
	:bprevious	編輯前一個緩衝區
	:bfirst		編輯第一個緩衝區
	:blast		編輯最後一個緩衝區

要從緩衝區列表上刪除一個緩衝區，用這個命令: 

	:bdelete 3

同樣，這命令也適用文件名。
   如果你刪除了一個激活的緩衝區 (顯示在窗口中的緩衝區)，你也就關閉了該窗口。如
果你刪除了當前緩衝區，你也就關閉了當前窗口。如果它是最後一個窗口，Vim 將找一個
緩衝區來編輯。你無法什麼也不編輯！  

	備註:
	即使用 ":bdelete" 命令刪除了緩衝區以後，Vim 依然記得它。這個緩衝區實際
	上成了 "列表外" 緩衝區，它不再出現在 ":buffers" 命令所報告的列表中。不
	過 ":buffers!" 命令仍會列出 "列表外" 緩衝區 (沒錯，Vim 無所不能)。要讓
	Vim 徹底忘記一個緩衝區，用 ":bwipe" 命令。另見 'buflisted' 選項。

==============================================================================

下一章: |usr_23.txt|  編輯其它文件

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
