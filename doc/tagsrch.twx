*tagsrch.txt*   For Vim version 7.3.  最近更新: 2009年4月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net


標籤和特殊搜索						*tags-and-searches*

用戶手冊 |29.1| 有這部分內容的介紹。

1. 跳轉到標籤			|tag-commands|
2. 標籤棧			|tag-stack|
3. 標籤匹配表			|tag-matchlist|
4. 標籤細節			|tag-details|
5. 標籤文件格式			|tags-file-format|
6. 頭文件搜索			|include-search|

==============================================================================
1. 跳轉到標籤						*tag-commands*

							*tag* *tags*
標籤是出現在 "tags" 文件的一個標識符。它是一種能夠跳轉的標記。例如，在 C 程序
裡，每個函數名都可以是一個標籤。在使用標籤文件之前，"tags" 文件由 ctags 這樣的
程序生成。

使用 ":tag" 命令移動光標到標籤上。使用 CTRL-] 命令，光標所在的關鍵字就可用作標
簽。如果光標不在關鍵字上，則使用最右側的一個關鍵字。

":tag" 命令對 C 程序十分有效。如果你看到一個函數的調用而想知道該函數的作用，把
光標移動到函數名上，並按 CTRL-]。它會把你帶到該函數的定義上。簡單的，按 CTRL-T
就可以回去。同時，也請閱讀下面關於標籤棧的描述。

						*:ta* *:tag* *E426* *E429*
:[count]ta[g][!] {ident}
			根據 tags 文件的信息，跳轉到 {ident} 的定義上。
			把 {ident} 放在堆棧上。[!] 見 |tag-!|。
			{ident} 可以是個正規表達式。見 |tag-regexp|。
			如果有 {ident} 的多個匹配，則跳轉到它們中的第 [count]
			個。如果 [count] 被省略，則跳轉到第一個。要跳轉到其它
			匹配的標籤，參見 |tag-matchlist|。

g<LeftMouse>						*g<LeftMouse>*
<C-LeftMouse>					*<C-LeftMouse>* *CTRL-]*
CTRL-]			跳轉到光標所在的關鍵字的定義。和 ":tag {ident}" 相同，
			只不過 {ident} 是光標之下或者之後的關鍵字。
			如果有 {ident} 的多個匹配，則跳轉到它們中的第 [count]
			個。如果沒有 [count]，跳轉到第一個。 要跳轉到其它匹配
			的標籤，參見 |tag-matchlist|。
			{Vi: 光標之後的標識符}

							*v_CTRL-]*
{Visual}CTRL-]		和 ":tag {ident}" 相同，其中 {ident} 是高亮的文本。
			{Vi 無此功能}

							*telnet-CTRL-]*
CTRL-] 是缺省的 telnet 轉義鍵。在你按 CTRL-] 進行標籤跳轉的時候，你會得到
telnet 的提示符。許多版本的 telnet 允許你改變或者屏蔽缺省的轉義鍵。見 telnet
的手冊頁。你可以用 'telnet -E {Hostname}' 來屏蔽轉義鍵，或者用 'telnet -e
{EscapeCharacter} {Hostname}' 來指定別的轉義鍵。如果可能，用 "ssh" 來代替
"telnet" 也可解決這個問題。

							*tag-priority*
如果有標籤的多個匹配，使用以下的優先級:
1. "FSC"  當前文件的完整的匹配靜態標籤。
2. "F C"  當前文件的完整匹配全局標籤。
3. "F  "  其他文件的完整匹配全局標籤。
4. "FS "  其他文件的完整匹配靜態標籤。
5. " SC"  當前文件的忽略大小寫的匹配靜態標籤。
6. "  C"  當前文件的忽略大小寫匹配全局標籤。
7. "   "  其他文件的忽略大小寫匹配全局標籤。
8. " S "  其他文件的忽略大小寫匹配靜態標籤。

注意 當前文件改變時，優先順序多數情況下不會改變，以免使 ":tnext" 的使用引起混
淆。在使用 ":tag {ident}" 時，優先順序才會改變。

如果 'ignorecase' 選項關閉，":tag" 命令不會查找忽略大小寫的匹配。不過即使如
此，模式 (以 "/" 開始) 的匹配和 ":tselect" 還會查找這些匹配。注意 使用忽略大小
寫查找就無法應用 tags 文件的二分法查找，從而減慢了查找速度。這可以用大小寫合併
排序的標籤文件來解決。具體解釋見 'tagbsearch' 選項。

==============================================================================
2. 標籤棧				*tag-stack* *tagstack* *E425*

標籤棧記住你跳轉過的標籤，還有從哪裡跳轉到這些標籤。只有在設置 'tagstack' 選項
的時候，標籤才被壓到堆棧裡。

g<RightMouse>						*g<RightMouse>*
<C-RightMouse>					*<C-RightMouse>* *CTRL-T*
CTRL-T			跳到標籤棧上第 [count] 個較早的項目 (缺省為 1)。
			{Vi 無此功能}

						*:po* *:pop* *E555* *E556*
:[count]po[p][!]	跳到標籤棧上第 [count] 個較早的項目 (缺省為 1)。
			[!] 見 |tag-!|。{Vi 無此功能}

:[count]ta[g][!]	跳到標籤棧上第 [count] 個較新的項目 (缺省為 1)。
			[!] 見 |tag-!|。{Vi 無此功能}

							*:tags*
:tags			顯示標籤棧的內容。激活的項目以 '>' 標明。{Vi 無此功能}

":tags" 的輸出結果類似於:

   # TO tag      FROM line in file/line
   1  1 main		 1  harddisk2:text/vim/test
 > 2  2 FuncA		58  i = FuncA(10);
   3  1 FuncC	       357  harddisk2:text/vim/src/amiga.c

該列表顯示你跳轉到的標籤和跳轉前光標的位置。較早的項目在頂部，較新的在底部。

'>' 指向活動的項目。這是下一個 ":tag" 命令將使用的標籤。CTRL-T 和 ":pop" 使用
活動項目之上的那項的位置。

"TO" 之下的那列顯示匹配表的當前匹配的數目。注意 這不會因為使用 ":pop" 或者
":tag" 而改變。

記住文件名和行號可以使你回到 tag 命令之前的位置。即使你刪除或者插入行，行號也
會保持正確，除非你用別的程序 (比如，另外一個 Vim 的實例) 做這些事。

對於當前文件，"file/line" 列顯示該位置的文本。縮進被刪除，長行也被截短，以便能
放進窗口裡顯示。

有若干命令可以讓你跳到之前用過的標籤。一些例子包括:

	":pop" 或 CTRL-T	到上一個標籤之前的位置
	{count}CTRL-T		到第 {count} 個較早的標籤之前的位置
	":tag"			到更新的標籤
	":0tag"			到前一個使用過的標籤

最明顯的應用就是瀏覽程序的調用圖。考慮下面的調用圖:

	main  --->  FuncA  --->  FuncC
	      --->  FuncB

(解釋: main 調用 FuncA 和 FuncB; FuncA 調用 FuncC)。
從 main 到 FuncA，你可以在調用 FuncA 的行上用 CTRL-]。然後再用 CTRL-] 跳到
FuncC。如果你現在想跳回到 main，你只需要按 CTRL-T 兩次。然後你可以用 CTRL-] 到
FuncB。

如果你使用 ":ta {ident}" 或者 CTRL-] 命令，該標籤被加在棧的當前位置。如果棧已
滿 (最多可以容納 20 項)，最早的項目被刪除，較早的項目則依次前移 (索引號分別減
1)。如果最近使用的項目不在底部，它其後的項目都被刪除。這意味著調用圖上的舊的分
支丟失了。在上面解釋的命令執行以後，標籤棧看起來像這樣:

   # TO tag	FROM line in file
   1 main	       1  harddisk2:text/vim/test
   2 FuncB	      59  harddisk2:text/vim/src/main.c

							*E73*
如果你試圖使用標籤棧，而其中沒有任何內容，你會得到一個錯誤信息。

==============================================================================
3. 標籤匹配表				*tag-matchlist* *E427* *E428*

如果有多個匹配的標籤，這些命令可以用來在它們之間跳轉。注意 這些命令不影響標籤
棧，它保留原來的項目。

							*:ts* *:tselect*
:ts[elect][!] [ident]	根據 tags 文件的信息，列出匹配 [ident] 的標籤。
			如果 [ident] 沒有給出，使用標籤棧上最後的標籤名。
			第一列的 '>' 指示列表的當前位置 (如果有的話)。
			[ident] 可以是正規表達式模式，見 |tag-regexp|。
			列表使用的優先級順序見 |tag-priority|。
			{Vi 無此功能}
			示例輸出:

>
	 nr pri kind tag		file
	  1 F	f    mch_delay		os_amiga.c
			mch_delay(msec, ignoreinput)
	> 2 F	f    mch_delay		os_msdos.c
			mch_delay(msec, ignoreinput)
	  3 F	f    mch_delay		os_unix.c
			mch_delay(msec, ignoreinput)
	Enter nr of choice (<CR> to abort):
<
			"pri" 列見 |tag-priority|。注意 這決定於當前文件，因而
			":tselect xxx" 可能會輸出不同的結果。
			如果 tags 文件給出標籤的類型。"kind" 列輸出此信息。
			"info" 列給出 tags 文件找到的信息。這決定於產生 tags
			文件的程序。
			如果列表很長，你可能會看到 |more-prompt|。如果你已經看
			到要用的標籤，按 'q' 並輸入那個數字。

							*:sts* *:stselect*
:sts[elect][!] [ident]	":tselect[!] [ident]" 並分割窗口以顯示選擇的標籤。
			{Vi 無此功能}

							*g]*
g]			類似於 CTRL-]，但使用 ":tselect" 而不是 ":tag"。
			{Vi 無此功能}

							*v_g]*
{Visual}g]		和 "g]" 相同，但使用高亮文本作為標識符。
			{Vi 無此功能}

							*:tj* *:tjump*
:tj[ump][!] [ident]	類似於 ":tselect"，但如果只有一個匹配，直接跳轉之。
			{Vi 無此功能}

							*:stj* *:stjump*
:stj[ump][!] [ident]	":tjump[!] [ident]" 並分割窗口以顯示選擇的標籤。
			{Vi 無此功能}

							*g_CTRL-]*
g CTRL-]		類似於 CTRL-]，但使用 ":tjump" 而不是 ":tag"。
			{Vi 無此功能}

							*v_g_CTRL-]*
{Visual}g CTRL-]	和 "g CTRL-]" 相同，但使用高亮文本作為標識符。
			{Vi 無此功能}

							*:tn* *:tnext*
:[count]tn[ext][!]	跳轉到向下 [count] 個匹配的標籤 (缺省為 1)。[!] 見
			|tag-!|。{Vi 無此功能}

							*:tp* *:tprevious*
:[count]tp[revious][!]	跳轉到向上 [count] 個匹配的標籤 (缺省為 1)。[!] 見
			|tag-!|。{Vi 無此功能}

							*:tN* *:tNext*
:[count]tN[ext][!]	和 ":tprevious" 相同。{Vi 無此功能}

							*:tr* *:trewind*
:[count]tr[ewind][!]	跳轉到第一個匹配的標籤。如果給出 [count]，跳到第
			[count] 個匹配的標籤。[!] 見 |tag-!|。{Vi 無此功能}

							*:tf* *:tfirst*
:[count]tf[irst][!]	和 ":trewind" 相同。{Vi 無此功能}

							*:tl* *:tlast*
:tl[ast][!]		跳到最後匹配的標籤。[!] 見 |tag-!|。{Vi 無此功能}

							*:lt* *:ltag*
:lt[ag][!] [ident]	跳轉到標籤 [ident] 上並在當前窗口的新位置列表中加入匹
			配的標籤。
			[ident] 可以是正規表達式，見 |tag-regexp|。如果
			[ident] 沒有給出，使用標籤棧上最後的標籤名。查找標籤行
			的搜索模式會加上 "\V" 前綴，轉義所有的特殊字符 (very
			nomagic)。顯示匹配標籤的位置列表獨立於標籤棧。 [!] 見
			|tag-!|。
			{Vi 無此功能}

如果沒有其他消息，Vim 顯示跳到的是哪個匹配的標籤，還有匹配標籤的總數: >
	tag 1 of 3 or more
" or more" 用於說明 Vim 並沒有嘗試完所有的 tags 文件。多用幾次 ":tnext" 或者用
":tlast" 也許會找到更多。

如果因為有其他的消息使得你沒看到這個消息，或者你想知道現在在哪裡，以下這個命令
會再次顯示本消息 (並跳轉到最近一次的相同的標籤): >
	:0tn
<
							*tag-skip-file*
如果找到一個匹配的標籤，但是相應的文件卻不存在，該匹配被跳過，而使用下一個匹
配。Vim 報告這一點，提醒你文件的丟失。在匹配列表的結束處，會給出錯誤。

							*tag-preview*
標籤匹配表也可用在預覽窗口。命令和上面一樣，除了前面有個 "p"。
{僅當編譯時加入 |+quickfix| 特性才有效}

							*:pts* *:ptselect*
:pts[elect][!] [ident]	":tselect[!] [ident]" 並在預覽窗口顯示新的標籤。詳情見
			|:ptag|。
			{Vi 無此功能}

							*:ptj* *:ptjump*
:ptj[ump][!] [ident]	":tjump[!] [ident]" 並在預覽窗口顯示新的標籤。詳情見
			|:ptag|。
			{Vi 無此功能}

							*:ptn* *:ptnext*
:[count]ptn[ext][!]	在預覽窗口裡 ":tnext"。見 |:ptag|。
			{Vi 無此功能}

							*:ptp* *:ptprevious*
:[count]ptp[revious][!]	在預覽窗口裡 ":tprevious"。見 |:ptag|。
			{Vi 無此功能}

							*:ptN* *:ptNext*
:[count]ptN[ext][!]	等價於 ":ptprevious"。
			{Vi 無此功能}

							*:ptr* *:ptrewind*
:[count]ptr[ewind][!]	在預覽窗口中 ":trewind"。見 |:ptag|。
			{Vi 無此功能}

							*:ptf* *:ptfirst*
:[count]ptf[irst][!]	等價於 ":ptrewind"。
			{Vi 無此功能}

							*:ptl* *:ptlast*
:ptl[ast][!]		在預覽窗口中見 ":tlast"。見 |:ptag|。
			{Vi 無此功能}

==============================================================================
4. 標籤細節						*tag-details*

							*static-tag*
靜態標籤是為特定文件定義的標籤。在 C 程序裡，這可能是一個靜態函數。

Vi 裡跳轉某個標籤的同時設置當前搜索模式。這意味著在標籤跳轉後，"n" 命令不再查
找跳轉前最後使用的模式了。Vim 沒有這麼做，因為我們認為這是一個錯誤。你仍然可以
從搜索歷史裡查找到標籤的搜索模式。如果你真的想要從前 Vi 那樣的行為，在
'cpoptions' 裡設置 't' 標誌位。

							*tag-binary-search*
Vim 使用二分法查找標籤文件，以快速查找到希望找到的標籤 (如果編譯時打開
|+tag_binary| 特性的話)。不過這只有在 tags 文件按 ASCII 字節值排序才有效。因
此，如果沒有匹配，Vim 會按照線性查找再來一次。如果你只想要線性查找。復位
'tagbsearch' 選項。或者更好的: 對 tags 文件排序！

注意 如果不查找特定名字，標籤的查找不使用二分法查找。這包括忽略大小寫的查找或
不以固定字符串開始的正規表達式的查找。這樣的標籤搜索可能會慢很多。前者可以用大
小寫合併排序來解決。詳情見 'tagbsearch'。

							*tag-regexp*
":tag" 和 "tselect" 命令接受正規表達式參數。|pattern| 可以看到如何使用特別的字
符。如果參數以 '/' 開始，它被認為是一個模式。如果不是，它被認為是按本義出現的
完整的標籤名。
示例: >
    :tag main
<	跳轉到最高優先級的 "main" 標籤。 >
    :tag /^get
<	跳轉到最後優先級的 "get" 開始的標籤。 >
    :tag /norm
<	列出所有包含 "norm" 的標籤，例如 "id_norm"。
如果參數既能按本義匹配，也能按正規表達式匹配，本義匹配有更高的優先級。比如，
":tag /open" 在 "open_file" 和 "file_open" 之前匹配 "open"。
如果使用模式，那麼忽略大小寫。如果你想在模式中匹配大小寫，使用 "\C"。

							*tag-!*
如果當前文件裡有需要的標籤，就沒有問題。不然，採取的行動決定於當前文件是否發生
了改變，還有是否命令之後加了 !，還有 'autowrite' 選項:

標籤在		文件是		autowrite			~
當前文件裡	否改變	!	選項	行動	~
-----------------------------------------------------------------------------
    是		x	x	x	轉到標籤
    否		否	x	x	讀入其他文件，轉到標籤
    否		是	是	x	放棄當前文件，讀入其他文件，轉到標籤
    否		是	否	開	寫入當前文件，讀入其他文件，轉到標籤
    否		是	否	關	失敗
-----------------------------------------------------------------------------

- 如果標籤在當前文件裡，該命令總能工作。
- 如果標籤在另外的文件裡而當前文件沒有改變。那個文件成為當前文件，並讀入到緩衝
  區裡。
- 如果標籤在另外的文件裡而當前文件發生了改變。而命令後加了 !，那麼當前文件的改
  變被放棄，那個文件成為當前文件，並讀入緩衝區。
- 如果標籤在另外的文件裡而當前文件發生了改變。而 'autowrite' 選項被打開，那麼
  當前文件的改變被保存，那個文件成為當前文件，並讀入緩衝區。
- 如果標籤在另外的文件裡而當前文件發生了改變。而 'autowrite' 選項被關閉，那麼
  該命令失敗。此時，如果你想保存改變，先用 ":w" 命令，再用不帶參數的 ":tag"。
  這是因為標籤已經在堆棧上了。如果你想放棄改變，你可以用 ":tag!" 命令。

							*tag-security*
注意 Vim 為了安全原因禁止某些命令。這類似於在當前目錄下的 exrc/vimrc 文件裡使
用了 'secure' 選項。見 |trojan-horse| 和 |sandbox|。
如果 {tagaddress} 改變了緩衝區，你會得到警告:
	"WARNING: tag command changed a buffer!!!"
在將來的版本裡，也許會禁止對緩衝區的改變。這些都是為了安全原因: 有的人可能在
tags 文件裡隱藏了惡意的命令。如果不這麼做，你也許不能看到這一點。例如: >
	:$d|/tag-function-name/
{Vi 沒有這個安全保護措施}

Vi 裡跳轉某個標籤的同時設置當前搜索模式。Vim 沒有這麼做，以前的搜索模式還是記
住的。除非 'cpoptions' 裡設置了 't' 標誌位。搜索歷史裡包含了這個搜索模式，所以
在搜索失敗的時候你可以修改這個模式。

					*emacs-tags* *emacs_tags* *E430*
Emacs 風格的 tag 文件只有在 Vim 編譯的時候加入 |+emacs_tags| 特性時才有效。對
不起，這裡沒有 Emacs 標籤文件的解釋，支持它只是為了後向兼容。:-)。

Emacs 標籤文件的行可能很長。Vim 只處理不超過 510 字節的行。要看到哪些行被忽
略，設置 'verbose' 為 5 或更高。

							*tags-option*
'tags' 選項是文件名的列表。其中的每個文件都用來搜索標籤。這可以用來指定不同於
缺省的 "tags" 文件的標籤文件。它也可以用來訪問一個公用的標籤文件。

下列情況下，不再查找列表中的下個文件:
- 找到了當前緩衝區的匹配的靜態標籤。
- 找到了全局標籤。
同時也取決於 'ignorecase' 選項。如果關閉了，而當前標籤文件找到大小寫不符合的匹
配，那麼就會查找下一個文件。如果沒有匹配大小寫的標籤，則使用第一個大小寫不符合
的匹配。如果 'ignorecase' 打開，而找到全局的匹配 (不論大小寫)，則立即使用之，
而無須繼續查找下一個文件。

如果標籤文件以 "./" 開始，則 '.' 會被替代成當前的文件所在的路徑。這樣，你可以
使用當前文件所在的目錄下的標籤文件 (無論當前目錄在哪裡)。使用 "./" 的邏輯是，
你可以定義哪個標籤文件最先查找: 先當前目錄 ("tags,./tags")，還是先當前文件所處
的目錄 ("./tags,tags")。

例如: >
	:set tags=./tags,tags,/home/user/commontags

在這個例子裡，先查找當前文件所處目錄的 "tags" 文件。再查找當前目錄下的 "tags"
文件。如果沒有，再查找 "/home/user/commontags"。

要 Vi 兼容，可以在 'cpoptions' 裡包含 'd' 標誌位。這樣，"./tags" 會是當前目錄
下的 tags 文件，而不是當前文件所在的目錄下的。

除了逗號以外，也可以用空格。而在字符串值的選項裡，空格需要用反斜槓轉義: >
	:set tags=tags\ /home/user/commontags

這樣，要在文件名裡包含空格，需要三個反斜槓。要在文件名裡包含逗號，需要兩個反斜
槓。例如，可以用: >
	:set tags=tag\\\ file,/home/user/common\\,tags

來指定文件 "tag file" 和 "/home/user/common,tags"。'tags' 選項會包含值
"tag\ file,/home/user/common\,tags"。

如果打開 'tagrelative' 選項 (這是缺省值) 而使用別的目錄的標籤文件，該標籤文件
所引用的文件名相對於標籤文件本身所處的目錄。

==============================================================================
5. 標籤文件格式					*tags-file-format* *E431*

						*ctags* *jtags*
標籤文件是外部程序創建的，比如 "ctags"。對每個函數，它會包含一個標籤。有些版本
的 "ctags" 會為每個 "#define" 宏、類型等價定義 (typedef)、枚舉 (enum) 等也創建
標籤。

能產生標籤文件的程序有:
ctags			大多數 Unix 系統都能找到。只支持 C。只有基本的功能。
							*Exuberant_ctags*
exuberant ctags		這是很好的一個。它支持 C、C++、Java、Fortran、Eiffel
			等等。它能為很多項目產生標籤。見
			http://ctags.sourceforge.net。
etags			和 Emacs 有關。支持很多語言。
JTags			用 Java 編寫，為 Java 而設計。可以在這裡找到:
			http://www.fleiner.com/jtags/。
ptags.py		用 Python 編寫，為 Python 而設計。它位於你的 Python 源
			代碼目錄 Tools/scripts/ptags.py。
ptags			用 Perl 編寫，為 Perl 而設計。可以在這裡找到:
			http://www.eleves.ens.fr:8080/home/nthiery/Tags/。
gnatxref		為 Ada 而設計。見 http://www.gnuada.org/。gnatxref 是
			gnat 包的一部分。


標籤文件的行應是以下三種格式之一:

1.  {tagname}		{TAB} {tagfile} {TAB} {tagaddress}
2.  {tagfile}:{tagname} {TAB} {tagfile} {TAB} {tagaddress}
3.  {tagname}		{TAB} {tagfile} {TAB} {tagaddress} {term} {field} ..

第一個是普通的標籤，和 Vi 完全兼容。傳統的 ctags 實現只能產生這種格式。通常，
這用於被別的文件所引用的全局函數，

標籤文件行可以用 <LF> 或者 <CR><LF> 結尾。在 Macintosh 上，<CR> 也能工作。<CR>
和 <NL> 字符不應該在行內出現。

							*tag-old-static*
第二個格式只限於靜態標籤。現在已經廢棄了，被第三個格式取而代之。只有 Elvis
1.x, Vim 還有很少的 ctags 版本支持。靜態變量用於本地函數，只有文件 {tagfile}
才引用。注意 對靜態變量而言，{tagfile} 的兩次出現必須完全一致。關於如何使用靜
態變量，見下面的 |tags-option|。

第三個格式是新出現的。它在每行尾部的可選字段上包含了附加的信息。它和 Vi 後向兼
容。只有新的 ctags 版本 (比如 Exuberant ctags) 才支持這種格式。

{tagname}	標識符。通常是函數的名字，但可以是任何標識符。不能包含 <Tab>。
{TAB}		單個 <Tab> 字符。注意: 以前的版本允許任意多個空白字符。現在不
		支持，因為 {tagfile} 裡可能包含空格。編譯時加入
		|+tag_any_white| 特性可以重新打開這個功能。 *tag-any-white*
{tagfile}	包含 {tagname} 定義的文件。可以是絕對路徑或者相對路徑。還可以
		包含環境變量甚至通配符 (儘管使用通配符很值得懷疑)。它不能包含
		<Tab>。
{tagaddress}	可以定位到 tag 的光標位置的 Ex 命令。可以是任何 Ex 命令，儘管
		有一些限制 (見 |tag-security|)。Posix 只允許行號和搜索命令，這
		也是最常用的。
{term}		;" 分號和雙引號兩個字符。這被 Vi 解釋為註釋的開始，從而忽略其
		後的部分。這樣，就能和 Vi 後向兼容，因為 Vi 忽略後面的字段。
{field} ..	可選的字段列表。每個字段有以下形式:

			<Tab>{fieldname}:{value}

		{fieldname} 標識字段，並且只能包含字母 [a-zA-Z]。
		{value} 可以使任何字符串，但不能包含 <Tab>。
		以下字符有特殊含義:
			"\t" 代表 <Tab>
			"\r" 代表 <CR>
			"\n" 代表 <NL>
			"\\" 代表單個 '\' 字符

		有一個字段不需要 ':'。那就是標籤的類型。它的處理方式就像前面
		有 "kind:" 開頭那樣。ctags 能產生的類型見它的文檔。

		唯一的 Vim 能識別的其他字段是 "file:" (帶一個空值)。用於靜態變
		量。

標籤文件的開頭可以包含這樣開始的行:
	!_TAG_
排序以後，他們一般都排在最前面。只有很少的以 "!" 開頭的標籤能排在他們前面。Vim
識別兩項。第一個是指示文件是否排序的標誌。如果找到這麼一行，Vim 使用二分法查找
標籤文件:
	!_TAG_FILE_SORTED<Tab>1<Tab>{anything} ~

標籤文件可以按大小寫合併排序，以免 'ignorecase' 打開時只能進行線性查找。詳情見
'tagbsearch'。這時可以用值 2:
	!_TAG_FILE_SORTED<Tab>2<Tab>{anything} ~

另一個 Vim 識別的標籤，只有在編譯時帶了 |+multi_byte| 特性才有效。它指定標籤文
件的編碼:
	!_TAG_FILE_ENCODING<Tab>utf-8<Tab>{anything} ~
這裡 "utf-8" 是標籤們所用的編碼。Vim 會把查找的標籤從 'encoding' 轉為標籤文件
的編碼。當列出標籤時，則反之。如果轉換失敗，則直接使用未經轉換的標籤。

							*tag-search*
標籤搜索命令可以是任何 Ex 命令，但通常就是普通的搜索命令。比如:
	tag1	file1	/^main(argc, argv)/ ~
	tag2	file2	108 ~

該命令執行時總假設不設定 'magic'。搜索模式裡僅有的特別的字符是 "^" (行首) 和
"$" (<EOL>)。見 |pattern|。注意，你必須在搜索文本裡的每個反斜槓前加上反斜槓。
這和 Vi 反向兼容。

							*E434* *E435*
如果該命令是一個普通的搜索命令 (也就是，以 "/" 或 "?" 開頭和結尾)，會進行一些
特殊處理:
- 搜索從文件第 1 行開始。
  如果用 "/"，搜索方向為正向，"?" 則為反向。
  注意 'wrapscan' 沒有影響，總是搜索整個文件。{Vi 使用 'wrapscan'，使得有時標
  簽可能找不到}。{Vi 從別的文件的第二行開始搜索。如果沒有置位 'wrapscan'，它不
  會去找別的文件的第一行的標籤}
- 如果搜索失敗，忽略大小寫再重新嘗試一次。如果還不行，搜索:
	"^tagname[ \t]*("
  (實際的標籤前面加上 '^' 而後面加上 "[ \t]*(")。應用函數名的時候，它會找到在
  第 0 列的函數名。這會有助於找到該函數，即使它的參數和生成 tags 文件時有差
  異。如果還不行，進行另外一個搜索:
	"^[#a-zA-Z_].*\<tagname[ \t]*("
  這意味著: 以 '#' 或者一個標識符開始的一行，包含標籤本身，後面緊跟空白和一個
  '('。這會找到宏名和前面有返回類型的函數名。{Vi 沒有這些額外的搜索}

==============================================================================
6. 頭文件搜索				*include-search* *definition-search*
							*E387* *E388* *E389*

這些命令遞歸地查找當前文件和所有遇到的頭文件的一個字符串。這可以用來查找變量的
定義，函數或者宏。如果只想查找當前緩衝區，用 |pattern-searches| 列出來的命令。

這些命令只有在編譯時加入 |+find_in_path| 特性才會有效。

如果一個文件的某行包含另一個文件，那麼那個文件在當前緩衝區繼續之前先進行搜索。
頭文件裡包含的頭文件也會被搜索。當頭文件找不到時，它被悄悄地忽略掉。用
|:checkpath| 命令檢查哪些文件可能找不到。是不是因為你的 'path' 選項沒有設對。
注意: 被搜索的是頭文件本身，不是可能正在編輯它的緩衝區。只有當前的文件除外，它
使用緩衝區裡的行。

字符串可能是任何的關鍵字或者定義的宏。對於關鍵字，任何匹配都會找到。對於定義的
宏，只有用匹配 'define' 選項的行才會被找到。它的缺省值是 "^#\s*define"。這對 C
程序適用，對於其它語言你可能想改變之。C++ 的一個例子見 'define'。該字符串不能
包含換行符，只能匹配一行之內的文本。

如果找到一個定義的宏的匹配，並且該行以反斜槓結尾的話。行的顯示在下一行繼續。

"[" 開頭的命令從當前文件開始查找。"]" 開始的命令從當前光標位置開始。

'include' 選項用於定義可以包含另一個文件的行。缺省是 "\^#\s*include"。它適用於
C 程序。注意: Vim 並不試圖識別 C 語法。如果 'include' 選項在 #ifdef/#endif 之
間或者註釋內的一行上匹配，它也會被搜索到。'isfname' 選項用於識別匹配之後的文件
名。

'path' 選項用於查找不含絕對路徑的頭文件所在的目錄。

'comments' 選項用來顯示或者跳轉到一行的命令。如果定義的模式可能包含註釋，這些
行用來跳過搜索，除非使用 [!]。一個特例: 如果一行匹配模式 "^# *define"，它不會
被認為是註釋。

如果你想列出所有的匹配，然後選擇一個並跳轉之，你可以使用一個映射來做這件事。這
裡是一個例子: >

  :map <F4> [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
<
							*[i*
[i			顯示第一個包含光標所在的關鍵字的行。搜索從文件開頭開
			始。看起來像註釋的行被忽略 (見 'comments' 選項)。如果
			給出一個計數，跳轉到第 count 個匹配的行，註釋行不忽
			略。{Vi 無此功能}

							*]i*
]i			類似於 "[i"，但是從當前光標位置開始。
			{Vi 無此功能}

							*:is* *:isearch*
:[range]is[earch][!] [count] [/]pattern[/]
			類似於 "[i" 和 "]i"，但在 [range] 行範圍搜索 (缺省: 整
			個文件)。
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}

							*[I*
[I			顯示包含光標下的關鍵字的所有的行。找到的每行都顯示文件
			名和行號。搜索從文件頭開始。{Vi 無此功能}

							*]I*
]I			類似於 "[I"，但是從當前光標位置開始。
			{Vi 無此功能}

							*:il* *:ilist*
:[range]il[ist][!] [/]pattern[/]
			類似於 "[I" 和 "]I"，但在 [range] 行範圍搜索 (缺省:
			整個文件)。
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}

							*[_CTRL-I*
[ CTRL-I		跳轉到第一個包含光標所在的關鍵字的行。搜索從文件開頭開
			始。看起來像註釋的行被忽略 (見 'comments' 選項)。如果
			給出一個計數，跳轉到第 count 個匹配的行，註釋行不忽
			略。{Vi 無此功能}


							*]_CTRL-I*
] CTRL-I		類似於 "[ CTRL-I"，但是從當前光標位置開始。
			{Vi 無此功能}

							*:ij* *:ijump*
:[range]ij[ump][!] [count] [/]pattern[/]
			類似於 "[ CTRL-I"  和 "] CTRL-I"，但在 [range] 行範圍
			搜索 (缺省: 整個文件)。
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}

CTRL-W CTRL-I					*CTRL-W_CTRL-I* *CTRL-W_i*
CTRL-W i		打開一個新窗口，把光標放在第一個包含光標所在的關鍵字的
			行。搜索從文件開頭開始。看起來像註釋的行被忽略 (見
			'comments' 選項)。如果給出一個計數，跳轉到第 count 個
			匹配的行，註釋行不忽略。 {Vi 無此功能}


							*:isp* *:isplit*
:[range]isp[lit][!] [count] [/]pattern[/]
			類似於 "CTRL-W i"  和 "CTRL-W i"，但在 [range] 行範圍
			搜索 (缺省: 整個文件)。
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}


							*[d*
[d			顯示第一個包含光標所在的關鍵字的宏定義。搜索從文件頭
			開始。如果給出一個計數，跳轉到第 count 個匹配的行。
			{Vi 無此功能}


							*]d*
]d			類似於 "[d"，但是從當前光標位置開始。{Vi 無此功能}

							*:ds* *:dsearch*
:[range]ds[earch][!] [count] [/]string[/]
			類似於 "[d"  和 "]d"，但在 [range] 行範圍搜索 (缺省: 整
			個文件)。
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}

							*[D*
[D			顯示包含光標下的宏的所有的宏定義。找到的每行都顯示文件
			名和行號。搜索從文件頭開始。{Vi 無此功能}

							*]D*
]D			類似於 "[D"，但是從當前光標位置開始。{Vi 無此功能}

							*:dli* *:dlist*
:[range]dl[ist][!] [/]string[/]
			類似於 "[D" 和 "]D"，但在 [range] 行範圍搜索 (缺省: 整
			個文件)。
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}
			注意 ":dl" 功能同帶 "l" 標誌的 ":delete"。

							*[_CTRL-D*
[ CTRL-D		跳轉到第一個包含光標所在的關鍵字的宏定義。搜索從文件頭
			開始。如果給出一個計數，跳轉到第 count 個匹配的行。
			{Vi 無此功能}

							*]_CTRL-D*
] CTRL-D		類似於 "[ CTRL-D"，但是從當前光標開始。{Vi 無此功能}

							*:dj* *:djump*
:[range]dj[ump][!] [count] [/]string[/]
			類似於 "[ CTRL-D"  和 "] CTRL-D"，但是在 [range] 行范
			圍內搜索 (缺省: 整個文件)。
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}


CTRL-W CTRL-D					*CTRL-W_CTRL-D* *CTRL-W_d*
CTRL-W d		打開一個新窗口，把光標放在第一個包含光標所在的關鍵字的
			宏定義行。搜索從文件頭開始。如果給出一個計數，跳轉到第
			count 個匹配的行。{Vi 無此功能}

							*:dsp* *:dsplit*
:[range]dsp[lit][!] [count] [/]string[/]
			類似於 "CTRL-W d"，但是在 [range] 行範圍內查找
			(缺省: 整個文件).
			關於 [/] 和 [!] 見 |:search-args|。{Vi 無此功能}

							*:che* *:checkpath*
:che[ckpath]		列出所有找不到的頭文件。{Vi 無此功能}

:che[ckpath]!		列出所有的頭文件。{Vi 無此功能}

								*:search-args*
以上命令通用的參數:
[!]   如果包含，查找包括識別為註釋的匹配。如果不包含，則被識別為註釋 (根
      據 'comments' ) 或者是一個 C 註釋 ("//" 之後或者 /* */ 之間) 的行不參加
      匹配。注意 如果一行被識別為註釋，但是註釋在行中間結束，匹配可能丟失。另
      外，如果一行是註釋，但是沒有被識別 (根據 'comments')，還是可能從中找到匹
      配。例子: >
		/* comment
		   foobar */
<     還是可以找到 "foobar" 的匹配，因為該行沒有被識別為註釋 (即使語法高亮能夠
      識別)。
      注意: 因為宏定義一般看起來不像註釋，[!] 對 ":dlist"、":dsearch" 和
      ":djump" 沒有影響。
[/]   模式可以被 '/' 包圍。沒有 '/' 的話，只有完整單詞的匹配，就像使用模式
      "\<pattern\>" 那樣。只有在第二個 '/' 之後，下一個命令才可以通過 '|' 附加
      在後。例如: >
	:isearch /string/ | echo "the last one"
<     對於 ":djump"、":dsplit"、":dlist" 和 ":dsearch" 命令，模式是按本義理解
      的字符串，而不是搜索模式。

 vim:tw=78:ts=8:ft=help:norl:
