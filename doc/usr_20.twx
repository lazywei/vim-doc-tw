*usr_20.txt*	For Vim version 7.3.	最近更新：2005年3月

		     VIM 用戶手冊 - Bram Moolenaar 著
		  譯者： Chimin Yen http://vimcdoc.sf.net 
				    
			     快速鍵入命令行命令

Vim 具備若干基本功能，以簡化鍵入命令的工作。你可以縮寫，編輯和重複冒號命令，而
補全功能幾乎可以用於所有的場合。

|20.1|	命令行編輯
|20.2|	命令行縮寫
|20.3|	命令行補全
|20.4|	命令行歷史
|20.5|	命令行窗口

     下一章: |usr_21.txt|  離開和回來
     前一章: |usr_12.txt|  小竅門
       目錄: |usr_toc.txt|

==============================================================================
*20.1*	命令行編輯

當你用冒號 (:) 命令或用 / 或 ? 搜索一個字符串時，Vim 就會把光標置於屏幕下方。
你在那兒鍵入命令或者搜索模式。此處即稱為命令行，也是用來輸入搜索命令的地方。

最為顯而易見的編輯命令的方法是按 <BS> 退格鍵。按下此鍵即刪去光標前面的字符。如
果要刪去另一個更早鍵入的字符，得先用光標方向鍵把光標移到那兒。

   例如，你鍵入了: >

	:s/col/pig/

在你按下回車鍵之前，你注意到 "col" 應為 "cow"。為了糾正這個錯誤，你按五次
<Left> 鍵。現在，光標正好在 "col" 後面。按 <BS> 鍵，然後鍵入正確的字符 "w": >

	:s/cow/pig/

現在你可以立刻按 <Enter> 鍵了。在執行這個命令之前，你無須先把光標移到命令行的
末尾。

命令行上移動光標時最常用的鍵:

	<Left>			左移一個字符
	<Right>			右移一個字符
	<S-Left> 或 <C-Left>	左移一個單詞
	<S-Right> 或 <C-Right>	右移一個單詞
	CTRL-B 或 <Home>	命令行行首
	CTRL-E 或 <End>		命令行行尾

	備註:
	<S-Left> (光標左移鍵和 Shift 鍵同時按下) 和 <C-Left> (光標左移鍵和
	Control 鍵同時按下) 並非在所有鍵盤上都有效。其它 Shift 和 Control 組合
	鍵也是這種情況。

你也可以用鼠標來移動光標。


刪 除

如前所述，<BS> 鍵刪除光標前一個字符。刪除光標前整個單詞，則用 CTRL-W。

	/the fine pig ~

		     CTRL-W

	/the fine ~

CTRL-U 刪除命令行上全部文字，從而讓你從頭開始。


替 換

插入鍵 <Insert> 讓你在插入字符和替換字符兩種方式之間切換。先鍵入如下文字：

	/the fine pig ~

再按兩次 <S-Left> (或 <S-Left> 無效時按八次 <Left>)，把光標移到 "fine" 起始
處。現在，按插入鍵 <Insert>，切換到替換方式，並鍵入 "great":

	/the greatpig ~

喲，空格沒了。現在，別用 <BS> 鍵，因為那會刪除 "t" (這跟插入方式不同)。此時應
該按插入鍵 <Insert>，從替換方式切換到插入方式，並鍵入空格:

	/the great pig ~


取 消

你本想執行一個 : 或 / 命令，但卻改變了主意。要清除命令行上你已經鍵入的文字卻不
執行該命令，按 CTRL-C 或 <Esc>。

	備註:
	<Esc> 是普遍採用的 "退出" 鍵。不幸的是，在過去美好的 Vi 版本裡，在命令
	行上按 <Esc> 卻是執行命令！由於那會被認為是程序 bug，Vim 採用 <Esc> 來
	取消命令。但其 'cpoptions' 選項可以使 Vim 跟 Vi 兼容。而且，使用映射時
	(那可能是為 Vi 而寫的)，<Esc> 鍵也總和 Vi 兼容。由此看來，採用 CTRL-C
	倒不失為一種永遠奏效的方法。

如果你在命令行開始處，那麼按 <BS> 將取消整個命令。這就像刪除命令行賴以開始的
":" 或 "/"。

==============================================================================
*20.2*	命令行縮寫

有些 ":" 命令確實很長。我們已經提及替代命令 ":substitute" 可以被縮寫成 ":s"。
這是一個基本機理，即所有 ":" 冒號命令都可以被縮寫。

一個命令可以被縮寫成多短呢？英文有 26 個字母，而 Vim 卻有多得多的命令。例如，
":set" 也以 ":s" 開頭，但 ":s" 不是啟動 ":set" 命令的。":set" 可以被縮寫成
":se"。
   把一個命令縮寫得更短即可能適用於兩個命令，此時，該縮寫仍然只能代表其中的一
個。而選擇哪個卻沒有任何邏輯，你不得不一個一個地記。最短的有效縮寫形式可以在幫
助文件裡找到。例如:
>
	:s[ubstitute]

它的意思是替代命令 ":substitute" 的最短縮寫形式是 ":s"。隨後的字符可以任選。因
此 ":su" 和 ":sub" 都有效。

在用戶手冊裡我們有時用命令的全稱，有時簡稱意義明白就用簡稱。例如，":function"
可以縮寫成 ":fu"。但既然大多數讀者不明其所指，所以我們採用簡稱 ":fun"。(Vim 沒
有命令 ":funny"，否則簡稱 ":fun" 也會令人迷惑。)

在 Vim 腳本裡你最好用命令全稱。當你日後改編腳本時，全稱讀起來比較容易。除非那
是一些常用命令如 ":w" (":write") 和 ":r" (":read")。
   一個特別令人迷惑的縮寫是 ":end"，它可以指 ":endif"，":endwhile" 或
":endfunction"。所以，遇到這類命令時，最好永遠採用全稱。


選 項 簡 稱

在用戶手冊裡，我們採用選項的全稱。許多選項還有簡稱。跟 ":" 冒號命令不一樣，有
效的選項簡稱只有一個。例如，'autoindent' 的簡稱是 'ai'。因而下面兩個命令完成同
樣的動作: >

	:set autoindent
	:set ai

你可以從這兒找到完整的選項全稱和簡稱的列表: |option-list|。

==============================================================================
*20.3*	命令行補全

命令行補全是那些僅僅因為它就值得從 Vi 轉到 Vim 的功能之一。一旦你用上了這個功
能，你就離不開它了。

假定你有個文件目錄，其中存放了這些文件:

	info.txt
	intro.txt
	bodyofthepaper.txt

你用這個命令來編輯最後那個文件: >

	:edit bodyofthepaper.txt

這很容易打錯。一個快得多的方法是: >

	:edit b<Tab>

其結果是同樣的命令。這是怎麼回事？製表鍵 <Tab> 會補全光標前的詞。在本例中就是
"b"。Vim 在目錄中尋找並找到了唯一的一個以 "b" 開頭的文件。那個文件想必是你尋找
的，因此 Vim 為你補全了文件名。

現在鍵入: >

	:edit i<Tab>

Vim 會鳴起響鈴，並給你這個結果: >

	:edit info.txt

響鈴的意思是 Vim 找到了不止一個匹配。然後它使用了找到的第一個匹配 (按字母順
序)。如果你再按一次 <Tab>，你得到: >

	:edit intro.txt

這樣，如果第一次 <Tab> 沒給你你要找的文件，你就再按一次。如果還有匹配的文件，
你將會看到它們每一個，每按一次，就看到一個。
   如果你在最後一個匹配文件名上按 <Tab>，你將會再次看到你起初鍵入的那個命令: >

	:edit i

然後一切再從頭開始。這樣，Vim 就在匹配列表內週而復始地循環。使用 CTRL-P 依相反
方向循環匹配列表:

	      <------------------- <Tab> -------------------------+
								  |
		  <Tab> -->		       <Tab> -->
	:edit i		      :edit info.txt		   :edit intro.txt
		  <-- CTRL-P		       <-- CTRL-P
	   |
	   +---------------------- CTRL-P ------------------------>


上 下 文

當你鍵入 ":set i" 而不是 ":edit i"，並按 <Tab>，你得到的是: >

	:set icon

嗨，為什麼你沒得到 ":set info.txt"？這是由於 Vim 的補全功能是上下文相關的。
Vim 尋找的那類詞取決於關鍵詞前面的命令。Vim 知道你不可能在命令 ":set" 後面用一
個文件名，但卻可以用一個選項名。
   同樣，如果你重複鍵入 <Tab>，Vim 就會在所有匹配間週而復始地循環。你最好開始
時多鍵入幾個字符，否則匹配的選項會很多: >

	:set isk<Tab>

結果是: >

	:set iskeyword

現在鍵入 "=" 並按 <Tab>: >

	:set iskeyword=@,48-57,_,192-255

在此，Vim 插入的是該選項原來的設定值。現在你可以編輯它了。
   按 <Tab> 鍵補全的乃是 Vim 在命令行那個位置上所期待的。你不妨試試，看它究竟
是如何補全的。在某些情形下你會得不到你想要的結果。那或者因為 Vim 不知道你要什
麼，或者因為 Vim 還沒有為該情況實現補全功能。在那個場合，你的 <Tab> 就會被當作
字符插入文本 (顯示為 ^I)。


匹 配 列 表

當匹配有很多時，你可能希望看到一個總覽。要看匹配總覽，請按 CTRL-D。例如，你鍵
入了以下命令以後按 CTRL-D: >

	:set is

結果是: >

	:set is
	incsearch  isfname    isident    iskeyword  isprint
	:set is

Vim 列出了匹配，然後又伴隨著你早先鍵入的命令回到命令行。你現在可以檢驗匹配列
表，找你想要的選項了。如果它不在列表中，你可以用 <BS> 修正那個詞。如果匹配太
多了，就在按 <Tab> 鍵補全命令之前再多打幾個字符。
   如果你仔細觀察了，你就會注意到選項 "incsearch" 不是以 "is" 開頭。在這個場
合，"is" 指的就是 "incsearch" 的簡稱。(許多選項都有其簡稱和全稱。) Vim 知道你
可能要把選項的簡稱擴展成全稱，夠聰明的吧。


更 多 選 項

命令 CTRL-L 把詞補全為最長無歧義字符串。如果你鍵入 ":edit i" 而目錄內存放著文
件 "info.txt" 和 "info_backup.txt"，那麼，你將得到 ":edit info"。

選項 'wildmode' 可用來改變補全時採用的方式。
選項 'wildmenu' 可用來取得菜單式的匹配列表。
利用選項 'suffixes' 來指定一些不太重要的文件，並讓它們出現在文件列表末尾。
選項 'wildignore' 指定一些根本用不著表列的文件。

欲知更多此類選項詳情，參見: |cmdline-completion|

==============================================================================
*20.4*	命令行歷史

我們曾經在第三章簡單提到過歷史記錄功能。其基本用法就是你可以用 <Up> 鍵調用較
早的命令行。而 <Down> 鍵則讓你回到較晚的命令行。

歷史記錄功能實際上共有四種。我們在這裡要提到的是用於 ":" 冒號命令以及用於 "/"
和 "?" 搜索命令的歷史記錄功能。"/" 和 "?" 命令共享同一歷史記錄。因為兩者同為搜
索命令。另外兩種歷史記錄功能用於函數 input() 的表達式和輸入行。
|cmdline-history|

假定你完成了一個 ":set" 命令，又鍵入了十個冒號命令，然後要再次執行那個 ":set"
命令。你本可以按一個 ":"，然後按十次 <Up>。更快捷的方法是: >

	:se<Up>

你現在就回到以前執行過的，以 "se" 開頭的命令。沒準兒那就是你想找的 ":set" 命
令。至少你不至於按很多 <Up> 鍵 (除非你執行的都是 ":set" 命令)。

<Up> 鍵用你在命令行上已經鍵入的文本去跟歷史記錄裡的命令作比較。只有匹配的命令
才被顯示出來。
   如果你沒找到你要找的命令，用 <Down> 回到你鍵入的文本作修改。或者用 CTRL-U
從頭來過。

顯示歷史記錄裡所有的命令: >

	:history

那是 ":" 冒號命令的歷史記錄。搜索歷史記錄用這個命令來顯示: >

	:history /

如果你不願用光標方向鍵，CTRL-P 作用就跟 <Up> 一樣。而 CTRL-N 跟 <Down> 一樣。
CTRL-P 意指前一個 (previous)，CTRL-N 意指下一個 (next)。

==============================================================================
*20.5*	命令行窗口

在命令行上鍵入文本跟插入模式下鍵入文本有所不同。許多修改文本的命令都不能用。對
大多數命令而言，那問題不大，但有時你必須鍵入一個複雜的命令。那樣的場合用命令行
窗口就非常有用了。

用這個命令來打開命令行窗口: >

	q:

Vim 現在就在屏幕底部打開了一個 (很小的) 窗口。它存放著命令行歷史記錄，以及一行
空行在末尾:

	+-------------------------------------+
	|other window			      |
	|~				      |
	|file.txt=============================|
	|:e c				      |
	|:e config.h.in			      |
	|:set path=.,/usr/include,,	      |
	|:set iskeyword=@,48-57,_,192-255     |
	|:set is			      |
	|:q				      |
	|:				      |
	|command-line=========================|
	|				      |
	+-------------------------------------+

現在你處於普通模式下。你可以用 "hjkl" 鍵來移動光標。例如，用 "5k" 上移至
":e config.h.in" 那一行。鍵入 "$h" 移到 "in" 的 "i" 字符上，並鍵入 "cwout"。
現在你把這一行改成了這樣:

	:e config.h.out ~

現在按 <Enter> 執行這個命令。命令行窗口就關上了。
按 <Enter> 鍵執行光標下的那個命令。這跟 Vim 處於插入模式抑或普通模式無關。
   在命令行窗口內所作的修改不會被保存。它們不會導致歷史記錄被修改。唯一例外就
是你執行的命令將被加到歷史記錄的末尾，跟所有執行過的命令一樣。

在你要總覽歷史記錄時，命令行窗口十分有用，查找類似命令，修改一點點，然後執行
它。一個搜索命令可用來尋找某些東西。
   在前面那個例子中，搜索命令 "?config" 是可以用來尋找先前那個含有 "config" 的
命令的。這有點兒特別，因為你是在命令行窗口內用命令行作搜索。在鍵入搜索命令時，
你打不開另一個命令行窗口，命令行窗口是唯一的。

==============================================================================

下一章: |usr_21.txt|  離開和返回

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
