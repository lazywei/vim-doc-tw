*usr_07.txt*	For Vim version 7.3.  最近更新：2005年3月

		    Vim用戶手冊 - by Bram Moolenaar
		譯者：Nek_in http://vimcdoc.sf.net

			  編輯多個文件


無論你有多少個文件，你都可以同時編輯它們而不需要退出 Vim。本章介紹如何定義一個
文件列表，並基於這個列表工作，或者從一個文件跳轉到另一個文件，又或者從一個文件
中拷貝文字，並寫入到另一個文件中。

|07.1|	編輯另一個文件
|07.2|	文件列表
|07.3|	從一個文件中跳到另一個文件
|07.4|	備份文件
|07.5|	文件間拷貝
|07.6|	顯示文件
|07.7|	修改文件名

     下一章：|usr_08.txt|  分割窗口
     前一章：|usr_06.txt|  使用語法高亮
       目錄：|usr_toc.txt|

==============================================================================
*07.1*	編輯另一個文件

在本章前，你都是為每一個文件啟動一次 Vim 的。實際上還有其它辦法。如下命令就可
以在 Vim 中打開另一個文件： >

	:edit foo.txt

你可以用任何其它文件名取代上面的 "foo.txt"。Vim 會關閉當前文件並打開另一個。但
如果當前文件被修改過而沒有存盤， Vim 會顯示錯誤信息而不會打開這個新文件：

	E37: No write since last change (use ! to override) ~

	(譯者註：在中文狀態下顯示：

	E37：已修改但尚未保存 (可用 ! 強制執行) ~

	)

	備註:
	Vim 在每個錯誤信息的前面都放了一個錯誤號。如果你不明白錯誤信息的意思，
	可以從幫助系統中獲得更詳細的說明。對本例而言： >

		:help E37

出現上面的情況，你有多個解決方案。首先你可以通過如下命令保存當前文件： >

	:write

或者，你可以強制 Vim 放棄當前修改並編輯新的文件。這時應該使用強制修飾符 ! ：
>
	:edit! foo.txt

如果你想編輯另一個文件，但又不想馬上保存當前文件，可以隱藏它：
>
	:hide edit foo.txt

原來的文件還在那裡，只不過你看不見。這將在 "|22.4|: 緩衝區列表" 中解釋。

==============================================================================
*07.2*	文件列表

你可以在啟動 Vim 的時候指定一堆文件。例如：
>
	vim one.c two.c three.c

這個命令啟動 Vim 並告訴它你要編輯三個文件。Vim 只顯示第一個。等你編輯完第一個
以後，用如下命令可以編輯第二個：
>
	:next

如果你在當前文件中有未保存的修改，你會得到一個錯誤信息而無法編輯下一個文件。這
個問題與前一節執行 ":edit" 命令的問題相同。要放棄當前修改：
>
	:next!

但大多數情況下，你需要保存當前文件再進入下一個。這裡有一個特殊的命令：
>
	:wnext

這相當於執行了兩個命令：
>
	:write
	:next


我 在 哪？

要知道當前文件在文件列表中的位置，可以注意一下文件的標題。那裡應該顯示類似
"(2 of 3)" 的字樣。這表示你正在編輯三個文件中的第二個。
    如果你要查看整個文件列表，使用如下命令：
>
	:args

這是 "arguments" (參數) 的縮寫。其輸出應該像下面這樣：

	one.c [two.c] three.c ~

這裡列出所有你啟動 Vim 時指定的文件。你正在編輯的那一個，例如，"two.c"，會用中
括號括起。


移 動 到 另 一 個 參 數

要回到前一個文件：
>
	:previous

這個命令與 ":next" 相似，只不過它是向相反的方向移動。同樣地，這個命令有一個快
捷版本用於 "保存再移動"：
>
	:wprevious

要移動到列表中的最後一個文件：
>
	:last

而要移動到列表中的第一個文件：
>
	:first

不過，可沒有 ":wlast" 或者 "wfirst" 這樣的命令了。

你可以在 ":next" 和 ":previous" 前面加計數前綴。例如要向後跳兩個文件：
>
	:2next


自 動 保 存

當你在多個文件間跳來跳去進行修改，你要老記著用 ":write" 保存文件。否則你就會得
到一個錯誤信息。 如果你能確定你每次都會將修改存盤的話，你可以讓 Vim 自動保存文
件：
>
	:set autowrite

如果你編輯一個你不想自動保存的文件，你可以把功能關閉：
>
	:set noautowrite


編 輯 另 一 個 文 件 列 表

你可以編輯另一個文件列表而不需要退出 Vim。用如下命令編輯另三個文件：
>
	:args five.c six.c seven.h

或者使用通配符，就像在控制台上一樣：
>
	:args *.txt

Vim 會跳轉到列表中的第一個文件。同樣地，如果當前文件沒有保存，你需要保存它，或
者使用 ":args!" (加了一個 !) 放棄修改。


你 編 輯 了 最 後 一 個 文 件 嗎？
							*arglist-quit*
當你使用了文件列表，Vim 假定你想編輯全部文件，為了防止你提前退出，如果你還沒有
編輯過最後一個文件。當你退出的時候，Vim 會給如下錯誤信息：
>
	E173: 46 more files to edit

如果你確實需要退出，再執行一次這個命令就行了 (但如果在兩個命令間還執行了其它命
令就無效了)。

==============================================================================
*07.3*	從一個文件跳到另一個文件

要在兩個文件間快速跳轉，按 CTRL-^ (美式英語鍵盤中 ^ 6 的上面)。例如：
>
	:args one.c two.c three.c

現在你在 one.c。
>
	:next

現在你在 two.c。現在使用 CTRL-^ 回到 one.c。再按一下 CTRL-^ 則回到 two.c。又按
一下 CTRL-^ 你再回到 one.c。如果你現在執行：
>
	:next

現在你在 three.c。注意 CTRL-^ 不會改變你在文件列表中的位置。只有 ":next" 和
":previous" 才能做到這點。

你編輯的前一個文件稱為 "輪換" 文件。如果你啟動 Vim 而 CTRL-^ 不起作用，那可能
是因為你沒有輪換文件。

預 定 義 標 記

當你跳轉到另一個文件後，有兩個預定義的標記非常有用：
>
	`"

這個標記使你跳轉到你上次離開這個文件時的位置。
另一個標記記住你最後一次修改文件的位置：
>
	`.

假設你在編輯 "one.txt"，在文件中間某個地方你用 "x" 刪除一個字符，接著用 "G" 命
令移到文件末尾，然後用 "w" 存盤。然後你又編輯了其它幾個文件。你現在用 ":edit
one.txt" 回到 "one.txt"。如果現在你用 `"，Vim 會跳轉到文件的最後一行；而用 `.
則跳轉到你刪除字符的地方。即使你在文件中移動過，但在你修改或者離開文件前，這兩
個標記都不會改變。


文 件 標 記

在第四章，我們介紹過使用 "mx" 命令在文件中增加標記，那只在一個文件中有效。如果
你編輯另一個文件並在那裡加了標記，這些標記都是這個文件專用的。這樣，每個文件都
有一個自己的標記集，並只能在該文件中使用。
    到此為止，我們都用小寫字母的標記。實際上還可以使用大寫字母標記，這種標記是
全局的，它們可以在任何文件中使用。例如，你在編輯一個文件 "foo.txt"。在文件的中
間 (50%) 並建立一個 J 標記 (J 表示甲)：
>
	50%mJ

現在編輯文件 "bar.txt" 並在文件的最後一行放一個標記 Y (Y 表示乙)：
>
	GmY

現在你可以使用 "`J" 命令跳回到 foo.txt 的中間。或者在另一個文件中輸入 "`Y" 跳
回到 bar.txt 的末尾。

文件標記會被一直記住直到被重新定義。這樣，你可以在一個文件中留下一個標記，然後
任意做一段時間的編輯，最後用這個標記跳回去。
    讓文件標記符和對應的位置建立一些關係常常是很有用的。例如，用 H 表示頭文件
(Head File)，M 表示 Makefile 而 C 表示 C 的代碼文件。

要知道一個標記在什麼地方，在 ":marks" 命令中加上標記名作為參數即可：
>
	:marks M

你還可以帶多個參數：
>
	:marks MCP

別忘了你還可以 CTRL-O 和 CTRL-I 在整個跳轉序列中前後跳轉。

==============================================================================
*07.4*	備份文件

通常 Vim 不會產生備份文件。如果你希望的話，執行如下命令就可以了：
>
	:set backup

備份文件的文件名是在原始文件的後面加上一個 ~ 。如果你的文件名是 data.txt，則備
份文件的文件名就是 data.txt~ 。
    如果你不喜歡這個名字，你可以修改擴展名：
>
	:set backupext=.bak

這會使用 data.txt.bak 而非 data.txt~。
    還有一個相關選項是 'backupdir'。它指定備份文件的目錄。默認情況是與原始文件
的路徑一致，這在很多情況下都是合適的。

	備註:
	如果 'backup' 選項沒有置位而 'writebackup' 選項置了位，Vim 還是會創建
	備份文件的。但在文件編輯完後，這個備份文件會被自動刪除。這個功能用於避
	免發生異常情況導致沒有存盤 (磁盤滿是最常見的情況；被雷擊也是一種情況，
	不過很少發生)。


保 留 原 始 文 件

如果你在編輯源程序，你可能想在修改之前保留一個備份。但備份文件會在你存盤的時候
被覆蓋。這樣它只能保留前一個版本，而不是最早的文件。
    要讓 Vim 保存一個原始的文件，可以設置 'patchmode' 選項。這個選項定義需要改
動文件的第一個備份文件的擴展名。通常可以這樣設：
>
	:set patchmode=.orig

這樣，當你第一次編輯 data.txt，作了修改並執行存盤，Vim 會保留一個名為
"data.txt.orig" 的原始文件。
    如果你接著修改這個文件，Vim 會發現這個原始文件已經存在，並不再覆蓋它。進一
步的備份就存在 "data.txt~" (或者你設置的 'backupext' 指定的文件) 中。
    如果你讓 'patchmode' 設為空 (這是默認的情況)，則原始文件不會被保留。

==============================================================================
*07.5*	文件間拷貝文本

本節解釋如何在文件間拷貝文本。我們從一個簡單的例子開始。編輯一個你要拷貝文本的
文件，把光標移到要拷貝的文本的開始處，用 "v" 命令啟動可視模式，然後把光標移到
要拷貝文本的結尾處，輸入 "y" 拷貝文本。
    例如，要拷貝上面這段文字，你可以執行：
>
	:edit thisfile
	/本節解釋
	vjjj$y

現在編輯你要粘貼文本的文件。把光標移到你要插入文本的地方。用 "p" 命令把文本粘
貼到那裡：
>
	:edit otherfile
	/There
	p

當然，你可以用任何命令拷貝文本。例如，用 "V" 命令選中整行的內容。或者用 CTRL-V
選擇一個矩形列塊。或者使用 "Y" 拷貝一個單行，"yaw" 拷貝一個單詞等。
    "p" 命令把文本粘貼到光標之後，"P" 命令則粘貼到光標之前。注意， Vim 會記住
你拷貝的是一整行還是一個列塊，並用相同的方式把文本貼出來。


使 用 寄 存 器

當你需要拷貝一個文件的幾個地方到另一個文件，用上面的方法，你就得反覆在兩個文件
間跳來跳去。要避免這種情況，你可以把不同的文本拷貝到不同的寄存器中。
    寄存器是 Vim 用來保存文本的地方。這裡我們使用名稱為 a 到 z 的寄存器 (後面
我們會發現還有其它寄存器)。讓我們拷貝一個句子到 f 寄存器 (f 表示 First)：
>
	"fyas

"yas" 命令像以前說過的那樣拷貝一個句子，而 "f 告訴 Vim 把文本拷貝到寄存器 f 。
這必須放在拷貝命令的前面。
    現在，拷貝三個整行到寄存器 l (l 表示 line)：
>
	"l3Y

計數前綴也可以用在 "l 的前面。要拷貝一個文本列塊到寄存器 b (代表 block) 中：
>
	CTRL-Vjjww"by

注意 "b 正好在 "y" 命令的前面，這是必須的。把它放在 "w" 命令的前面就不行。
    現在你有了在寄存器 f，l 和 b 有三段文本。編輯另一個文件，並移到要插入文本
的地方：
>
	"fp

同樣地，寄存器標識符 "f 必須在 "p" 命令的前面。
    你可以用任何順序粘貼寄存器的內容。並且，這些內容一直存在於寄存器中，直到你
拷貝其它文件到這個寄存器中。這樣，你可以粘貼任意多次。

    刪除文本的時候，你也可以指定寄存器。使用這個方法可以移動幾處文本。例如，要
刪除一個單詞並寫到 w 寄存器中：
>
	"wdaw

同樣地，寄存器標識符必須在刪除命令 "d" 的前面。


添 加 到 文 件

當你要在幾個文件中收集文本，你可以用這個命令：
>
	:write >> logfile

這個命令將文本寫入到文件的末尾。這樣實現了文件添加功能。這樣使你免去了拷貝，編
輯和拷貝的過程，省了兩步。但你只能加到目標文件的末尾。
    要只拷貝一部分內容，可以先用可視模式選中這些內容後在執行 ":write"。在第 10
章，你將學會選中一個行範圍的辦法。

==============================================================================
*07.6*	顯示文件

有時，你只是想查看一個文件，而沒打算修改它。有一個風險是你想都沒想就輸入了一個
"w" 命令。要避免這個問題，以只讀模式編輯這個文件。
    要用只讀模式啟動 Vim，可以使用這個命令：
>
	vim -R file

在 Unix，如下命令可以完成相同的功能：
>
	view file

現在，你就在用只讀模式閱讀這個文件 "file" 了。但你執行 ":w" 命令的時候，你會得
到一個禁止寫入的錯誤信息。
    當你試圖修改這個文件時，Vim 會給你一個告警提示：

	W10: Warning: Changing a readonly file ~

即使這樣，你的修改還是會被接納的。有可能你只是想排列這些文本，以便閱讀。
    如果你確實要改動這個文件，在 write 命令前面加上 ! 可以強制寫入。

如果你的確想禁止文件修改，用這個命令：
>
	vim -M file

現在任何對文件的修改操作都會失敗。例如，幫助文件就是這樣的。如果你要在上面作修
改，你會得到一個錯誤提示：

	E21: Cannot make changes, 'modifiable' is off ~

你可以設置 -M 參數使 Vim 工作在只讀模式。這個方式仍然取決於用戶的意願，因為你
可以用下面的命令去掉這層保護：
>
	:set modifiable
	:set write
<
==============================================================================
*07.7*	修改文件名

編輯一個新文件的一個比較聰明的做法是使用一個現存的、其中大部分內容你都需要的文
件。例如，你要寫一個移動文件的程序，而你已經有一個用於拷貝的程序了，這樣可以這
樣開始：
>
	:edit copy.c

刪除你不要的東西。現在你需要用一個新的文件名保存這個文件。":saveas" 命令就是為
此設計的：
>
	:saveas move.c

Vim 會用給定的名稱保存文件，並開始編輯該文件。這樣，下次你用 ":write"，寫入的
時候，被寫入的就是 "move.c"。而 "copy.c" 不會被改變。
    當你想改變當前文件的文件名，但不想立即保存它，用這個命令：
>
	:file move.c

Vim 會把這個文件標記為 "未編輯"。這表示 Vim 知道你現在編輯的文件不是原來那個文
件了。當你寫這個文件的時候，你會得到如下錯誤信息：

	E13: File exists (use ! to override) ~

這可以避免你不小心覆蓋另一個文件。

==============================================================================

下一章：|usr_08.txt|  分割窗口

版權：參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
