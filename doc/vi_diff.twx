*vi_diff.txt*   For Vim version 7.3.  最近更新: 2010年7月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net


Vim 和 Vi 的差異					*vi-differences*

在各個幫助文件裡，Vim 和 Vi/Ex 的差異在花括號裡給出，如 "{Vi 無此功能}"。本文
件只列出其餘各處未列出之處，並給出一個總覽。

Vim 基本上遵守 POSIX 1003.2-1。唯一只知缺少的命令是 ":open"。還有眾多小的差異
(或者因為 Vim 的缺失，或者因為此處並不涉及 Posix)。

1. 模擬的命令				|simulated-command|
2. 缺失的選項				|missing-options|
3. 限制					|limits|
4. 最有意思的新增功能			|vim-additions|
5. 其它 Vim 特色			|other-features|
6. 命令行參數				|cmdline-arguments|
7. POSIX 相容性				|posix-compliance|

==============================================================================
1. 模擬的命令						*simulated-command*

該命令在 Vi 存在，但 Vim 只是對它進行模擬:

							*:o* *:op* *:open*
:[range]o[pen]			類似於 |:visual|: 結束 Ex 模式。
				{Vi: 在打開模式開始編輯}

:[range]o[pen] /pattern/	同上，另外移動光標到光標行上匹配 "pattern" 的
				列。

Vim 不支持 open 模式，因為它其實沒什麼用。對於那些 ":open" 會啟動 open 模式的
情形，Vim 會離開 Ex 模式，你可以執行相同的命令，但刷新的是整個屏幕而不是只有一
行。

==============================================================================
2. 缺失的選項						*missing-options*

這些選項只有在 Unix Vi 裡存在，但 Vim 沒有。如果你試圖設置這些選項，你不會得到
錯誤消息。但你給出的值不會使用和顯示。

autoprint (ap)		布爾型	(缺省打開)		*'autoprint'* *'ap'*
beautify (bf)		布爾型	(缺省關閉)		*'beautify'* *'bf'*
flash (fl)		布爾型	(缺省未知)		*'flash'* *'fl'*
graphic (gr)		布爾型	(缺省關閉)		*'graphic'* *'gr'*
hardtabs (ht)		數值型	(缺省 8)		*'hardtabs'* *'ht'*
	<Tab> 顯示時移動的空白的數目
mesg			布爾型	(缺省打開)		*'mesg'*
novice			布爾型	(缺省關閉)		*'novice'*
open			布爾型	(缺省打開)		*'open'*
optimize (op)		布爾型	(缺省關閉)		*'optimize'* *'op'*
redraw			布爾型	(缺省關閉)		*'redraw'*
slowopen (slow)		布爾型	(缺省關閉)		*'slowopen'* *'slow'*
sourceany		布爾型	(缺省關閉)		*'sourceany'*
w300			數值型	(缺省 23)		*'w300'*
w1200			數值型	(缺省 23)		*'w1200'*
w9600			數值型	(缺省 23)		*'w9600'*

==============================================================================
3. 限制							*limits*

Vim 有一些關於能夠編輯的文件的限制 {Vi: 不能處理 <Nul> 和超過 128 的字符，行長
有限制，還有其它的限制}。
							*E340*
最大行長		   在 16 位整數的機器上，(Amiga 和 MS-DOS 實模式):
			   32767，否則 2147483647 個字符。更長的行被分割。
最大行數		   2147483647 行。
最大文件大小		   2147483647 字節 (2 千兆) 如果長整數是 32 位。對於
			   64 位的長整型，則更多。另外對於 |swap-file| 而言，
			   也受限於磁盤可用空間。
							*E75*
文件路徑長度		   Unix 和 Win32: 1024 字符，否則 256 字符 (或系統能支
			   持的最大值)。
擴展後字符選項的長度	   Unix 和 Win32: 1024 字符，否則 256 字符
最大顯示寬度		   Unix 和 Win32: 1024 字符，否則 255 字符
最大映射左手邊序列	   50 個字符。
不同高亮類型數目:	   超過 30000
數值類型的範圍:		   -2147483648 到 2147483647 (64 位系統上更大)


撤銷信息和寄存器內的文本保存在內存裡，因為做 (大的) 改變時，可用的 (虛擬) 內存
限制了撤銷的層數和能保存在寄存器裡的文本。其它在內存裡的信息包括: 命令行歷史、
QuickFix 模式的錯誤信息，等等。

內存使用限制
-------------------

'maxmem' ('mm') 選項用來設置單個緩衝區可用的最大內存 (以千字節計)。'maxmemtot'
用來設置所有緩衝區可用的最大內存 (以千字節計)。它們的缺省值視系統而定。在
Amiga 和 MS-DOS 上，'maxmemtot' 的設置根據可用的內存決定。
這不是硬性限制，只是用來告訴 Vim 什麼時候把文本移到交換文件。
如果你不喜歡 Vim 交換到文件上，設置 'maxmem' 和 'maxmemtot' 為非常大的值。交換
文件這時只會作恢復用。如果你完全不想要交換文件，設置 'updatecount' 為 0，或者
在啟動 Vim 時加上 "-n" 參數。

==============================================================================
4. 最有意思的新增功能					*vim-additions*

Vi 兼容性。						|'compatible'|
	儘管 Vim 99% 和 Vi 兼容，有些 Vi 的特性被認為是漏洞，或至少需要改進。
	不過，Vim 啟動時盡量和 "真正的" Vi 行為相似。要使得 Vim 行為有所改進，
	試試復位 'compatible' 選項:
		:set nocompatible
	或者啟動 Vim 時帶上 "-N" 參數:
		vim -N
	如果你有 .vimrc 文件，Vim 啟動時自動置位 'nocompatible'。見
	|startup|。
	'cpoptions' 選項可以設置若干專門項目的 Vi 兼容性。

支持不同的系統。
	Vim 可以用在:
	- 所有的 Unix 系統 (所有測試過的系統都沒有問題。不過，GUI 和 Perl 接口
	  不一定哪裡都可以用)。
	- Amiga (500、1000、1200、2000、3000、4000、...)。
	- 實模式下 MS-DOS (無需附加驅動)。
	- 保護模式下的 Windows 3.1 和 MS-DOS (需要 DPMI 驅動)。
	- Windows 95 和 Windows NT，支持長文件名。
	- OS/2 (需要 emx.dll)
	- Atari MiNT
	- VMS
	- BeOS
	- Macintosh
	- Risc OS
	- IBM OS/390
	注意 在有的系統上需要關閉一些特性來節省資源的使用，尤其是 MS-DOS。有的
	老舊的系統上你需要使用舊一點的 Vim 版本。

多次撤銷。						|undo|
	'u' 在時間點上往後退。'CTRL-R' 則往前走。'undolevels' 選項可以設置能記
	住的改變數目 (缺省為 1000)。如果 'undolevels' 設為 0，就能得到 vi-兼容
	的單次撤銷行為。設為 -1 則完全關閉撤銷功能。
	如果緩衝區所有的改變都被撤銷，緩衝區不再被認為改變過。這時，你可以用
	:q 退出，不用 <!>。
	撤銷一些改變然後又做了新的改編後，Vim 在撤銷樹上建立一個分支。這意味著
	你可以回到文本過去的任何狀態，任何改變都不會有丟失文本的風險。
	|undo-tree|

圖形用戶界面 (GUI)。					|gui|
	包括對 GUI 的支持: 菜單、鼠標、滾動條，等等。你可以定義自己的菜單。更
	好支持供對 CTRL/SHIFT/ALT 鍵加特殊鍵/鼠標鍵的組合。支持多種平台，比如
	X11 (Motif 和 Athena 界面)、GTK、Win32 (Windows 95 和其後版本)、BeOS、
	Amiga 和 Macintosh。

多重窗口和緩衝區。					|windows.txt|
	Vim 可以把屏幕分割為多個窗口，每個編輯一個不同的緩衝區，或者在不同位置
	的同一緩衝區。緩衝區可以被載入 (和改變)，但是不一定在窗口裡顯示。這被
	稱為隱藏緩衝區。為了支持這個機制，增加了許多命令和選項。
	Vim 也可以使用多重標籤頁。每個標籤頁由一個或多個窗口。使用包含所有標籤
	頁標籤的一行可以快速在這些頁面之間切換。|tab-page|

語法高亮。						|:syntax|
	Vim 可以高亮關鍵字、模式和其它。這由若干 |:syntax| 命令定義，而能實現
	大多數語言和文件類型的高亮。Vim 包含了諸多文件提供大多數語言的高亮，比
	如 C、C++、Java、Pascal、Makefile、外殼腳本等等。高亮所用的顏色可以為
	普通終端、色彩終端和 GUI 用 |:highlight| 分別定義。一個方便的方式是使
	用 |:colorscheme| 命令。
	高亮的文本可以匯出為 HTML 格式。|convert-to-HTML|
	其它可以高亮的項目包括搜索字符串的匹配 |'hlsearch'|，匹配的括號
	|matchparen| 和光標所在的行和列 |'cursorline'| |'cursorcolumn'|。

拼寫檢查。						|spell|
	如果置位 'spell' 選項，Vim 會高亮拼寫錯誤。現在支持大約 40 種語言，用
	'spelllang' 選項選擇。源代碼中，只檢查註釋和字符串的拼寫。

折疊。							|folding|
	一個範圍內的行可以顯示為單個 "折疊" 行。這樣允許概覽文件並快速移過大段
	文字。折疊可以手動創建，也可以基於語法、縮進等等創立。

diff 模式。						|diff|
	Vim 可以顯示文件的兩個版本並高亮兩者的差異。相同的文本部分用折疊關掉。
	相關命令可以用來從一個版本把文本移到另一個版本。

插件。							|add-plugin|
	把插件文件放在合適的目錄下就可以對基本功能擴展。這是一個啟動 Vim 時執
	行別人寫的 Vim 腳本的簡便方法。插件可以應用在所有文件上，或者為某個文
	件類型特別編寫。

重複命令序列。						|q|
	"q{c}" 開始記錄輸入的字符，並保存在命名寄存器 {c} 裡。另一個 "q" 停止
	記錄。該寄存器可以通過 "@{c}" 命令執行。這對重複一個複雜的序列十分有
	用。

靈活的插入模式。					|ins-special-special|
	插入模式下，光標鍵可以用來在文件移動。就撤銷/重做而言，這使得插入內容
	分成不同的部分。

	CTRL-O 可以用來執行單個普通模式的命令。這和按 <Esc> 輸入命令，再按 |a|
	幾乎相同。

可視模式。						|Visual-mode|
	可視模式可以用來先高亮選擇一段文本並執行一個命令在其上。這是一個代替先
	給出操作符，然後移動到待操作文本的尾部的 (容易使用的) 替代方法。
	|v| 和 |V| 用來開始可視模式，|v| 作用於字符上，|V| 作用於行上。移動光
	標可以擴展可視的部分。屏幕上以高亮顯示該部分。輸入 "o"，可視文本的另一
	端也可移動。可視文本可以被一個操作符影響:
		d	刪除
		c	修改
		y	抽出
		> 或 <	插入和刪除縮進
		!	通過外部程序過濾
		=	使用排版機制過濾
		:	對可視行開始 |:| 命令。
		gq	'textwidth' 列內的文本進行排版
		J	連接行
		~	交換大小寫
		u	改變為小寫
		U	改變為大寫

列塊操作符。						|visual-block|
	可以用可視模式選擇一個文本列塊。用 CTRL-V 開始可視模式。該列塊可以被刪
	除 ("d")，抽出 ("y") 和改變大小寫 ("~"、"u" 和 "U")。被刪除和抽出的列
	塊可以用 "p" 和 "P" 命令放回文本中。

幫助系統。						|:help|
	幫助顯示在一個窗口中。可以使用常見的命令移動，搜索，等等。標籤可以用來
	在幫助文件間跳轉，就像超鏈接一樣。|:help| 命令需要一個參數，可以快速跳
	到某主題的信息。<F1> 能快速訪問到幫助系統。幫助索引文件名可以用
	"helpfile" 選項設置。

命令行編輯和歷史。					|cmdline-editing|
	使用光標，你可以在命令行的任何位置插入或者刪除。右/左光標鍵可以用來前
	移/後移一個字符。Shift + 右/左光標鍵可以用來前移/後移一個單詞。
	CTRL-B/CTRL-E 可以用來跳轉到命令行的開始和結束位置。

							|cmdline-history|
	會記住命令行。上/下光標鍵可以用來記起以前的命令行。'history' 選項可以
	設置能記住的行數。命令行和搜索模式的歷史分別記憶。

命令行補全。						|cmdline-completion|
	輸入一個命令行 (在屏幕的最底行) 時，<Tab> 可以用來補全
	   什麼		例子~
	- 命令		:e<Tab>
	- 標籤		:ta scr<Tab>
	- 選項		:set sc<Tab>
	- 選項值	:set hf=<Tab>
	- 文件名	:e ve<Tab>
	- 等等

	如果有多個匹配，CTRL-N (下一個) 和 CTRL-P (前一個) 會遍歷各個匹配。
	<Tab> 和 CTRL-N 類似，但會迴繞到第一個匹配。

	'wildchar' 選項可以設置進行命令行補全的字符。<Tab> 是缺省值。CTRL-D 可
	以在 (不完全) 通配符後輸入；所有的匹配都會被列出。CTRL-A 會插入所有的
	匹配，CTRL-L 會插入所有匹配的最長的共同部分。

插入模式補全。						|ins-completion|
	在插入模式下，CTRL-N 和 CTRL-P 鍵可以用來補全別的地方出現過的單詞。
							|i_CTRL-N|
	CTRL-X 進入另外一個模式，完成一些補全:
	|i_CTRL-X_CTRL-F|	文件名
	|i_CTRL-X_CTRL-K|	'dictionary' 文件的單詞
	|i_CTRL-X_CTRL-T|	'thesaurus' 文件的單詞
	|i_CTRL-X_CTRL-I|	頭文件的單詞
	|i_CTRL-X_CTRL-L|	整行
	|i_CTRL-X_CTRL-]|	標籤文件的單詞
	|i_CTRL-X_CTRL-D|	定義或者宏
	|i_CTRL-X_CTRL-O|	全能補全: 為不同文件類型分別定制的智能補全
	等等

長行支持。						|'wrap'| |'linebreak'|
	如果 'wrap' 選項關閉，長行不會迴繞，只有部分的內容會被顯示。如果光標移
	動到未顯示的部分，屏幕會水平滾動。最少滾動的列數由 'sidescroll' 選項決
	定。|zh| 和 |zl| 命令可用來向邊框滾動。
	另一種方法是，長行可以在 'linebreak' 選項置位時，在單詞間斷開。這使得
	單行段落的編輯較為便利 (例如，後來把文本讀到 DTP 程序時)。用 |gk| 和
	|gj| 命令上下移動光標。

文本排版。						|formatting|
	'textwidth' 選項可以用來自動限制行的長度。這可以補充 Vi 的
	'wrapmargin' 選項，後者並不十分有用。|gq| 操作符可以用來排版一段文本
	(例如，|gqap| 排版整個段落) 。文本對齊的命令: |:center|、|:left| 和
	|:right|。

擴展的搜索模式。					|pattern|
	為了匹配各種文本項目，提供了很多附加的模式。例如: "\n"
	可以用來在模式中匹配換行符。
	"x\{2,4}" 匹配 "x" 2 到 4 次。
	"\s" 匹配單個空白字符。

目錄、遠程和歸檔瀏覽。					|netrw|
	Vim 可以瀏覽文件系統。簡單編輯一個目錄。在列表裡用通常的命令移動，然後
	按 <Enter> 進入光標所在的目錄或文件。
	也能用於通過 ftp、http、ssh 等連接的遠程文件。
	也能瀏覽 zip 和 tar 歸檔。|tar| |zip|

加快編輯-編譯-編輯循環。				|quickfix|
	|:make| 命令可以用來執行編譯，並跳轉到第一個錯誤。然後對編譯器錯誤信息
	構成的文件進行解釋。這時，Vim 開始編輯第一個錯誤。

	錯誤文件的每一行被檢索一個文件名，行號，和錯誤信息。'errorformat' 選項
	可以設置類似於 scanf 格式的字符串列表，從可以處理很多編譯器的輸出。

	|:cn| 命令可以用來跳轉到下一個錯誤。
	|:cl| 列出所有的錯誤信息。還有其他的命令。
	'makeef' 選項指出錯誤信息的文件名。
	'makeprg' 選項包含 |:make| 命令要執行的程序名。
	'shellpipe' 選項包含用來把編譯器的結果輸出到錯誤信息的命令字符串。

在文件中尋找匹配。					|:vimgrep|
	Vim 可以在多個文件中搜索模式。可以使用先進的 Vim 正規表達式模式，適用
	於所有系統，同時也能在壓縮文件裡搜索。

改進的程序縮進。					|'cindent'|
	'cindent' 選項打開時，每行的縮進被自動調整。大部分的 C 語法能夠識別。
	各種風格的縮進可以用 'cinoptions' 設置。切換縮進的鍵可以用 'cinkeys'
	來設置。

	註釋可以自動排版。'comments' 選項設置開始和結束註釋的字符。這對 C 代碼
	最有效，但是對 e-mail 也適用 (行首的 ">") 和其他類型的文本。|=| 操作符
	可以用來重新排版行。

	許多其他的語言包含了縮進插件，支持自動縮進。|30.3|

搜索頭文件裡的單詞。					|include-search|
	|[i| 命令可以用來搜索光標下的單詞在當前和包含的頭文件裡的匹配。
	'include' 選項可以設置描述包含文件的命令的模式 (缺省是為 C 程序設計)。
	|[I| 命令列出所有的匹配。|[_CTRL-I| 命令跳轉到一個匹配。
	|[d|、|[D| 和 |[_CTRL-D| 命令做相同的事情，不過只查找用 'define'
	選項給出的模式匹配的行。

自動命令。						|autocommand|
	在讀寫文件，跳轉到別的緩衝區等等時候，可以根據文件名，自動執行命令。這
	對設置 C 程序、文檔、普通文本、e-mail 等等的選項和映射有用。這也使得編
	輯壓縮文件成為可能。

腳本和表達式。						|expression|
	增加了命令，可以組成強大的腳本語言。
	|:if|		條件執行，比如可以用來根據 $TERM 的值設置不同選項。
	|:while|	重複一系列命令。
	|:for|		遍歷列表。
	|:echo|		顯示表達式的結果。
	|:let|		給一個內部變量、選項等賦值。
			變量類型包括數值、字符串、列表和字典。
	|:execute|	執行表達式構造的命令。
	|:try|		捕獲例外。
	等等，等等。見 |eval|。
	支持調試和刨視。|debug-scripts| |profile|
	如果還不夠，提供了到 |Python|、|Ruby|、|Tcl|、|Lua|、|Perl| 和
	|MzScheme| 的接口。

Viminfo。						|viminfo-file|
	命令行歷史，位置標記，和寄存器可以存在一個在啟動時讀入的文件裡。這可以
	用來在退出和重啟 Vim 時重複上次的搜索或命令行命令。也可以用 |'0|
	跳轉回最近一次的編輯。'viminfo' 選項可以設置選項什麼內容存儲在
	.viminfo 文件裡。缺省該功能是關閉的。

打印。							|printing|
	|:hardcopy| 命令發送文本給打印機。可以包含語法高亮。

鼠標支持。						|mouse-using|
	支持鼠標的環境包括 GUI 版本、Unix 的 xterm、支持 sysmouse 的 BSD、支持
	gpm 的 Linux、MS-DOS 和 Win32。它也可用於定位光標，選擇可視區域、粘貼
	寄存器，等等。

鍵名的使用。						|<>| |key-notation|
	特殊鍵現在都有名字，類似於 <Up>、<End>，等等。名字可以用來映射，使編
	輯變得方便。

編輯二進制文件。					|edit-binary|
	Vim 可以編輯二進制文件。你可以修改可執行文件的若干字符，而不會破壞其它
	內容。 Vim 不會刪除 NUL 字符 (內部，它們被表示成 <NL>)。
	|-b|		開始編輯二進制文件的命令行參數
	|'binary'|	|-b| 設置的選項。防止在文件最後一行增加 <EOL>。

多語言支持。						|multi-lang|
	可以編輯雙字節或者多字節編碼的文件。使用 UTF-8 支持可以同時編輯各種語
	言，而無須切換字體。|UTF-8|
	消息和菜單可以用多種語言提供。

移到光標到行外。
	如果設置 'virtualedit' 選項，光標可以移動到屏幕的任何位置，包括沒有文
	本的地方。可以用於很方便地編輯表格和圖表。

==============================================================================
5. 其它 Vim 特色					*other-features*

隨機選取的一些其他的優美特色的列表。


Vim 以 "-s scriptfile" 啟動時，"scriptfile" 讀取的字符就像你輸入的那樣。如果在
編輯器還沒退出時文件結束，多餘的字符從控制台讀入。

"-w" 選項用來把所有的輸入字符記錄在腳本文件裡。該文件可以用來重做編輯的操作，
甚至可以作用在通過修改腳本文件裡的一些命令後作用在別的文件上。

"-o" 選項為每個參數打開一個窗口。"-o4" 則打開四個窗口。

要能在全屏工作，Vi 需要幾項 termcap 項目。Vim 只要 "cm" 項目 (光標移動)。


命令模式下:

'showcmd' 選項置位時，命令字符在屏幕末行上顯示。命令結束時它們被刪除。

如果置位了 'ruler' 選項，當前的光標位置顯示在屏幕末行。

"U" 在離開最近修改的行和 "u" 之後都還能工作。

能顯示設置了第 8 位的字符。'~' 和 0xa0 之間的字符顯示為 "~?"、 "~@"、"~A"，等
等。除非它們包含在 'isprint' 選項裡。

"][" 跳到 C 函數的下一個結束處 (第一列的 '}')。
"[]" 轉到 C 函數的前一個結束處 (第一列的 '}')。

"]f"、"[f" 和 "gf" 開始編輯光標所在的文件名。
CTRL-W f 分割窗口，並開始編輯光標所在的文件名。

"*" 正向搜索光標所在的標識符，"#" 反向搜索之。
"K" 運行 'keywordprg' 選項定義的程序，使用光標所在的標識符作為參數。

"%" 可以在前面加一個計數。光標跳轉到文件該百分比所處的行。普通的 "%" 功能則跳
轉到匹配的括號上，引號裡的括號跳過。

CTRL-] 命令可以在光標位於標識符中間時使用。

記住用過的標籤。使用標籤棧的命令包括 CTRL-T、":pop" 和 ":tag"。":tags" 列出標
簽棧。

'tags' 選項可以設置標籤文件名字的列表。可以指定多個標籤文件。"./" 開始的文件名
裡，"./" 被當前文件所在的路徑所代替。這樣可以指定編輯中的文件的相同目錄下的標
簽文件。

以前用過的文件名被記在輪換文件名列表裡。
CTRL-^ 接受一個計數，指定列表的一個索引。
":files" 命令顯示輪換文件名列表。
"#<N>" 被替換成列表中第 <N> 個輪換文件名。
"#<" 被替換成不帶擴展名的當前文件名。

搜索模式可以使用更多特性。<NL> 字符被看成搜索模式和 ":s" 的替換字符串的一部
分。Vi 把它看成命令的結束。

搜索可以把光標放在匹配的結束處，還可以包括一個字符位移。

計數可以應用於 "~"、":next"、":Next"、"n" 和 "N"。

":next!" 命令在置位 'autowrite' 時，不寫入文件。過去，vi 寫入文件，但這被認為
是一個漏洞，因為用戶不期待該行為，而且 ":rewind!" 也不寫入文件。

Vi 在替換模式下輸入 <CR> 時，只有置位 'ai' 以後才刪除一個字符 (但直到你按
<Esc> 時才看到)。Vim 在任何情況下都刪除一個字符 (並立即顯示)。

增加了 :wnext 命令。和 ":write" 接著 ":next" 相同。

":w!" 命令總是寫入，即使文件寫保護時也是如此。Vi 裡你需要先執行 ":!chmod +w %"
和 ":set noro"。

置位 'tildeop' 以後，"~" 是操作符 (一定要跟在移動命令之後使用)。

"J" (連接) 命令裡，你可以復位 'joinspaces' 選項，使得句號之後只有一個空格 (Vi
插入兩個空格)。

"cw" 可以用來改變多個字符組成的空白 (Vi 則不明確: "cw" 只改變一個空格，而 "dw"
刪除所有的空白)。

"o" 和 "O" 接受計數，以便重複插入的部分 (Vi 清除部分的顯示)。

不支持 Ex 命令之後的標誌位 (也無實現它的計劃)。

非 UNIX 系統上，":cd" 命令顯示當前的目錄，而不是轉到主目錄 (因為沒有)。":pwd"
在所有的系統上顯示當前目錄。

":cd" 命令之後，文件名 (參數列表和打開的文件) 仍然指向原來的文件。Vi 裡，改動
過的文件裡不允許執行 ":cd"，否則文件名的含義就改變了。

":source!" 命令從文件裡讀取 Vi 命令。

":mkexrc" 命令寫入當前修改過的選項和映射到 ".exrc" 文件裡。":mkvimrc" 寫入到
".vimrc" 文件。

映射不檢查所謂的 "尾遞歸"。這樣可以允許 ":map! foo ^]foo" 類似的形式。

映射以數字開始時，vi 丟失了之前輸入的計數 (例如，如果使用映射 ":map g 4G"，命
令 "7g" 轉到第 4 行)。這被認為是一個 vi 的漏洞。Vim 連接計數 (這個例子裡，它成
為了 "74G")，符合多數人的期待。

:put! 命令把寄存器的內容插到當前行之前。

如果放置的文本少於一行，vi 的 "p" 和 "P" 命令不能用 "." 重複。Vim 它們總是可以
重複的。

":noremap" 命令可以用來輸入不會被重映射的映射。這可以用來交換兩個鍵的含義。
":cmap"、":cunmap" 和 ":cnoremap" 可以用來只在命令行編輯時映射。":imap"、
":iunmap" 和 ":inoremap" 則可用作插入模式的映射。類似的命令對縮寫也存在:
":noreabbrev"、":iabbrev"、":cabbrev"、":iunabbrev"、":cunabbrev"、
":inoreabbrev"、":cnoreabbrev"。

Vi 裡命令 ":map foo bar" 會刪除以前定義過的映射 ":map bug foo"。這被認為是一個
漏洞。所以 Vim 沒有這一特性。
":unmap! foo" 倒是會刪除 ":map! bug foo"。如果不這樣，撤銷映射很難實現 (這和
vi 兼容)。

':' 寄存器包含最近的命令行。
'%' 寄存器包含當前的文件名。
'.' 寄存器包含最近插入的文本。

":dis" 命令顯示抽出的寄存器的內容。

CTRL-O/CTRL-I 可用作跳轉到較舊的/較新的位置。這和 '' 命令所用到的位置相同，但
是可以到別的文件裡。":jumps" 命令列出較老的所有位置。

如果置位了 'shiftround' 選項，">" 和 "<" 命令的縮進被取整到 'shiftwidth' 的倍
數。

'scrolljump' 選項可以設置為光標離開屏幕時最少滾動的行數。可用在滾動緩慢的場合。

'scrolloff' 選項可以設置光標上面和光標下面最少保留的行數。這樣，你在編輯時，總
能看到一些上下文。如果設為了一個大值，光標總保持在窗口的中間。

大寫位置標記用來在文件間跳轉。":marks" 命令列出當前設置的所有位置標記。"']" 和
"`]" 命令跳轉到前一個操作符的最後，或者放置 (put) 命令插入文本的最後。"'[" 和
"`[" 這跳轉到相應的開始處。

'shelltype' 選項的設置反映了 Amiga 使用的外殼類型。

'highlight' 選項可以設置若干命令使用的高亮模式。

CTRL-A (加) 和 CTRL-X (減) 命令是新增的。命令的計數 (缺省為 1) 被從光標所在或
其後的數字加上/減去。該數字可以是十進制、八進制 ('0' 開始)，或者十六進制 ('0x'
開始)。對宏很有用。

:set 命令可以使用 "inv" 前綴來反轉布爾型選項的值。

Vi 和 Vim 上你都可以用 ":substitute" 命令的 CTRL-M 增加換行符。Vi 裡，這意味著
你不能在文本裡插入一個真正的 CTRL-M。Vim 裡，你可以用前導 CTRL-V 的方式在文本
裡輸入一個真正的 CTRL-M。


插入模式下:

如果打開 'revins' 選項，則進行反方向插入。這可以用來輸入希伯來文。插入普通字符
時，光標不會移動，而文字會往右移動。退格、CTRL-W 和 CTRL-U 同樣反向工作。
CTRL-B 切換 'revins' 選項。在替換模式下，'revins' 沒有效果。必須在編譯時打開這
一功能。

退格鍵和 CTRL-D 一樣可以用來刪除自動的縮進。

如果 'backspace' (bs) 選項包含 "eol"，你可以在換行符上退格、CTRL-U 和 CTRL-W。
如果 'backspace' 選項包含了 "start"，你可以在插入的開始處退格。

如果置位了 'paste' 選項，一些選項被復位，而且插入模式和縮寫的映射被禁止。這允
許在窗口系統裡粘貼文本不會產生以外的效果。如果復位 'paste' 選項，舊的選項值重
新恢復。

CTRL-T/CTRL-D 總是插入/刪除當前行的一個縮進，不管光標處於何列。

CTRL-@ (插入上次輸入過的文本) 總能工作 (Vi: 只有在作為第一個字符輸入時)。

CTRL-A 和 CTRL-@ 類似，但不離開插入模式。

CTRL-R {0-9a-z..} 可以用來插入寄存器的內容。

如果置位了 'smartindent' 選項，C 程序會更好的自動縮進，'cindent' 則做得更多。

CTRL-Y 和 CTRL-E 可以用來從當前光標位置的上/下複製字符。

CTRL-V 之後，你可以輸入三個十進制數字。該字節作為單個字符插入在文本裡。這可以
用來輸入你的鍵盤上沒有的國際字符。

打開 'expandtab' (et) 選項，使得 <Tab> 被擴展為合適數量的空格。

窗口總是反映緩衝區的內容 (Vi 在改變文本和其他一些情況下並不如此)。

如果 Vim 編譯時定義了 DIGRAPHS，就能支持二合字母。已經包含了一組常用的二合字
母。它們可以用 ":digraph" 顯示。用 ":digraph {char1}{char2} {number}" 可以定義
更多。二合字母本身以 "CTRL-K {char1} {char2}" 或 "{char1} BS {char2}" 輸入 (後
者只有在打開 'digraph' 選項時)。

在重複插入時，例如 "10atest <Esc>"，vi 只會處理第一個插入的迴繞邊界
('wrapmargin')。Vim 則對整體處理。

"i" 或 "a" 命令的計數用於所有文本。Vi 只針對第一行。在 Vi 裡，
"3iabc<NL>def<Esc>" 會插入 "abcabcabc<NL>def"，但 Vim 會給出
"abc<NL>defabc<NL>defabc<NL>def"。


命令行模式下:

<Esc> 退出命令行但不執行之。vi 裡，命令行還是會執行，這和大多數人的期待不符
(按 <Esc> 應該總是讓你退回到普通模式)。要避免一些古老的宏的問題，宏中的 <Esc>
仍然執行命令行命令。如果期待 <Esc> 的輸入像 vi 那樣執行命令行命令，你可以如此
修正 ":cmap ^V<Esc> ^V<CR>"

通用:

'ttimeout' 選項和 'timeout' 類似，但只對光標和功能鍵有效，而不是普通的經過映射
的字符。'timeoutlen' 選項給出等待的毫秒數。如果 'esckeys' 選項沒有置位，<Esc>
開始的光標和功能鍵在插入模式下不會識別。

每個終端字符串有一個選項。這可以用在 termcap 不支持或者要改變單獨的字符串的場
合。

'fileformat' 選項可以設置 <EOL> 的選擇: "dos" <CR><NL>、"unix" <NL> 或 "mac"
<CR>。如果 'fileformats' 選項非空，Vim 試圖自動檢測 <EOL> 的類型，並據此設置
'fileformat' 選項。

有的系統沒有任務 (job) 控制 (舊 Unix 系統和非 Unix 系統)。CTRL-Z、":stop" 或
":suspend" 命令啟動一個新的外殼。

如果 Vim 在 Amiga 上啟動時沒有交互窗口作為輸出，則打開一個窗口 (並且 :sh 仍然
工作)。你可以用 |-d| 參數給出編輯的設備，例如 "-d con:20/20/600/150"。

'columns' 和 'lines' 選項可以用來設置或者取得顯示的寬度和高度。

從文件的第一行或者最後數行裡讀取選項的設置。'modelines' 選項決定嘗試的行數 (缺
省為 5)。注意: 這和 Vi 版本不同，後者會執行模式行裡的任何 Ex 命令 (嚴重的安全
問題)。|trojan-horse|

如果置位了 'insertmode' 選項 (例如在 .exec 裡)，Vim 以插入模式啟動。並且在
按了 <Esc> 以後回到這一模式。

撤銷的信息保存在內存裡。可用的內存限制了可以撤銷的改變的數目和大小。這可能對
MS-DOS 是一個問題，但在 Amiga 上很少是，而 Unix 和 Win32 上幾乎不會。

如果置位了 'backup' 或 'writebackup' 選項: 在文件覆蓋前，備份文件 (.bak) 被創
建。如果使用 "backup" 選項，覆蓋後該文件得以保留。

Vim 創建 ".swp" 結尾的文件，用以存儲文件的改動部分和內存放不下的內容。該文件用
於 "vim -r file"，即從強行終止的編輯會話恢復。交換文件的使用可以用把
updatecount' 選項設為 0，或者以 "-n" 選項啟動 Vim 來關閉。使用 'directory' 選
項把 .swp 文件放到其它地方。

Vim 在 8.3 文件名的文件系統下能正常工作。這也包括 Amiga 的 messydos 或者
crossdos 文件系統，或者 Unix 上裝載 (mount) 的任何 8.3 文件系統。見
|'shortname'|。

錯誤信息顯示至少一秒鐘 (Vi 的錯誤信息會相互覆蓋)。

如果 Vim 給出 |hit-enter| 提示，你可以輸入任何鍵。除了 <CR>、<NL> 和 <Space>
的字符都被認為是命令 (的開始)。(Vi 只接受 ":" 開始的命令)。

計數和無名寄存器的內容在改變文件後仍然記住。

"No lines in buffer" 消息是一個普通的消息，而不是錯誤信息。因為後者會使得映射
被非正常終止。

Amiga 上支持 AUX: 設備。

==============================================================================
6. 命令行參數					*cmdline-arguments*

不同版本的 Vi 有不同的命令行參數。這會引起混亂。為了幫助你，本節給出這些差別的
概述。

這裡考慮五個 Vi 的不同版本:
	Elvis	Elvis 2.1b 版本
	Nvi	Nvi 1.79 版本
	Posix	Posix 1003.2
	Vi	Vi 3.7 版本 (Sun 4.1.x 版本)
	Vile	Vile 7.4 版本 (不完整)
	Vim	Vim 5.2 版本

只有 Vim 支持在文件名之間和之後接受選項。

+{command}	Elvis、Nvi、Posix、Vi、Vim: 和 "-c {command}" 相同。

-		Nvi、Posix、Vi: 在批處理模式下運行 Ex。
		Vim: 從標準輸入讀取文件 (批處理模式用 -s)。

--		Vim: 選項結束，其後的全被解釋為文件名。

--cmd {command}	Vim: 在執行 vimrc 文件前執行 {command} 命令。

--echo-wid	Vim: GTK+ 在標準輸出回顯窗口 ID。

--help		Vim: 顯示幫助信息並退出。

--literal	Vim: 按本義接受文件名，不擴展通配符。

--nofork	Vim: 和 |-f| 相同。

--noplugin[s]	Vim: 跳過插件的載入。

--remote	Vim: 在另外一個 Vim 服務器編輯文件

--remote-expr {expr}	Vim: 在另外一個 Vim 服務器執行 {expr}

--remote-send {keys}	Vim: 發送鍵序列 {keys} 到 Vim 服務器並退出

--remote-silent {file}	Vim: 如有可能，在另外一個 Vim 服務器編輯文件

--remote-wait	Vim: 在另外一個 Vim 服務器編輯文件，並等待之

--remote-wait-silent	Vim: 和 --remote-wait 類似，但如果不可能不會抱怨

--role {role}	Vim: GTK+ 2: 設置主窗口的角色

--serverlist	Vim: 輸出 Vim 服務器的列表並退出

--servername {name}	Vim: 指定 Vim 服務器名

--socketid {id}		Vim: 運行 Vim 的 GTK 窗口套接字

--windowid {id}		Vim: 運行 Vim 的 Win32 窗口號

--version	Vim: 顯示版本信息並退出。

-?		Vile: 顯示使用小結並退出。

-a		Elvis: 同一個窗口載入所有指定的文件 (Vim 使用 -o)。

-A		Vim: 以阿拉伯模式啟動 (如果編譯時加入阿拉伯語功能)。

-b {blksize}	Elvis: 會話文件使用 {blksize} 塊大小。
-b		Vim: 置位 'binary' 模式。

-C		Vim: 兼容模式。

-c {command}	Elvis、Nvi、Posix、Vim: 在載入編輯緩衝區後，運行 Ex 命令
		{command}。
		Vim: 允許至多 10 個 "-c" 參數

-d {device}	Vim: 使用 {device} 作為 I/O (僅限於 Amiga)。{僅當編譯時加入
		|+diff| 特性才有效}
-d		Vim: 開始時置位 'diff'。|vimdiff|

-dev {device}	Vim: 使用 {device} 作為 I/O (僅限於 Amiga)。

-D		Vim: 調試模式。

-e		Elvis、Nvi、Vim: 以 Ex 模式啟動，就像可執行程序叫 "ex" 那樣。

-E		Vim: 以改進的 Ex 模式啟動 |gQ|，就像 "exim" 那樣。

-f		Vim: 在前台運行 GUI (Amiga: 不打開新窗口)。
-f {session}	Elvis: 使用 {session} 作為會話文件。

-F		Vim: 以波斯語模式啟動 (如果編譯時加入波斯語功能)。
		Nvi: 快速啟動，編輯開始時不讀入整個文件。

-G {gui}	Elvis: 使用 {gui} 作為用戶界面。

-g		Vim: 啟動 GUI。
-g N		Vile: 開始編輯第 N 行

-h		Vim: 給出幫助消息。
		Vile: 編輯幫助文件

-H		Vim: 以希伯來語模式啟動 (如果編譯時加入該功能的話)。

-i		Elvis: 以插入模式開始編輯每個窗口。
-i {viminfo}	Vim: 使用 {viminfo} 作為 viminfo 文件。

-L		Vim: 和 "-r" 相同 (也在某些 Vi 版本裡存在)。

-l		Nvi、Vi、Vim: 置位 'lisp' 和 'showmatch' 選項。

-m		Vim: 修改不允許被寫入，復位 'write' 選項。

-M		Vim: 不允許修改，復位 'modifiable' 和 'write' 選項。

-N		Vim: 非兼容模式。

-n		Vim: 不用交換文件。

-nb[args]	Vim: 打開一個 NetBeans 接口連接

-O[N]		Vim: 和 -o 類似，但使用垂直分割的窗口。

-o[N]		Vim: 打開 [N] 個窗口，或者每個文件一個。

-p[N]		Vim: 打開 [N] 個標籤頁，或者每個文件一個。

-P {parent-title} Win32 Vim: 在父應用窗口內部打開 Vim

-q {name}	Vim: 使用 quickfix 錯誤文件 {name}。
-q{name}	Vim: 同上。

-R		Elvis、Nvi、Posix、Vile、Vim: 置位 'readonly' 選項。

-r		Elvis、Nvi、Posix、Vi、Vim: 恢復模式。

-S		Nvi: 置位 'secure' 選項。
-S {script}	Vim: 在啟動後執行 script 腳本。

-s		Nvi、Posix、Vim: 在 Ex 模式時，和 "-" 相同 (安靜模式)。
		Elvis: 置位 'safer' 選項。
-s {scriptin}	Vim: 讀入 {scriptin} 腳本文件；只有在非 Ex 模式下才有效。
-s {pattern}	Vile: 搜索 {pattern}

-t {tag}	Elvis、Nvi、Posix、Vi、Vim: 編輯包含 {tag} 的文件。
-t{tag}		Vim: 同上。

-T {term}	Vim: 設置終端名為 {term}。

-u {vimrc}	Vim: 從 {vimrc} 文件讀入初始化設置。

-U {gvimrc}	Vim: 從 {gvimrc} 文件讀入 GUI 初始化設置。

-v		Nvi、Posix、Vi、Vim: 以普通模式啟動 (Vi 的術語是可視模式
		(Visual))。
		Vile: 閱讀模式，不允許修改。

-V		Elvis、Vim: 詳細模式。
-V{nr}		Vim: 指定特定級別的詳細模式。

-w {size}	Elvis、Posix、Nvi、Vi、Vim: 設置 'window' 的值為 {size}。
-w{size}	Nvi、Vi: 和 "-w {size}" 相同。
-w {name}	Vim: 寫入腳本文件 {name} (必須以非數值字符啟動)。

-W {name}	Vim: 附加到腳本文件 {name} 裡。

-x		Vi、Vim: 要求輸入加密密鑰。見 |encryption|。

-X		Vim: 不連接到 X 服務器。

-y		Vim: 以簡易模式啟動，類似於 |evim|。

-Z		Vim: 受限模式

@{cmdfile}	Vile: 使用 {cmdfile} 作為啟動文件。

==============================================================================
7. POSIX 相容性					*posix* *posix-compliance*

2005 年，運行了 POSIX 測試包以對 Vim 的相容性進行了檢查。大多數測試都能正確執
行。有一些行為 Vim 和 POSIX 不相容，即使運行於 Vi 兼容模式也是如此。

Vim 啟動時設置 $VIM_POSIX 環境變量會使得 'cpoptions' 包含 POSIX 的標誌位。這使
Vim 盡可能地照 POSIX 方式運行。這和 Vi 兼容模式稍有不同。

這裡是 Vim 和 POSIX 指定行為不同之處以及原因:

							*posix-screen-size*
	如果終端獲得的屏幕大小信息更加可靠，Vim 忽略 $COLUMNS 和 $LINES 環境變
	量。在 'cpoptions' 裡加入 '|' 標誌位使 $COLUMNS 和 $LINES 可以否決另一
	種方式獲得的大小。

	在原來的 Vi 上，"{" 和 "}" 命令不停在 "{" 上，但 POSIX 指定應該如此。
	如果你希望 POSIX 方式，在 'cpoptions' 裡加入 '{' 標誌位。

	"D"、"o" 和 "O" 命令接受計數，它們被重複時也是如此。
	如果你希望忽略計數，在 'cpoptions' 裡加入 '#' 標誌位。

	如果 'cpoptions' 裡加入 '.' 標誌位，那麼當前緩衝區被修改時 ":cd" 命令
	失敗。

	如果 'shortmess' 裡加入 "A" 標誌位，沒有 ATTENTION 消息。

以下是運行 POSIX 測試包相關的評注:
- vi 測試 33 有時因為不明原因失敗
- vi 測試 250 失敗；新版本的行為會有改變
    http://www.opengroup.org/austin/mailarchives/ag-review/msg01710.html
- vi 測試 310 失敗；任何錯誤出現時返回代碼必須非零？
- ex 測試 24 失敗，因為測試有問題。SUSv2 和 SUSv3 之間已修改。
- ex 測試 47、48、49、72、73 失敗，因為安靜模式下不讀入 .exrc 文件也不使用
  $EXINIT。
- ex 測試 76、78 失敗，因為使用 echo 代替了 printf。(已修正)
    另: \s 沒有被換成空格的問題。
- ex 測試 355 失敗，因為 'window' 不在 "30z" 裡應用。
- ex 測試 368 失敗，因為外殼命令在安靜模式下不回顯。
- ex 測試 394 失敗，因為 "=" 命令輸出在安靜模式下不可見。
- ex 測試 411 失敗，因為測試文件不正確，包含了多餘的 ':'。
- ex 測試 475 和 476 失敗，因為 reprint 輸出在安靜模式下不可見。
- ex 測試 480 和 481 失敗，因為標籤文件使用空格而不是製表。
- ex 測試 502 失敗，因為安靜模式下不讀入 .exrc。
- ex 測試 509 失敗，因為安靜模式下不讀入 .exrc。而且退出代碼是 1 而不是 2。
- ex 測試 534 失敗，因為安靜模式下不讀入 .exrc。


 vim:tw=78:ts=8:ft=help:norl:
