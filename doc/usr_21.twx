*usr_21.txt*	For Vim version 7.3.	最近更新：2007年5月

		     VIM 用戶手冊 - Bram Moolenaar 著
		  譯者： Chimin Yen http://vimcdoc.sf.net
				    
			   離開和回來


本章深入討論如何讓其它程序跟 Vim 混用。或者從 Vim 內部執行別的程序，或者暫時先
離開 Vim 而於執行了那個程序後再回來。而且，本章將進一步介紹如何記住 Vim 的當前
狀態，並在以後把它還原回來。

|21.1|	掛起和繼續
|21.2|	執行 shell 命令
|21.3|	記憶有關信息；viminfo
|21.4|	會話
|21.5|	視圖
|21.6|	模式行

       下一章: |usr_22.txt|  尋找要編輯的文件
       前一章: |usr_20.txt|  快速鍵入命令行
         目錄: |usr_toc.txt|

==============================================================================
*21.1*	掛起和繼續

像多數 Unix 程序一樣，Vim 可以按 CTRL-Z 掛起。這個動作把 Vim 停下來，並讓你回
到那個你啟動 Vim 的命令 shell 裡。接著，你可以執行任何別的命令直到你覺得無聊為
止。然後再用 "fg" 命令回到 Vim。 >

	CTRL-Z
	{any sequence of shell commands}
	fg

你正好回到那個當初你離開 Vim 的地方，什麼也沒改變。
   當你按 CTRL-Z 行不通時，你還可以用命令 ":suspend"。別忘了把 Vim 引導回前
台，否則你會失去你所有的修改！

只有 Unix 支持這個功能。在其它系統上 Vim 將為你啟動一個 shell。這也讓你得以執
行 shell 命令。可那是一個新 shell，而非你在其中啟動 Vim 的那個。
   當你運行圖像用戶界面時，你無法返回那個 Vim 從其中啟動的 shell。CTRL-Z 的作
用只是把 Vim 窗口最小化。

==============================================================================
*21.2*	執行 shell 命令

從 Vim 內部執行單個 shell 命令，用 ":!{command}"。例如，要顯示目錄表: >

	:!ls
	:!dir

第一行用在 Unix 上，第二行用於微軟視窗。
   Vim 將執行該程序。當它結束時，你會得到提示，讓你擊打 <Enter>。這提示允許你
在回去編輯你的文本之前看一看該命令的輸出。
   字符 "!" 也用在其它有個程序被調用運行的場合。讓我們看一看共有哪些:

	:!{program}		執行 {program}
	:r !{program}		執行 {program} 並讀取其輸出
	:w !{program}		執行 {program} 傳送文本至其輸入
	:[range]!{program}	經由 {program} 過濾文本

注意 "!{program}" 前面那個作用區產生的區別可大了。不附帶作用區，這個程序就跟
通常一樣被執行，而加了這個作用區，作用區內的文本行就經由該程序過濾而出。

用這種方法執行一系列命令也是可以的。但 shell 在此卻更勝一籌。你可以用這種方法
啟動一個新 shell: >

	:shell

這有點類似於用 CTRL-Z 來掛起 Vim。不同之處在於這種方法啟動的是一個新 shell。

使用圖像用戶界面時，這個 shell 利用 Vim 的窗口作為其輸入和輸出端口。既然 Vim 
並非終端仿真器，所以使用中未必盡善近美。要是你遇到麻煩，試試切換 'guipty' 選
項。如果這方法仍不奏效，那就只好啟動一個新的終端來運行 shell。例如:
>
	:!xterm&

==============================================================================
*21.3*	記憶有關信息；viminfo

在你編輯了一會兒文件以後，你就會有些文本儲存在寄存器內，有些標記指向各種各樣文
件，還有一些精妙的命令保存在命令行歷史記錄內。當你退出 Vim，所有這些就全沒了。
但不用擔心，你能夠把它們找回來！

信息文件 viminfo 設計用來儲存狀態信息:

	命令行和模式搜索的歷史記錄
	寄存器內文本
	各種文件的標記
	緩存器列表
	全局變量

你每次退出 Vim，它就把此種信息存放在一個文件內。即 viminfo 信息文件。當 Vim 重
新啟動時，就讀取這個信息文件，而那些信息就被還原了。

選項 'viminfo' 的默認設定是還原有限的幾種信息。你也許希望設定它記住更多的信
息。下面這個命令可以辦到: >

	:set viminfo=string

其中字符串 "string" 規定了什麼要儲存。該字符串的語法為一個選項字符跟一個參數。
選項和參數組成的對子之間由逗號分隔。
   來看一下你可以怎樣構建你自己的 viminfo 字符串。首先，選項 ' 用於規定你為多
少個文件保存標記 (a-z)。為此選項湊一個整數就行 (比如 1000)。你的命令現在看起來
像這樣: >

	:set viminfo='1000

選項 f 控制是否要儲存全局標記 (A-Z 和 0-9)。如果這個選項設為 0，那麼什麼也不存
儲。如果設為 1，或你對 f 選項不作規定，那麼標記就被存儲。你要這個功能，現在你
有了: >

	:set viminfo='1000,f1

選項 < 控制著每個寄存器內保存幾行文本。默認情況下，所有的文本行都被保存。如果
設為 0，則什麼也不保存。為了避免成千上萬行文本被加入你的信息文件 (那些文本可能
永遠也沒用，徒然使 Vim 啟動得更慢)，你採用 500 行的上限: >

	:set viminfo='1000,f1,<500
<
你也許用得著的其它選項:
	:	保存命令行歷史記錄內的行數
	@	保存輸入行歷史記錄內的行數
	/	保存搜索歷史記錄內的行數
	r	可移介質，其上的文件不保存標記 (可用多次)
	!	以大寫字母開頭並且不含有小寫字母的全局變量
	h	啟動時關閉選項 'hlsearch' 高亮顯示
	%	緩衝區列表 (只有當不帶參數啟動 Vim 時才用來恢復)
	c	用編碼 'encoding' 轉換文本
	n	用於 viminfo 文件的名稱 (必須為最後一項選項)

欲知更多詳情，參見 'viminfo' 選項以及 |viminfo-file|。

當你多次運行 Vim，最後退出的那個就把信息儲存起來。這可能導致以前退出的那些 Vim
所存放的信息流失，因為每個條目只能被記住一次。


重 返 VIM 中 斷 處

你編輯一個文件到一半，但你得下班去度假了。你退出 Vim 就去享受你的人生，把你那
些工作忘得乾乾淨淨。兩個星期以後你啟動 Vim，鍵入:
>
	'0

你正好回到當初離開 Vim 的地方。所以你就把你的工作接著做下去。
   你每次退出 Vim，它都創建一個標記。最後那個是 '0。原來那個 '0 所指的位置就
成了 '1。而原來那個 '1 就成了 '2，依此類推。而原來的標記 '9 就沒了。
   要發現標記 '0 至 '9 指向何處，|:marks| 命令很有用。


重 返 某 文 件

如果你想回到最近曾經編輯過的文件，但已經退出過 Vim，有一個稍微複雜的方法。你可
以這樣看到這些文件的列表: >
	:oldfiles
<	1: ~/.viminfo ~
	2: ~/text/resume.txt ~
	3: /tmp/draft ~

假如你要編輯第二個文件，也就是列表裡 "2:" 開始的那個，輸入: >

	:e #<2

其它接受文件名參數的命令都能替代這裡的 ":e"，"#<2" 這種形式可以用在 "%" (當前
文件名) 和 "#" (輪換文件名) 可以出現的地方。由此，你也可以這樣來分割窗口來編輯
第三個文件: >

	:split #<3

#<123 這種東西在你要用來編輯文件時畢竟是太麻煩了。幸運的是有個簡單點的辦法: >

	:browse oldfiles
<	1: ~/.viminfo ~
	2: ~/text/resume.txt ~
	3: /tmp/draft ~
	-- More --

你可以得到和 |:oldfiles| 相同的文件。如果要編輯 "resume.txt"，先按 "q" 停止列
表，然後會有提示:

	Type number and <Enter> (empty cancels): ~

輸入 "2" 並按 <Enter> 來編輯第二個文件。

詳見 |:oldfiles|、|v:oldfiles| 和 |c_#<|。


Vim 間 信 息 移 動

在 Vim 仍然運行的情況下，你可以用命令 ":wviminfo" 和 ":rviminfo" 來保存和還原
信息。這很方便，比如在兩個同時運行的 Vim 之間交換寄存器內容。在第一個 Vim 裡執
行: >

	:wviminfo! ~/tmp/viminfo

而在第二個 Vim 裡執行: >

	:rviminfo! ~/tmp/viminfo

很明顯，字符 "w" 指 "寫" 而字符 "r" 指 "讀"。
   ":wviminfo" 用字符 ! 來強制重寫一個已存在文件。如果省略而文件卻存在，那麼這
些信息就跟那個文件合併到一起。
   用於 ":rviminfo" 的 ! 字符意味著所有的信息都被採用，這可能會重寫一些已存在
信息。若不用 ! 字符，則只有那些尚未設定的信息才會被採用。
   這些命令也可以用來儲存信息為將來所用。你可以讓一個目錄專門存放信息文件，而
每一個所包含的信息各有其特殊的目的。

==============================================================================
*21.4*	會話

假定你編著編著，編到那一天要結束了。你想放下手上的工作，而於第二天再從你停下來
的那地方繼續編下去。你可以做到這一點，只要把你的編輯會話保存起來，第二天再把它
還原回來。
   Vim 會話存放著所有跟你的編輯相關的信息。這包括諸如文件列表、窗口佈局、全局
變量、選項、以及其它信息。(究竟什麼信息被記住，則由選項 'sessionoptions' 控
制，稍後敘述。)
   下面這個命令創建一個會話文件: >

	:mksession vimbook.vim

如果你以後要還原這個會話，你可以用這個命令: >

	:source vimbook.vim

如果你要啟動 Vim 並還原某個特別的會話，你可以用下面這個命令: >

	vim -S vimbook.vim

這命令告訴 Vim 在啟動時讀取一個特定的會話文件。參數 'S' 指會話 (實際上，你可以
用 -S 運行任何 Vim 腳本，因而，你也不妨指其為運行腳本，"source")。

那個曾經打開的窗口就還原了，跟以前一樣的位置和大小。映射和選項值也像以前一樣。
   究竟還原了什麼取決於 'sessionoptions' 選項。默認值為 "blank,buffers,curdir,
folds,help,options,winsize"。

	blank		保留空窗口
	buffers		所有緩衝區，而非僅僅一個窗口內的
	curdir		當前目錄
	folds		折疊，包括人工創建的
	help		幫助窗口
	options		所有選項和映射
	winsize		窗口大小

你愛怎麼改就怎麼改。例如，除了上述項目以外，你還要還原 Vim 窗口大小: >

	:set sessionoptions+=resize


會 話 用 法

最顯而易見的會話用法，是在編輯屬於不同項目的文件時。假定你把會話文件都儲存在目
錄 "~/.vim" 下。你正編輯著項目 "secret" 的文件，而你必須切換到項目 "boring" 的
文件上: >

	:wall
	:mksession! ~/.vim/secret.vim
	:source ~/.vim/boring.vim

首先用命令 ":wall" 把所有修改過的文件存盤。然後用命令 ":mksession!" 保存當前會
話。它重寫了前一次會話文件。下一次載入 "secret" 會話時，你便可以在原來那一點上
接著編輯下去。最後，你載入新的 "boring" 會話。

如果你打開幫助窗口，分割和關閉各種各樣窗口，或者一般來說把窗口佈局搞砸了，此時
你可以恢復上次保存的會話: >

	:source ~/.vim/boring.vim

你因而享有充分的控制權，要麼把當前會話中的設置保存起來，以便下一次編輯時從現在
這個位置接著編下去，要麼保留會話文件不變，一切都從那兒開始。
   另一種會話用法是你創建了一種你喜歡的窗口佈局，並把它保存在一個會話文件中。
然後你可以在任何時候恢復這種窗口佈局。
   例如，這是一個使用起來很不錯的佈局:

	+----------------------------------------+
	|		   VIM - main help file  |
	|					 |
	|Move around:  Use the cursor keys，or "h|
	|help.txt================================|
	|explorer   |				 |
	|dir	    |~				 |
	|dir	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|~/=========|[No File]===================|
	|					 |
	+----------------------------------------+

其頂部有個幫助窗口，使你能夠閱讀本文。左邊那個狹長窗口相當於一個文件瀏覽器。這
是一個 Vim 插件，用來表列一個目錄的內容。你可以在那兒挑選文件來編輯。有關這一
點，下一章有更多敘述。
   從一個剛剛啟動的 Vim 創建這樣一個佈局，請用: >

	:help
	CTRL-W w
	:vertical split ~/

你可以根據你的喜好稍稍改動一點那些窗口的大小。然後保存會話記錄:
>
	:mksession ~/.vim/mine.vim

現在你可以用這個佈局啟動 Vim: >

	vim -S ~/.vim/mine.vim

提示: 要在一個空窗口中打開一個表列在瀏覽器窗口中的文件，請把光標移到文件名上並
按 "O"。用鼠標雙擊也行。


UNIX 和 微 軟 視 窗

有些人不得不今天在微軟視窗上，而明天則在 Unix 上工作。如果你是其中之一，請考慮
把 "slash" 和 "unix" 加入選項 'sessionoptions'。此後存盤的會話文件的格式在兩種
系統上都適用。請把以下命令加進你的 vimrc 文件內: >

	:set sessionoptions+=unix,slash

Vim 將因而使用 Unix 格式，因為微軟視窗上的 Vim 能讀寫 Unix 文件，但 Unix 上的
Vim 卻不能讀取微軟視窗格式的會話文件。類似地，微軟視窗上的 Vim 懂得文件路徑名
稱裡用以分隔名字的 / ，但 Unix 上的 Vim 卻不懂微軟視窗上的 \。


會 話 記 錄 和 信 息 文 件

會話記錄儲存了不少東西，但不儲存標記位置，寄存器內容以及命令行歷史記錄。你需要
利用 Vim 信息文件 viminfo 儲存這些信息。
   在大多數情況下，你將需要利用會話記錄而非全部信息文件內的信息。這麼做可以讓
你切換到另一個會話記錄，但卻保留著命令行歷史記錄。並得以在一個會話期內把文本抄
進寄存器，而於另一個會話期把它粘貼出來。
   你也許寧可用會話記錄保存信息。那麼，你必須親自動手。例如: >

	:mksession! ~/.vim/secret.vim
	:wviminfo! ~/.vim/secret.viminfo

而再次把它還原: >

	:source ~/.vim/secret.vim
	:rviminfo! ~/.vim/secret.viminfo

==============================================================================
*21.5*	視圖

會話記錄儲存著整個 Vim 窗口外觀。當你只需要為某個窗口儲存特性時，得用視圖。
   視圖的用處在於你要以某種特定的方式編輯一個文件。例如，你以 'number' 選項顯
示了行號，並定義了若干折疊。正如會話記錄那樣，你可以記住這一視圖並在以後還原回
來。事實上，當你儲存會話時，每個窗口的視圖都儲存了。
   視圖有兩種基本用法。第一種是讓 Vim 為視圖文件挑一個文件名。你可以在以後編輯
同一文件時還原該視圖。為當前窗口儲存視圖，用: >

	:mkview

Vim 將自行決定視圖的儲存位置。當你以後編輯同一文件時，用這個命令恢復該視圖: >

	:loadview

這挺容易，不是嗎？
    現在你要閱讀這個文件，閱讀時你不要 'number' 選項顯示行號，或者你要把所有的
折疊都打開。你可以設定這些選項，使窗口看起來就是你要的那個樣子。然後儲存這個視
圖: >

	:mkview 1

顯而易見，你可以用下面的命令把它恢復: >

	:loadview 1

現在你可以用 ":loadview" 在這個文件的兩個視圖之間切換了，一個加參數 "1"，另一
個則不加參數。
   你可以用這個方法為同一個文件儲存視圖達十個之多，一個沒序號的，而九個則有序
號 1 至 9。


命 名 視 圖

第二種視圖基本用法是把視圖儲存在一個你選定的文件內。你可以在編輯另外一個文件時
載入這個視圖。Vim 將接著轉而編輯該視圖規定的文件。這樣你就可以用這種方法迅速換
個文件來編輯，其所有的選項設定就跟它們在存盤時一樣。
   例如，要保存當前文件的視圖: >

	:mkview ~/.vim/main.vim

你可以用這個命令把它還原: >

	:source ~/.vim/main.vim

==============================================================================
*21.6*	模式行

當你編輯一個特定的文件，你也許為該文件設定了特定的選項。每次鍵入這些命令很無
聊。而在許多人共享一個文件時，利用會話和視圖來編輯這個文件也無濟於事。
   解決這個困境的方法是給文件加一個模式行。那是一行文本，它把一些只適用於該文
件的選項設定告訴 Vim。
   一個典型的例子是在一個 C 程序中你把縮進值設為 4 的倍數。這就要求把選項
'shiftwidth' 設為 4。這個模式行能奏效:

	/* vim:set shiftwidth=4: */ ~

把這一行插入該文件起首五行或結尾五行。編輯這個文件時，你將注意到 'shiftwidth'
選項已經設定為 4。編輯另一個文件時，它再設回默認值 8。
   對於有些文件，模式行放在頭部挺合適，所以它應該置於該文件的頂部。對於文本文
件和其它那些模式行會影響正文閱讀的文件，把模式行放在文件結尾處。

選項 'modelines' 規定了要在文件起首和結尾幾行之內檢查那兒是否包含了模式行。要
檢查十行: >

	:set modelines=10

選項 'modeline' 可以用來撤銷這個設定。如果你以超級用戶身份 (Unix 的 root 或
MS-Windows 的 Administrator) 工作或者你不信任要編輯的文件時應該如此: >

	:set nomodeline

模式行可以用這種格式:

	any-text vim:set {option}={value} ... : any-text ~

其中 "any-text" 表示你可以在 Vim 實際用到的部分之前和之後加任意文本。這就允許
你使它看起來像個註釋，正如上例採用了 /* 和 */。
   " vim:" 部分使 Vim 識別出這個模式行。在 "vim" 的前面必須有空格，除非 "vim"
置於行首。因此像 "gvim:" 這樣用法是不行的。
   冒號之間的部分是命令 ":set" 。它的用法就跟鍵入 ":set" 命令一模一樣，只除了
在命令包含的任何冒號之前需要插入一個反斜槓 (否則該冒號就會被看成模式行結尾)。

還有一個例子:

	// vim:set textwidth=72 dir=c\:\tmp:  use c:\tmp here ~

在第一個冒號之前多一個反斜槓，因此它被包括在 ":set" 命令內。第二個冒號後面的文
本則被忽略不計，因此可以在那兒放個註釋。

欲知詳情，參見 |modeline|。

==============================================================================

下一章: |usr_22.txt|  尋找要編輯的文件

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
