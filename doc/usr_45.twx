*usr_45.txt*	For Vim version 7.3.  最近更新：2009年4月

		     VIM USER MANUAL - by Bram Moolenaar
		     譯者：lang2 http://vimcdoc.sf.net

			     選擇你的語言


Vim 中各種的消息可以用多種不同的語言給出。本章就介紹如何改變使用的語言。同時還
講解如何編輯各種語言的文件。

|45.1|	消息所用語言
|45.2|	菜單所用語言
|45.3|	使用其它編碼
|45.4|	編輯其它編碼的文件
|45.5|	文本錄入

           下一章: |usr_90.txt|  安裝 Vim
           前一章: |usr_44.txt|  自定義語法高亮
             目錄: |usr_toc.txt|

==============================================================================
*45.1*	消息所用語言

當你啟動 Vim 時，它會檢查環境變量從而找出你所使用的語言。大多數情況下這就夠
了。你會看到你所用語言的消息 (如果有的話)。要查看當前語言，使用命令: >

	:language

如果你得到 "C" 的輸出，表示 Vim 在使用缺省的語言 －－ 英語。

	備註:
	只有當多種語言支持被編譯進 Vim 時，你才可能用它來編輯各種不同的語言。
	要找出 Vim 是否支持多語種，看一下 ":version" 命令的輸出中有沒有
	"+gettext" 和 "+multi_lang"。如果有的話，表示應該沒問題了。如果你看到
	"-gettext" 或者 "-multi_lang" 的話你得重找一個 Vim。

如果你想要 Vim 的輸出消息也用另外一種語言呢？有幾種可能的辦法。你應該使用哪一
種取決於你所使用的系統。
   第一種辦法是在啟動 Vim 前設置環境變量。以 Unix 為例: >

	env LANG=de_DE.ISO_8859-1  vim

只有你的系統支持該語言的時候這才有效。這個辦法的好處是所有的 GUI 消息和運行庫
裡的消息都會使用正確的語言。缺點是你必須在啟動 Vim 前設定所要用的語言。如果你
想在運行 Vim 當中改變所用的語言，你就得使用第二種辦法: >

	:language fr_FR.ISO_8859-1

這樣你可以嘗試使用幾種不同的語種名。當你所指定的語言系統不支持時你會得到一個錯
誤消息。而當所指定語言的消息文件不存在時，你不會被警告。Vim 只會悄悄的使用缺省
的英語。
   要找到系統支持的語言，先要找到列出這些語言的目錄。在我的系統上，這個目錄是
"/usr/share/locale"。有些系統上是 "/usr/lib/locale"。"setlocale" 的手冊頁應該
告訴你該目錄在你使用系統的什麼地方。
   在鍵入那些語種名的時候要當心，大小寫是有區別的，而且 '-' 和 '_' 字符也很容
易被混淆。

你也可以分別為消息，編輯文本和時間等設定所使用的語言。參閱 |:language|。


自 己 動 手 翻 譯 消 息

如果翻譯的消息沒有包括你的語言，你也可以自己寫。你得先拿到 Vim 的源代碼和 GNU
gettext 軟件包。在解壓縮了源代碼後，先讀一下 src/po/README.txt。那裡有詳細的指
導。
   翻譯本身不是很難的，你不一定要是一個程序員。當然，你必須懂英語和你要翻譯成
的語言。
   當你對你的翻譯滿意的時候，可以考慮和其它人共享。上載到 vim-online 
(http://vim.sf.net) 或者 e-mail 給 Vim 的維護者 Vim <maintainer@vim.org>。
或者兩者都做。

==============================================================================
*45.2*	菜單所用語言

缺省情況下菜單是英語的。要使用你自己的語言，首先它們得被翻譯過。通常情況下菜單
使用的語言會自動被設置成你所用的語言，就像消息一樣。你什麼也不用做。但是如果
Vim 不包括你所用語言的菜單的翻譯就不行了。
   假設你在德國，使用的語言被設為德語。但你更願意在菜單中看到 "File" 而非
"Datei"。你可以這樣將菜單語言換回英語: >

	:set langmenu=none

也可以指定某一語言: >

	:set langmenu=nl_NL.ISO_8859-1

和上面一樣 "-" 和 "_" 是有區別的。然而，大小寫在這裡可以不分。
   'langmenu' 選項必須在菜單被加載前設置才有效。一旦菜單已經被顯示了，再改變其
值就不會直接生效了。因此，你需要把設置 'langmenu' 的命令放在 vimrc 文件裡。
   如果你實在想在 Vim 運行當中改變菜單所用的語言，你可以這樣做: >

	:source $VIMRUNTIME/delmenu.vim
	:set langmenu=de_DE.ISO_8859-1
	:source $VIMRUNTIME/menu.vim

這樣有一個缺陷：所有你自己定義的菜單都不見了。你還得必須重新定義它們。


自 己 動 手 翻 譯 菜 單

在下面這個目錄可以找到那些已有的菜單翻譯:

	$VIMRUNTIME/lang ~

翻譯文件被稱為 menu_{language}.vim。如果找不到你想使用的語言的翻譯，你可以自行
翻譯。最簡單的辦法就是拷貝現存的語言文件並在其基礎上做改動。
   先用 ":language" 命令找出你現在使用的語言的名稱。就用這個名稱，但名字的所有
字母要小寫。將這個文件拷貝到你自己的運行時目錄。例如，在 Unix 系統上你應該: >

	:!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim ~/.vim/lang/menu_nl_be.iso_8859-1.vim

你會在 "$VIMRUNTIME/lang/README.txt" 文件中找到與翻譯相關的更多提示。

==============================================================================
*45.3*	使用其它編碼

Vim 猜你所要編輯的文件編碼和你所用的語言相一致。對於許多歐洲語言而言，編碼是
"latin1"。那麼每個字節是一個字符。一共可能有 256 個不同的字符。而對於亞洲語言
這就遠遠不夠了。這些語言大多使用雙字節編碼，從而提供超過一萬個可能的字符。即使
如此，如果一篇文本中包括數種語言的文字，這樣還是不夠。Unicode 就是來解決這個問
題的。其設計允許它包括多種語言中全部的常用字符。它被稱為 "替代所有其它編碼的超
級編碼格式"。但它的使用還不很廣泛。
   幸運的是，Vim 對這三種編碼方式都支持，並且有條件的支持使用與系統環境語言不
一致的文本編碼。
   當你的系統語言與你所編輯文件用的編碼一致時，缺省設定應該沒有問題。所以你什
麼也不用擔心。下面的敘述只是當你想編輯不同的語言時才有關係。

	備註:
	只有對不同編碼格式的支持被編譯進 Vim 時這些才有效。檢查一下看看
	":version" 命令的輸出。如果包括 "+multi_byte" 就沒有問題，如果你看到
	"-multi_byte" 那你就得找另外一個 Vim。


在 GUI 上 使 用 UNICODE

Unicode 一個很方便的特性就是它可以與其它編碼格式相會轉換而不丟失信息。當你使
Vim 在內部使用 Unicode，你將可以用任何編碼編輯文件。
   不過，支持 Unicode 的系統還是比較有限的。因此可能你的語言不使用 Unicode。你
得告訴 Vim 你希望使用 Unicode，然後在解決與系統其它部分交互的問題。
   我們來啟動 GUI 版本的 Vim，這樣我們就可以顯示 Unicode 字符。這樣就行了: >

	:set encoding=utf-8
	:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

'encoding' 選項告訴 Vim 你所用的字符的編碼。該選項適用於緩衝區的文本 (你正在編
輯的文件)，寄存器，Vim 腳本文件等等。你可以把 'encoding' 選項當作是對 Vim 內部
運行機制的設定。
   上例假設你的系統安裝了指定的字體。例子中的字體名是用於 X-Window 系統的。這
種字體是包括在一個用於增強 xterm 的軟件包中的。如果你沒有這種字體，你可以在這
裡找到:

	http://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz ~

對於 MS-Windows，一些字體包含了一些有限的 Unicode 字符。試一下 "Courier New" 
字體。你可以通過 Edit/Select Font... 菜單來選擇幾種字體試試。但是你只能使用定
寬的字體。例如: >

	:set guifont=courier_new:h12

如果不行的話，試著找個字體包。你可以在下面這個地址找到，如果 Microsoft 沒把它
移走的話 (譯者注: 已經不能用了):

	http://www.microsoft.com/typography/fonts/default.aspx ~

現在你已經通知了 Vim 在內部使用 Unicode 並用一種 Unicode 字體顯示文本。然而，
Vim 接收到的輸入字符依然來自原來語言的編碼字符。這些字符必須被轉換成 Unicode。
你可以通過 'termencoding' 選項值來通知 Vim 要轉換的語言。像這樣: >

	:let &termencoding = &encoding
	:set encoding=utf-8

這樣就在 'encoding' 賦值為 utf-8 之前把 'encoding' 的舊值賦給 'termencoding'。
你得自己試試這個辦法在你的系統上行不行得通。當你使用一個為亞洲語言專門設計的輸
入法，同時又想編輯 Unicode 文本，這個辦法應該工作的很好。


在 UNICODE 終 端 內 使 用 UNICODE

也有直接支持 Unicode 的終端。XFree86 自帶的標準 xterm 就是其中之一。我們就用它
作為例子。
   首先，Unicode 支持要被編譯進 xterm。參閱 |UTF8-xterm|。
   用 "-u8" 參數啟動 xterm。你可能還需要指定一個字體。例如: >

   xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

現在你就可以在終端內運行 Vim 了。像前面一樣將 'encoding' 設定為 "utf-8"。這樣
就行了。


在 普 通 終 端 裡 使 用 UNICODE

假定你希望編輯 Unicode 文件，但是手頭又沒有一個支持 Unicode 的終端。你還是可以
用 Vim 這樣做，但是那些終端不支持的字符就不能被正確的顯示了。文本的編排格式會
被保留。 >

	:let &termencoding = &encoding
	:set encoding=utf-8

這和 GUI 的那個例子一樣。但內部工作機制不同：Vim 會把顯示的字符轉換後再送給終
端程序。這樣屏幕就不會顯示一堆毫無意義的字符。
   這需要 'termencoding' 和 'encoding' 之間的轉換。Vim 會自己處理 latin1 和
Unicode 之間的轉化。其它的轉換需要編譯進來 |+iconv| 特性。
   試著編輯一個含有 Unicode 的文件。你會注意到 Vim 會在那些無法顯示的字符處顯
示問號 (或下劃線或者其它什麼)。將光標移動到問號的地方並使用下面的命令: >

	ga

Vim 會顯示該字符的代碼。這樣你就會知道那個字符大概是什麼。你可以去查 Unicode
表。如果你有很多很多時間的話，你甚至可以這樣來閱讀一個文件的內容。

	備註:
	因為 Vim 對所有的文本都使用 'encoding' 選項。改變該選項的值會使所有的
	非 ASCII 碼字符無效。你在使用寄存器和 'viminfo' 文件 (例如，一個被存儲
	的查找模式) 時就會注意到了。建議在 vimrc 文件裡設置 'encoding' 選項，
	然後就別再碰它。

==============================================================================
*45.4*	編輯其它編碼的文件

假定你已經配置 Vim 使用 Unicode 了，你現在想編輯一個 16 位 Unicode 的文件。聽
起來很簡單，是嗎？事實上，Vim 在內部使用 utf-8 編碼，所以 16 為的編碼必須被轉
換。因為存在一個字符集 (Unicode) 和編碼格式 (utf-8 或 16 位) 的差別。
   Vim 會試著用 'fileencodings' 選項中的編碼名稱檢測你在編輯哪種文件。當使用
Unicode 時，缺省的選項值是: "ucs-bom,utf-8,latin1"。也就是說 Vim 會檢查編輯的
文件看看是下面的編碼之一:

	ucs-bom		文件必須以 Byte Order Mark (BOM) 開始。可以檢測 16
			位，32 位和 utf-8 Unicode 編碼。
	utf-8		utf-8 Unicode。如果有在 utf-8 中非法的字節序列，此設定
			將被拒絕。
	latin1		保證有效的經典 8 位編碼。

當你開始編輯一個 16 位的 Unicode 編碼，而該文件有 BOM 時，Vim 會檢測到這些並在
讀取文件時將其轉換為 utf-8 編碼。'fileencoding' 選項 (後面沒有 s) 被設為檢測到
的值，在本情況下是 "utf-16le"。表示是 Unicode，雙字節以及 little-endian (高位
字節在後) 的編碼。這樣的文件格式在 MS-Windows 上很常用 (例如，註冊表文件)。
   當寫入文件時，Vim 會比較 'fileencoding' 和 'encoding' 的值。如果它們的值不
同，文本會被轉換。
   如果 'fileencoding' 的值是空的，意味著不作任何轉換。這樣文本就會被以
'encoding' 的值來編碼。

如果缺省的 'fileencodings' 值不行的話，你可以將其設成你希望 Vim 嘗試使用的編
碼。只有當一個值無效時下一個才會被使用。將 "latin1" 放到第一位是不行的，因為它
永遠都不會是無效的。舉個例子，要在文件沒有 BOM 也不是 utf-8 編碼的時候缺省設為
簡體中文編碼 (Unix 和 Windows 上都可以用 chinese 作為編碼名): >

	:set fileencodings=ucs-bom,utf-8,chinese

|encoding-values| 有建議值。其它的值也可能有效。這取決於系統提供的轉換功能。


強 制 編 碼

如果編碼的自動檢測對你不起作用的話，你就得告訴 Vim 你要編輯的文件是什麼編碼。
例如: >

	:edit ++enc=koi8-r russian.txt

"++enc" 部分指定編輯該文件時應該使用的編碼。Vim 會把指定的編碼 (在這是俄語) 轉
換為 'encoding'。'fileencoding' 也會被設為指定的編碼，這樣當寫入文件時就會發生
編碼的反轉換。
   在寫入文件時也可以用到一樣的參數。這樣你事實上可以用 Vim 來轉換一個文件。例
如: >

	:write ++enc=utf-8 russian.txt
<
	備註:
	轉換可能導致字符丟失。在 Unicode 和其他編碼之間的相互轉換基本上不會有
	這個麻煩，除非你有非法字符。當文件包括多於一種語言的字符時，從 Unicode
	轉換為其它編碼很可能會丟失信息。

==============================================================================
*45.5*	文本錄入

計算機鍵盤只有那麼多鍵。有些語言包括幾千個字符。Unicode 有超過一萬。那你怎麼才
能輸入這些字符呢？
   首先，如果你不需要很多的特殊字符，你可以用二合字母。這已經在 |24.9| 講述過
了。
   當你使用一種有很多字符的語言，你的鍵盤應付不了，你就得使用一種輸入法 (IM)。
這需要學習如何把輸入的鍵變成要輸入的字符。你所用的系統很可能已經提供了輸入法。
Vim 應該可以很好地與其合作。更多的細節請參閱 |mbyte-XIM| (X-Windows) 和
|mbyte-IME| (MS-Windows)。


鍵 盤 映 射 表

對於某些語言來說字符集可能不同但是可用的字符數目和拉丁字符集差不多。這樣就有可
能在字符和鍵盤之間定義一個一對一的對應。Vim 用鍵盤映射表來解決這個問題。
   假定你想輸入希伯來語，你可以這樣載入希伯來語的鍵盤映射表: >

	:set keymap=hebrew

Vim 會為你找到一個鍵盤映射表文件。這取決於 'encodings' 選項的值。如果找不到相
應的文件，你會得到一個錯誤信息。

現在你就可以在插入方式下輸入希伯來語了。普通模式下，當你鍵入 ":"，Vim 會自動切
換到英語。你也可以用下面這個命令來在希伯來語和英語之間切換: >

	CTRL-^

它只在插入模式和命令行模式下才有效。在普通模式下會產生完全不同的效果 (跳轉到輪
換文件)。
   如果你打開 'showmode' 選項的話，鍵盤映射表的使用情況會在狀態信息裡指出。在
GUI 上，Vim 會使用不同的光標顏色來指明映射表的使用情況。
   你可以用 'iminsert' 和 'imsearch' 選項來改變鍵盤映射表的用法。

要查看鍵映射的列表，用這個命令: >

	:lmap

要查看系統有哪些鍵盤映射表文件，在 GUI 上你可以用 Edit/Keymap 菜單。否則你可以
用: >

	:echo globpath(&rtp, "keymap/*.vim")

(譯者注: 中文用戶可以試試 pinyin 映射表，可用來輸入帶四聲的韻母。)

自 定 義 鍵 盤 映 射 表

你也可以創建你自己的鍵盤映射表。不是很難。從一個和你要使用語言類似的映射表開
始。將其拷貝到你的運行時目錄裡的 "keymap" 子目錄。例如，在 Unix 上，你可以用
"~/.vim/keymap" 目錄。
   鍵盤映射表的文件名必須遵守下面的規則:

	keymap/{name}.vim ~
或
	keymap/{name}_{encoding}.vim ~

{name} 是鍵盤映射表的名字。選擇一個容易識別，又和系統中其它映射表不同的名字
(除非你希望替換一個現存的映射表)。名字不能包括下劃線。使用的編碼名是可選的。例
如:

	keymap/hebrew.vim ~
	keymap/hebrew_utf-8.vim ~

文件的內容應該很容易理解。看看隨 Vim 一起發佈的幾個鍵盤映射表就行了。更詳細
的，請參閱 |mbyte-keymap|。


最 後 的 辦 法

如果其它的方法都行不通，你可以用 CTRL-V 來輸入任何字符:

	編碼       鍵入			範圍 ~
	8-bit	   CTRL-V 123		十進制 0-255
	8-bit	   CTRL-V x a1		十六進制 00-ff
	16-bit     CTRL-V u 013b	十六進制 0000-ffff
	31-bit	   CTRL-V U 001303a4	十六進制 00000000-7fffffff

注意不要輸入空格。更詳細的，參閱 |i_CTRL-V_digit|。

==============================================================================

下一章: |usr_90.txt|  安裝 Vim

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
