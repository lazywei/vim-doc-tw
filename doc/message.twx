*message.txt*   For Vim version 7.3.  最近更新: 2010年7月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis, tocer
				http://vimcdoc.sf.net


本文件包含一個 Vim 產生的消息和錯誤信息按字母排序的列表。如果你不理解消息的含
義，可以在這裡查找。不過，本列表未必完整。

1. 以前的消息		|:messages|
2. 錯誤信息		|error-messages|
3. 消息			|messages|

==============================================================================
1. 以前的消息			*:messages* *:mes* *message-history*

:messages" 命令可以查看以前給出的消息。根據 'shortmess' 選項的設置，消息可能被
覆蓋或者截斷。這時該命令尤其有用。

使用微小 (tiny) 特性集的版本，記住的消息數目固定是 20。其它版本是 200。

								*g<*
這個命令用於察看前一個命令輸出的最後一頁。如果你在提示按回車的時候不小心按了空
格 <Space> 鍵，那麼該命令尤其有用。此時你將回到輸入回車的提示畫面，並可重新回
滾。
注意：如果在提示顯示更多信息時使用 "q" 停止輸出，那麼只顯示已輸出的那部分顯
示。當另一個命令輸出結果時，會清空前一個命令的輸出。

如果使用翻譯的消息，顯示的第一行會告訴你誰維護這個消息翻譯。如果你發現問題，可
以聯繫該維護者。

如果你想要查找特定 (錯誤) 消息，使用消息開始的 ID 號。比如，要得到下面消息的幫
助: >

	E72: Close error on swap file

或者 (經翻譯的): >

	E72: Errore durante chiusura swap file

使用: >

	:help E72

如果你很忙，不按 shift 鍵也可以: >

	:help e72

==============================================================================
2. 錯誤信息					*error-messages* *errors*

顯示的錯誤信息，如果在你沒讀到之前就已經消失了，你可以這樣重新看到: >
  :echo errmsg
或者查看最近的消息列表: >
  :messages


消 息 列 表
			*E222* *E228* *E232* *E256* *E293* *E298* *E304* *E317*
			*E318* *E356* *E438* *E439* *E440* *E316* *E320* *E322*
			*E323* *E341* *E473* *E570* *E685*  >
  Add to read buffer
  makemap: Illegal mode
  Cannot create BalloonEval with both message and callback
  Hangul automata ERROR
  block was not locked
  Didn't get block nr {N}?
  ml_upd_block0(): Didn't get block 0??
  pointer block id wrong {N}
  Updated too many blocks?
  get_varp ERROR
  u_undo: line numbers wrong
  undo list corrupt
  undo line missing
  ml_get: cannot find line {N}
  cannot find line {N}
  line number out of range: {N} past the end
  line count wrong in block {N}
  Internal error
  Internal error: {function}
  fatal error in cs_manage_matches

內部錯誤。如果你能夠使之重現，請發送漏洞報告。|bugs|

>
  ATTENTION
  Found a swap file by the name ...

見 |ATTENTION|。

							*E92*  >
  Buffer {N} not found

你請求的緩衝區不存在。在你清除了一個緩衝區，而它包含一個位置標記或者有其它途徑
還被引用的時候，也會出現這個錯誤。			 |:bwipeout|

							*E95*  >
  Buffer with this name already exists

你不能有兩個同名的緩衝區。

							*E72*  >
  Close error on swap file

用來保存編輯文本的備份的 |swap-file| 不能被正確關閉。大多數情況下這不會有什麼
問題。

							*E169*  >
  Command too recursive

當 Ex 命令執行了一個 Ex 命令，後者又執行一個 Ex 命令，如此反覆的時候，就可能發
生。最多能有 200 層。這很有可能是無窮循環。可能涉及的命令是 |:execute| 或
|:source|。

							*E254*  >
  Cannot allocate color {name}

顏色名 {name} 未知。多數系統中可用的顏色列表可以參見 |gui-colors|。

							*E458*  >
  Cannot allocate colormap entry, some colors may be incorrect

這意味著 Vim 沒有足夠的顏色可以分配。雖然 Vim 還能運行，但是有的顏色可能不會以
指定的顏色出現。試試停止其它使用很多顏色的應用程序，或者在啟動 gvim 之後啟動它
們。已知很多瀏覽器會消耗很多顏色。要避免這個問題，你可以告訴 netscape 使用自己
的顏色映射表: >
	netscape -install
或者告訴它只使用有限種的顏色 (64 應該足夠了): >
	netscape -ncols 64
這也可以通過 Xdefaults 文件設置: >
	Netscape*installColormap: Yes
或者 >
	Netscape*maxImageColors:  64
<
							*E79*  >
  Cannot expand wildcards

文件名包含特殊的字符組合，Vim 因而試圖進行通配符擴展但不成功。這_不_意味著沒有
匹配的文件名，只是說該模式是非法的。

							*E459*  >
  Cannot go back to previous directory

在擴展文件名的時候，Vim 不能回到最近用過的目錄名。所有正在使用的文件名現在都可
能成為非法！你需要得到當前目錄的可執行 (遍歷) 權限。

							*E190* *E212*  >
  Cannot open "{filename}" for writing
  Can't open file for writing

由於某種原因，你要寫入的文件不能建立或者覆蓋。這可能是因為你沒有目錄的寫權限，
或者該文件名不合法。

							*E166*  >
  Can't open linked file for writing

你試圖寫入文件，但該文件無法被覆蓋，且該文件是鏈接類型 (硬鏈接或者符號鏈接)。
其實，包含該鏈接或文件的目錄可寫的時候並非不可寫入。只不過 Vim 不知道你是要刪
除該鏈接並在同樣的位置寫入實際文件呢，還是要刪除鏈接到的文件並用新文件覆蓋之。
如果你確實需要用這個名字寫入文件，請手動刪除這個鏈接或者文件，或者改變權限，使
得 Vim 可以對它進行覆蓋。

							*E46*  >
  Cannot change read-only variable "{name}"

你試圖給一個函數參數 |a:var| 或者 Vim 的內部只讀變量 |v:var| 賦值。

							*E90*  >
  Cannot unload last buffer

Vim 要求必須有一個載入的緩衝區，不然窗口中就沒有東西可以顯示了。

							*E40*  >
  Can't open errorfile <filename>

使用 ":make" 或者 ":grep" 命令時: 不能打開用於保存錯誤信息或者 grep 的輸出結果
的文件。可能原因如下:
- 'shellredir' 的值不正確。
- 外殼改變了目錄，使得錯誤文件寫到別的目錄裡。這可以通過改變 'makeef' 修正，但
  是 make 命令還是在錯誤的目錄下執行。
- 'makeef' 的值不正確。
- 'grepprg' 或者 'makeprg' 不能執行。這一點不一定總能檢測到 (尤其在 MS-Windows
  上)。檢查你的 $PATH。

 >
  Can't open file C:\TEMP\VIoD243.TMP

MS-Windows 上，期待讀入外部命令輸出的結果但是命令沒有正確執行時會顯示此信息。
這可能有多種原因。檢查 'shell'、'shellquote'、'shellxquote'、 'shellslash' 和
相關的選項。這個消息也有可能是由找不到外部命令引起的。但錯誤信息無法區別。

							*E12*  >
  Command not allowed from exrc/vimrc in current dir or tag search

因為安全原因，有的命令不允許被執行。這些命令通常來自當前目錄的 .exrc 或者
.vimrc 文件或標籤文件。另見 'secure'。

							*E74*  >
  Command too complex

某個映射產生了太長的命令行字符串。可能是因為一個映射間接的引用了自己。

>
  CONVERSION ERROR

寫入文件時，這個錯誤消息的出現意味著部分內容在從內部 UTF-8 格式轉化到文件本身
格式的過程中丟失。文件因此不會被標為未修改。如果你關心丟失的信息，把
'fileencoding' 選項設為別的能夠處理緩衝區的字符的值並重新寫一次。如果你覺得無
所謂，直接放棄緩衝區或者復位 'modified' 選項。

							*E302*  >
  Could not rename swap file

如果文件名改變，Vim 試圖對 |swap-file| 也進行換名。如果不成功，那麼依然使用舊
的交換文件。一般情況下這沒有什麼問題。

							*E43* *E44*  >
  Damaged match string
  Corrupted regexp program

Vim 的內部問題並因而產生了一個不合法的正規表達式。如果你知道如何重現，請報告。
|bugs|

							*E208* *E209* *E210*  >
  Error writing to "{filename}"
  Error closing "{filename}"
  Error reading "{filename}"

如果 Vim 試圖給一個文件換名，但是簡單的文件名更名不能工作時，會嘗試進行文件復
制，這些錯誤消息出現在這一步也失敗的時候。結果可能是，原始文件和目標文件都存
在，但是目標文件不完整。

>
  Vim: Error reading input, exiting...

Vim 在需要輸入卻不能讀入鍵入的字符時，就會報錯。Vim 沒法繼續，除了退出以外別無
選擇。這可能發生在標準輸入和標準錯誤 (stderr) 都被重定向，而一個自身不會退出
Vim 的腳本被執行的情況。

							*E47*  >
  Error while reading errorfile

不能讀入錯誤文件。此消息的發生_不_是因為錯誤信息不能識別。

							*E80*  >
  Error while writing

文件的寫入不能成功完成，該文件可能不完整。

							*E13* *E189*  >
  File exists (add ! to override)
  "{filename}" exists (add ! to override)

系統為了保護你，不讓你不小心覆蓋已存在文件。如有必要，使用相同的命令但在其後加
"!"。例如: >
	:w /tmp/test
可以改成: >
	:w! /tmp/test
<
							*E768*  >
  Swap file exists: {filename} (:silent! overrides)

系統能夠保護你不去覆蓋一個正在被 Vim 編輯的文件。在使用 ":w! filename" 並且發
現一個交換文件時會出現這種情況。
- 如果交換文件是由以前某個崩潰的編輯對話留下的，也許你希望刪除這個交換文件。編
  輯 {filename} 來找出關於該交換文件的信息。
- 如果你希望強行保存，那麼在命令前加 ":silent!"。例如： >
	:silent! w! /tmp/test
< 之所以需要這個特殊命令，是因為你已經用 ! 來覆蓋已經存在的文件了。

							*E139*  >
  File is loaded in another buffer

你試圖寫入文件，但是別的緩衝區正在使用你寫入的名字。不這麼做會導致相同文件的兩
個版本。

							*E142*  >
  File not written: Writing is disabled by 'write' option

'write' 選項被關閉。這使得所有試圖寫入文件的命令都會產生這個消息。這可能由
|-m| 命令行參數引起。你可以用 ":setwrite" 打開 'write' 選項。

							*E25*  >
  GUI cannot be used: Not enabled at compile time

你運行的 Vim 版本不支持 GUI 代碼。所以 "gvim" 和 ":gui" 都不工作。

							*E49*  >
  Invalid scroll size

這是由 'scroll'、'scrolljump' 或者 'scrolloff' 選項的值不正確引起的。

							*E17*  >
  "{filename}" is a directory

你試圖寫入一個和目錄名字相同的文件。這是不可以的。你可能想要附加一個文件名。

							*E19*  >
  Mark has invalid line number

你使用一個位置標記，但它所指的行號不存在。這可能是因為你使用了指向別的文件的位
置標記，而別的程序刪除了其中的一些行引起的。

							*E219* *E220*  >
  Missing {.
  Missing }.

在文件名中使用了 {} 構造，但只有 { 而沒有匹配的 } 或者相反。該構造的使用方法
是: 用 {foo,bar} 匹配 "foo" 和 "bar"。

							*E315*  >
  ml_get: invalid lnum: {number}

內部錯誤。如果你知道如何重現該問題，請提交漏洞報告。|bugreport.vim|。

							*E173*  >
  {number} more files to edit

你試圖退出，但是參數列表裡的末項還沒有被編輯到。這保護你在還有文件要編輯的時候
意外的退出。見 |argument-list|。如果你堅持想退出，再試一次就行了。

							*E23* *E194*  >
  No alternate file
  No alternate file name to substitute for '#'

輪換文件還沒有定義。見 |alternate-file|。

							*E32*  >
  No file name

當前的緩衝區還沒有名字。要寫入，可用 ":w fname"。或者用 ":file fname" 先給出緩
沖區的名字。

							*E141*  >
  No file name for buffer {number}

一個被改變的緩衝區沒有文件名。所以不能被寫入。你需要先給緩衝區一個文件名: >
	:buffer {number}
	:file {filename}
<
							*E33*  >
  No previous substitute regular expression

在 ":substitute" 命令裡，模式裡使用的 '~' 字符會被替換成上次用到的模式。如果這
個命令還沒用過，就會失敗。見 |/~|。如果使用 ":s/pat/%/"，也會發生類似問題，其
中的 "%" 表示上次的替代字符串。

							*E35*  >
  No previous regular expression

使用空搜索模式會引用上次用到的模式。如果沒有上一次搜索，那麼就會失敗。

							*E24*  >
  No such abbreviation

你使用了 ":unabbreviate" 命令，但是所帶的參數不是一個已有的縮寫。這個命令的各
種變形 ":cunabbrev"、":iunabbrev" 等都會給出相同的消息。檢查一下尾部的空白。

>
  /dev/dsp: No such file or directory

只有在帶 Gnome 支持的 GTK GUI 才會給出。Gnome 試圖使用音頻設備但是它不存在。你
可以忽略這個錯誤。

							*E31*  >
  No such mapping

你使用了 ":unmap" 命令，但是所帶的參數不是已有的映射。這個命令的各種變形
":cunmap"、":unmap!" 等都會給出相同的消息。一些提示:
- 檢查一下尾部的空白。
- 如果是局部於緩衝區的映射，需要使用 ":unmap <buffer>"。
  |:map-<buffer>|

							*E37* *E89*  >
  No write since last change (add ! to override)
  No write since last change for buffer {N} (add ! to override)

你試圖放棄 |abandon| 一個有過改動的文件。Vim 不讓你這麼做，以免丟失你的工作。
你可以把改動的部分用 ":w" 寫回，如果你堅持要放棄而不介意並丟失所有的改變，可以
在使用的命令之後加上 '!' 字符。例如: >
	:e other_file
可以改為: >
	:e! other_file
<
							*E162*  >
  No write since last change for buffer "{name}"

如果你退出 Vim 時有的緩衝區已經被改變了就會發生這個錯誤。你或者可以寫入改動過
的緩衝區 (用 |:w|)，或者可以用一個強迫放棄緩衝區的命令，比如，":qa!"。要小心，
不要丟掉你想保留的改變。有些緩衝區可能已經被忘記了，尤其是置位了 'hidden' 的時
候。

>
  [No write since last change]

如果你執行 Shell 命令時至少一個緩衝區被改變了，就會發生這個錯誤。要不想顯示這
個信息，可以復位 'warn' 選項。

							*E38*  >
  Null argument

Vim 內部出錯，產生一個 NULL 指針。如果你知道如何重現，請報告。|bugs|

							*E172*  >
  Only one file name allowed

":edit" 命令只支持一個文件名。如果你需要指定多個，可用 ":next" |:next|。

						*E41* *E82* *E83* *E342*  >
  Out of memory!
  Out of memory!  (allocating {number} bytes)
  Cannot allocate any buffer, exiting...
  Cannot allocate buffer, using other one...

噢，噢。你可能作了一些特別複雜的操作，或者有其它程序正在佔用你的內存。小心！
Vim 沒有完全準備好內存溢出的情況。首先確保所有的改變被保存。然後試圖解決內存的
短缺問題。要確保安全無虞，先退出 Vim，再重新開始。

緩衝區只是部分保存在內存裡，所以編輯一個很大的文件不太可能導致內存溢出錯誤。撤
銷信息則是完全保存在內存裡，可以用以下選項減少內存的佔用:
- 'undolevels'  設為較小的值，或 -1 以完全關閉之。對影響所有行的改變這會很有幫
  助。
- 'undoreload' 設為零以關閉之。

另見 |msdos-limitations|。

							*E339*  >
  Pattern too long

這只有可能發生在 16 位整數的系統上: 編譯的正規表達式模式超過了 65000 個字節。
試試短一些的模式。

							*E45*  >
  'readonly' option is set (add ! to override)

你試圖寫入一個標為只讀的文件。如果要堅持這麼做，或者復位 'readonly' 選項，或者
在你用的命令後面增加 '!' 字符。例如: >
	:w
可以改為: >
	:w!
<
							*E294* *E295* *E301*  >
  Read error in swap file
  Seek error in swap file read
  Oops, lost the swap file!!!

Vim 試圖從 |swap-file| 裡讀取文本時出了問題。相關緩衝區的文本現在可能已經沒法
用了！在寫入緩衝區之前仔細檢查。你可以先寫到別的文件上，然後比較兩者的差異。

							*E192*  >
  Recursive use of :normal too deep

你在使用 ":normal" 命令，而它的參數又遞歸使用 ":normal" 命令。'maxmapdepth' 限
制最高的遞歸層數。下例顯示如何得到這個消息: >
	:map gq :normal gq<CR>
如果你輸入 "gq"，就會執行這個映射，它又會再次調用 "gq"。

							*E22*  >
  Scripts nested too deep

腳本可以通過 "-s" 命令行參數或者 ":source" 命令讀取。腳本又可以讀取別的腳本。
這可以繼續大概 14 層。如果需要更多的嵌套，Vim 假設其中出現了遞歸的循環，所以用
此錯誤信息停止。

							*E319*  >
  Sorry, the command is not available in this version

你使用了目前使用的 Vim 版本不存在的命令。在編譯 Vim 的時候，許多不同的特性可以
打開或者關閉。這取決於編譯時選擇要多大的 Vim，還有具體操作系統。能用的特性可見
|+feature-list|。|:version| 命令顯示 Vim 編譯時所帶的特性。

							*E300*  >
  Swap file already exists (symlink attack?)

當 Vim 試圖打開交換文件並發現它已經存在，而且是一個符號鏈接時，顯示該錯誤。這
不應該發生，因為 Vim 已經檢查過該文件不存在。除非別人同時打開了相同的文件 (非
常不太可能) 或者有人試圖一個符號鏈接攻擊 (如果編輯 /tmp 下的文件或者
'directory' 以 "/tmp" 開始時可能發生。這是一個壞的選擇)。

							*E432*  >
  Tags file not sorted: {file name}

Vim (和 Vi) 期待標籤文件以 ASCII 順序排序。然後可以使用二分法搜索，這比線性查
找快很多。如果你的標籤文件沒有適當的排序，復位 |'tagbsearch'| 選項。
這個消息只有在 Vim 在搜索標籤時發生問題的時候才會給出。有的時候即使標籤文件沒
有適當排序，這個消息也不會給出。

							*E460*  >
  The resource fork would be lost (add ! to override)

在 Macintosh (classic) 上，在寫入文件時，Vim 試圖保留文件的所有信息，包括它的
資源派生。如果這做不到，你就會得到這個錯誤信息。在命令之後附加 "!" 強迫寫入
(但丟失了該項信息)。

							*E424*  >
  Too many different highlighting attributes in use

Vim 只能處理 223 種不同的高亮。如果遇到了這個限制，你一定用了太多的帶不同參數
的 |:highlight| 命令。":highlight link" 不計算在內。

							*E77*  >
  Too many file names

在擴展文件名的時候，找到了多於一個的匹配。而使用的命令只支持單一匹配的參數。

							*E303*  >
  Unable to open swap file for "{filename}", recovery impossible

Vim 不能建立交換文件。你可以繼續編輯該文件，但如果 Vim 不正常地退出，你所有的
改變就丟失了。同時，Vim 可能在編輯大文件時消耗大量的內存。要避免這個錯誤，你可
能想改變 'directory' 選項。見 |swap-file|。

							*E140*  >
  Use ! to write partial buffer

將區域對應緩衝區的部分內容寫到一個已有的文件是不常見的。這可能是個錯誤 (比如，
如果在可視模式下使用 ":w" 的時候)，所以 Vim 需要在命令後使用 !，比如:
":3,10w!"。
>

  Warning: Cannot convert string "<Key>Escape,_Key_Cancel" to type
  VirtualBinding

啟動時的時候可能出現這樣的錯誤。這不是 Vim 的問題，而是你的 X11 配置有問題。你
可以在這裡看到如何解決這個問題的提示:
http://groups.yahoo.com/group/solarisonintel/message/12179。
[此 URL 已不可用]

							*W10*  >
  Warning: Changing a readonly file

文件是只讀的，而你堅持要修改它。你可以用 |FileChangedRO| 自動命令事件來避免這
個消息 (該自動命令必須復位 'readonly' 選項)。'modifiable' 可以完全禁止修改文
件。
只有 'readonly' 置位後第一次作改變時，才顯示這條消息。

							*W13*  >
  Warning: File "{filename}" has been created after editing started

你在 Vim 裡開始編輯文件時它並不存在，但是現在存在了。你可以決定保留 Vim 的版本
還是新建的文件。這個消息在 'buftype' 非空的時候不會給出。

							*W11*  >
  Warning: File "{filename}" has changed since editing started

你已經開始編輯的文件現在有了別的時間戳 (修改時間)，而且內容也發生了改變 (更精
確地說，使用當前選項設置和自動命令重新讀入文件會給你不同的文本)。這可能是因為
別的程序修改了文件。你需要自己研究發生了什麼事，並決定保留哪個版本的內容。如果
你想自動處理，參見 'autoread' 選項。如果 'buftype' 不為空，該消息不會給出。

有一種情況即使沒發生任何錯誤也會得到這個消息: 在 Windows 上，你在夏令時開始的
那天保存一個文件。有幾種方法可以修正之:
- 在你的 autoexec.bat 增加這行: >
	   SET TZ=-1
< 根據你的時區調整 "-1" 為其它值。
- 關閉 "根據夏令時時間自動調整時鐘"。
- 第二天再次寫入文件。或者把時鐘設為第二天，寫入文件兩次，再把時鐘調回來。

							*W12*  >
  Warning: File "{filename}" has changed and the buffer was changed in Vim as well

和上面類似，而這個 Vim 裡這個文件的緩衝區也改變了。你必須決定要保留這個 Vim 的
版本還是磁盤上的。這個消息在 'buftype' 非空時不會給出。

							*W16*  >
  Warning: Mode of file "{filename}" has changed since editing started

緩衝區的時間戳發生了改變時，內容保持不變但是模式 (許可權限) 發生了改變。這通常
是從版本控制系統裡取出文件而復位了只讀位引起的。重讀文件應該是安全的選擇。置位
'autoread' 可以自動重讀文件。

							*E211*  >
  File "{filename}" no longer available

你已經開始編輯的文件現在不再存在或不能訪問。確定你把緩衝區寫到某處，以免丟失改
動。如果 'buftype' 非空，該消息不會給出。

							*W14*  >
  Warning: List of file names overflow

你一定用了太多的緩衝區了。可能兩個緩衝區使用相同的號碼，這會引起問題。你可能要
退出 Vim 並重啟。

							*E296* *E297*  >
  Seek error in swap file write
  Write error in swap file

這通常是因為磁盤空間滿引起的。Vim 不能把文本寫入 |swap-file| 。它本身並無害，
但如果 Vim 意外退出，有些文本可能丟失，而無法恢復。如果這個問題持續存在，Vim
可能會內存溢出。

						*connection-refused*  >
  Xlib: connection to "<machine-name:0.0" refused by server

當 Vim 試圖連接到 X 服務器，但是 X 服務器不允許連接的時候，就會發生這個錯誤。
只有建立 X 服務器的連接才能恢復標題和得到 xterm 的剪貼板的支持。不幸的是，這
個錯誤信息無法避免，除非關閉 |+xterm_clipboard| 和 |+X11| 特性。

							*E10*  >
  \\ should be followed by /, ? or &

命令行以反斜槓開始，或者命令的範圍包含了在錯誤位置出現的反斜槓。通常，這是因為
命令行的續行功能被關閉了。從 'cpoptions' 選項裡去掉 'C' 標誌位就可以打開這一功
能。使用 ":set nocp" 也可。

							*E471*  >
  Argument required

這是由 Ex 命令執行時需要的參數沒有提供引起的。

							*E474* *E475*  >
  Invalid argument: {arg}

執行 Ex 命令時使用了非法的參數。

							*E488*  >
  Trailing characters

在不允許有參數的 Ex 命令後帶了參數。

							*E477* *E478*  >
  No ! allowed
  Don't panic!

給不支持帶 ! 後綴的 Ex 命令加了 "!" 命令。

							*E481*  >
  No range allowed

在不支持範圍參數的 Ex 命令前加了範圍。見 |cmdline-ranges|。

							*E482* *E483*  >
  Can't create file {filename}
  Can't get temp file name

Vim 不能建立臨時文件。

							*E484* *E485*  >
  Can't open file {filename}
  Can't read file {filename}

Vim 不能讀臨時文件。

							*E464*  >
  Ambiguous use of user-defined command

有兩個用戶定義的命令，它們有相同的前綴，而你用命令行補全來執行其中的一個。
|user-cmd-ambiguous|
示例: >
	:command MyCommand1 echo "one"
	:command MyCommand2 echo "two"
	:MyCommand
<
							*E492*  >
  Not an editor command

你試圖執行一個既不是 Ex 命令也不是用戶定義的命令。

==============================================================================
3. 消息							*messages*

這是一個 (不完全) Vim 給出的各種消息的總覽:

			*hit-enter* *press-enter* *hit-return*
			*press-return* *hit-enter-prompt*

  Press ENTER or type command to continue

如果屏幕上有東西要你閱讀，而屏幕即將刷新的時候，就會給出該消息:
- 執行完外部命令以後 (例如，":!ls" 和 "=")。
- 狀態行顯示的內容超過了窗口的寬度或者跨越到 'showcwd' 或者 'ruler' 的輸出位
  置。

-> 按 <Enter> 或者 <Space> 可以重畫屏幕並繼續，除此以外就像該鍵沒按過一樣。
-> 按 ":" 或者其它普通模式的命令字符開始執行該命令。
-> 按 'k'、<Up>、'u'、'b' 或 'g' 可以使消息回滾。這和 |more-prompt| 中的工作方
   式一樣。只有關閉 'compatible' 並且打開 'more' 時才有效。
-> 消息的滾動離開屏幕的頂部時，按 'j'、'f'、'd' 或 <Down> 沒有效果，
   'compatible' 關閉且 'more' 打開。這是為了避免按 'j' 或 'f' 太多而使得消息完
   全消失。
-> 按 <C-Y> 複製 (抽出) 一個無模式的選擇到剪貼板寄存器中。
-> 使用菜單。應用命令行模式定義的字符。
-> 如果 'mouse' 包含 'r' 標誌位，按鼠標左鍵和按 <Space> 效果相同。不過這使得選
   擇文本成為不可能。
-> GUI 模式上，在末行按鼠標左鍵和按 <Space> 效果相同。
{Vi: 只有 ":" 命令得到處理}

如果你不小心按了 <Enter> 或 <Space>，而你還想看顯示的消息，可以使用 |g<|。這個
命令只有 'more' 置位時才有效。

要減少 hit-enter 提示的次數:
- 把 'cmdheight' 設為 2 或者更高。
- 在 'shortmess' 裡增加標誌位。
- 復位 'showcmd' 和/或 'ruler'。

如果腳本導致出現按回車的提示而你不明所以，|v:scrollstart| 變量可能很有用。

另見 'mouse'。hit-enter 消息使用 |hl-Question| 高亮組。


						*more-prompt* *pager*  >
  -- More --
  -- More -- SPACE/d/j: screen/page/line down, b/u/k: up, q: quit

如果屏幕被消息全部佔據，本消息就可能出現。只有在 'more' 選項打開的時候它才會出
現。它的顯示使用 |hk-MoreMsg| 高亮組。

輸入					效果 ~
     <CR> 或 <NL> 或 j 或 <Down>	下一行
     d					下一頁 (半屏)
     <Space> 或 f 或 <PageDown>		下一屏
     G					一直往下，直到出現按回車的提示

     <BS> 或 k 或 <Up>			往回一行 (*)
     u					往上一頁 (半屏) (*)
     b 或 <PageUp>			上一屏 (*)
     g					回到開始處 (*)

     q、<Esc> 或 CTRL-C			終止列表
     :					終止列表並進入命令行
    <C-Y>				抽出 (複製) 無模式的選擇
					|modeless-selection| 到剪貼板
					("* 和 "+ 寄存器)
    {menu-entry}			命令行模式裡定義的菜單項。
    <LeftMouse> (**)			下頁

所有其它的鍵保留它們本來的含義。

(*)  反向滾動在 {Vi 中無此功能}。只回滾到消息開始滾動時的位置。
(**) 鼠標左鍵的點擊只有在以下情況下才生效:
     - GUI: 屏幕的最後一行。
     - 'mouse' 裡定義了 'r' (不過這時文本選擇不會工作)。


注意: 鍵的輸入是直接從終端取得的。它不通過映射，預輸入也被忽略。

|g<| 命令用於查看前一個命令輸出的最後一頁。如果在提示按回車的時候不小心按了空
格 <Space> 鍵，那麼該命令尤其有用。

 vim:tw=78:ts=8:ft=help:norl:
