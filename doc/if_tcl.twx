*if_tcl.txt*    For Vim version 7.3.  最近更新: 2009年4月


		  VIM 參考手冊	    by Ingo Wilken
				譯者: Willis
				http://vimcdoc.sf.net


Vim 的 Tcl 接口				*tcl* *Tcl* *TCL*

1. 命令					|tcl-ex-commands|
2. Tcl 命令				|tcl-commands|
3. Tcl 變量				|tcl-variables|
4. Tcl 窗口命令				|tcl-window-cmds|
5. Tcl 緩衝區命令			|tcl-buffer-cmds|
6. 雜項；Tcl 的輸出			|tcl-misc| |tcl-output|
7. 已知漏洞和問題			|tcl-bugs|
8. 示例					|tcl-examples|
9. 動態調入				|tcl-dynamic|

{Vi 沒有這些命令} *E280* *E281*

只有在 Vim 編譯時加入 |+tcl| 特性時，才有 Tcl 接口。

警告: 可能還有沒發現的漏洞。請把漏洞報告、意見、建議等等發送到
<Ingo.Wilken@informatik.uni-oldenburg.de>

==============================================================================
1. 命令					*tcl-ex-commands* *E571* *E572*

							*:tcl* *:tc*
:tc[l] {cmd}		執行 Tcl 命令 {cmd}。

:[range]tc[l] << {endmarker}
{script}
{endmarker}
			執行 Tcl 腳本 {script}。
			注意: 如果編譯時沒有加入 Tcl 特性，該命令不會工作。要
			避免錯誤，參見 |script-here|。

{endmarker} _不能_有前導空白。若 "<<" 之後省略 {endmarker}，{script} 之後必須
由句號 '.' 結束，類似於 |:append| 和 |:insert| 命令。
這種形式的 |:tcl| 命令主要用於在 Vim 腳本裡包含 tcl 代碼。

示例: >
	function! DefineDate()
	    tcl << EOF
	    proc date {} {
		return [clock format [clock seconds]]
	    }
	EOF
	endfunction
<

							*:tcldo* *:tcld*
:[range]tcld[o] {cmd}	對 [range] 範圍內的每行執行 Tcl 命令 {cmd}。執行過程
			中，變量 "line" 被賦值為每行的文本，"lnum" 為相應的行
			號。改變 "line" 會改變文本，但是你不能用此命令增加或者
			刪除行。如果 {cmd} 有錯，整個命令被中斷。缺省的範圍
			[range] 是整個文件，"1,$"。參見 |tcl-var-line| 和
			|tcl-var-lnum|。 {Vi 無此功能}

							*:tclfile* *:tclf*
:tclf[ile] {file}	執行 Tcl 腳本文件 {file}。它和 ":tcl source {file}" 相
			當，但可用文件名自動補全功能。 {Vi 無此功能}


注意 Tcl 對像 (類似於變量) 在命令之間保持值不變。就像在 Tcl 外殼裡使用那樣。

|sandbox| 裡不能執行 Tcl 命令。

==============================================================================
2. Tcl 命令						*tcl-commands*

Tcl 完全通過 "::vim" 命名空間的命令訪問 vim 的功能。已實現以下功能: >

	::vim::beep			# 猜猜看。
	::vim::buffer {n}		# 為單個緩衝區建立 Tcl 命令。
	::vim::buffer list		# 為所有緩衝區建立 Tcl 命令。
	::vim::command [-quiet] {cmd}	# 執行 Ex 命令。
	::vim::expr {expr}		# 使用 Vim 的表達式計算器。
	::vim::option {opt}		# 得到 vim 選項值。
	::vim::option {opt} {val}	# 設置 vim 選項值。
	::vim::window list		# 為所有窗口建立 Tcl 命令。

命令:
	::vim::beep					*tcl-beep*
	鳴笛。沒有返回值。

	::vim::buffer {n}				*tcl-buffer*
	::vim::buffer exists {n}
	::vim::buffer list
	提供對 vim 緩衝區的訪問。如果給出整數參數，為相應的緩衝區建立緩衝區命
	令 (參見 |tcl-buffer-cmds|)，並返回其名稱作為結果。非法的緩衝區號會產
	生標準 Tcl 錯誤。要測試哪些緩衝區號合法，可用 Vim 的內部函數: >
		set nbufs [::vim::expr bufnr("$")]
		set isvalid [::vim::expr "bufexists($n)"]
<	"list" 選項則為每個合法的緩衝區建立緩衝區命令，並返回所有命令名稱的列
	表作為結果。例如: >
		set bufs [::vim::buffer list]
		foreach b $bufs { $b append end "The End!" }
<	"exists" 選項檢查給定序號的緩衝區是否存在。例如: >
		if { [::vim::buffer exists $n] } { ::vim::command ":e #$n" }
<	該命令將來也許會被某個變量代替。要得到當前緩衝區，另見
	|tcl-var-current|。

	::vim::command {cmd}				*tcl-command*
	::vim::command -quiet {cmd}
	執行 vim (ex 模式) 的 {cmd} 命令。任何涉及緩衝區或者窗口的 Ex 命令均
	使用當前緩衝區/窗口。除了標準的 Tcl 錯誤代碼外，不會返回任何其他的結
	果。在命令執行完畢後，"::vim::current" 變量被更新。
	"-quiet" 標誌位屏蔽 vim 產生的任何錯誤信息。
	例如: >
		::vim::command "set ts=8"
		::vim::command "%s/foo/bar/g"
<	要執行普通模式下的命令，使用 "normal" (參見 |:normal|): >
		set cmd "jj"
		::vim::command "normal $cmd"
<	另見 |tcl-window-command| 和 |tcl-buffer-command|。

	::vim::expr {expr}				*tcl-expr*
	使用 vim 的內部表達式計算器計算表達式 {expr} (參見 |expression|)。任何
	查詢緩衝區或窗口屬性的表達式均使用當前緩衝區/窗口。結果以字符串形式返
	回。列表 |List| 通過連接項目並在項目間插入換行符來轉化為字符串。
	例如: >
		set perl_available [::vim::expr has("perl")]
<	另見 |tcl-window-expr| 和 |tcl-buffer-expr|。

	::vim::option {opt}				*tcl-option*
	::vim::option {opt} {value}
	如果沒有第二個參數，查詢 vim 選項之值。不然，設置 vim 選項值為
	{value}，並返回原先的值作為結果。任何標為 "局部於緩衝區" 或 "局部於窗
	口" 的選項只影響當前的緩衝區/窗口。該命令不會改變全局值，而應該用
	":set" 命令。對於布爾值，{value} 必須是 "0" 或者 "1"，或者以下的關鍵字
	"on"、"off" 或者 "toggle"。選項列表請參見 |option-summary|。
	示例: >
		::vim::option ts 8
<	另見 |tcl-window-option| 和 |tcl-buffer-option|。

	::vim::window {option}				*tcl-window*
	提供對 vim 窗口的訪問。目前，只實現了 "list" 選項，即為每個窗口建立窗
	口命令 (參見 |tcl-windows-cmds|)，並返回所有命令名稱的列表作為結果。
	示例: >
		set wins [::vim::window list]
		foreach w $wins { $w height 4 }
<	該命令將來也許會被某個變量代替。要得到當前窗口，另見
	|tcl-var-current|。

==============================================================================
3. Tcl 變量						*tcl-variables*

::vim 命名空間包含若干變量。Tcl 解釋器調用時，它們被建立並賦予它們的當前值。 >

	::vim::current		# "當前" 對象的數組
	::vim::lbase		# 第一行的行號
	::vim::range		# 當前範圍行號的數組
	line			# 當前行號的字符串表示 (只限於 :tcldo)
	lnum			# 當前行號 (只限於 :tcldo)

命令:
	::vim::current					*tcl-var-current*
	這是一個提供對各種 vim "當前" 對像訪問的數組。每次 "::vim::command" 執
	行後都會更新該數組的內容，因為命令的執行可能改變 vim 的當前設定 (例
	如，刪除當前緩衝區)。
	其中，"buffer" 元素包含當前緩衝區的緩衝區命令名，可用來直接調用緩衝區
	命令 (參見 |tcl-buffer-cmds|)。該元素只讀。
	示例: >
		$::vim::current(buffer) insert begin "Hello world"
<	"window" 元素則包含當前窗口的窗口命令名。可用來直接調用窗口命令 (參見
	|tcl-window-cmds|)。該元素只讀。
	示例: >
		$::vim::current(window) height 10
<
	::vim::lbase					*tcl-var-lbase*
	該變量控制 Tcl 如何看待行號。如果設為 '1'，行號與列號從 1 開始。這樣，
	Tcl 命令和 vim 表達式行號的使用方式一致。如果設為 '0'，則行號與列號從
	0 開始。如果你傾向於把緩衝區看成 Tcl 的列表或者把行看成 Tcl 字符串，
	那麼 Tcl 中標準的返回索引的命令 (例如 "lsort" 或 "string first") 就適
	用於這種設置。缺省值為 '1'。目前，任何非零的值都被看成 '1'，但你的腳本
	不應依賴於此假定。另見 |tcl-linenumbers|。

	::vim::range					*tcl-var-range*
	這是一個由三個元素組成的數組: "start"、"begin" 和 "end"。它包含當前行
	範圍的起始和結尾行號。"begin" 等價於 "start"。該變量只讀。參見
	|tcl-examples|。

	line						*tcl-var-line*
	lnum						*tcl-var-lnum*
	這些全局變量只在 ":tcldo" 這個 Ex 命令執行時可用。 它們分別包含文本和
	數字形式的當前行號。當 ":tcldo" 激活的 Tcl 命令執行完畢時，當前行被設
	為 "line" 變量的內容，除非該變量被 Tcl 命令刪除 (unset)。 "lnum" 變量
	是只讀的。這些變量不在 "::vim" 命名空間裡，這是為了 ":tcldo" 裡使用時
	能減少點輸入 (將來的版本裡可能會改變)。 另見 |tcl-linenumbers|。

==============================================================================
4. Tcl 窗口命令						*tcl-window-cmds*

窗口命令代表 vim 的窗口。以下若干命令可以創建之:
	::vim::window list			|tcl-window|
	緩衝區命令的 "windows" 選項		|tcl-buffer-windows|
::vim::current(window) 變量包含當前窗口的窗口命令名。當 vim 窗口關閉時， 對應
的窗口命令自動被刪除。

讓我們假設窗口命令名保存在 Tcl 變量 "win" 中，亦即，$win 調用該命令。那麼可以
使用以下的選項: >

	$win buffer		# 創建窗口對應緩衝區的 Tcl 命令。
	$win command {cmd}	# 使用窗口的上下文，執行 Ex 命令。
	$win cursor		# 得到當前的光標位置。
	$win cursor {var}	# 把光標位置保存在數組變量裡。
	$win cursor {row} {col}	# 設置光標位置。
	$win delcmd {cmd}	# 在窗口被關閉前，執行 Tcl 命令。
	$win expr {expr}	# 使用窗口的上下文，計算 vim 表達式。
	$win height		# 報告窗口的高度。
	$win height {n}		# 設置窗口的高度。
	$win option {opt} [val]	# 使用窗口的上下文，得到/設置 vim 選項。

選項:
	$win buffer					*tcl-window-buffer*
	創建窗口對應緩衝區的 Tcl 命令，並返回其名字作為結果。該名字應該被存在
	變量裡: >
		set buf [$win buffer]
<	$buf 現在成為合法的 Tcl 命令。參見 |tcl-buffer-cmds| 瞭解其可用選項。

	$win cursor					*tcl-window-cursor*
	$win cursor {var}
	$win cursor {row} {col}
	在沒有參數的情況下，報告 (字符串形式的) 當前的光標位置。該形式可以被轉
	換成 Tcl 的數組變量: >
		array set here [$win cursor]
<	"here(row)" 和 "here(column)" 現在包含了光標位置。
	在有一個參數的情況下，該參數被解釋為 Tcl 數組變量名，該數組變量應該有
	兩個元素: "row" 和 "column"。它們用來設置光標的新位置: >
		$win cursor here	;# 不是 $here !
<	在有兩個參數的情況下，設置光標到對應的行和列: >
		$win cursor $here(row) $here(column)
<	非法的位置產生標準 Tcl 錯誤，但可用 "catch" 捕獲。行號和列號的值和
	"::vim::lbase" 有關。參見 |tcl-var-lbase|。

	$win delcmd {cmd}				*tcl-window-delcmd*
	註冊窗口的關閉回調函數 {cmd}。該命令 (在全局範圍下) 在窗口被關閉前調
	用。複雜的命令應該用 "list" 構造: >
		$win delcmd [list puts vimerr "window deleted"]
<	另見 |tcl-buffer-delcmd|。

	$win height					*tcl-window-height*
	$win height {n}
	在沒有參數的情況下，報告當前的窗口高度。在有參數的情況下，設置窗口高度
為 {n}，並報告新的高度 (有可能和 {n} 不同)。
	
	$win command [-quiet] {cmd}			*tcl-window-command*
	$win expr {expr}				*tcl-window-expr*
	$win option {opt} [val]				*tcl-window-option*
	它們和 "::vim::command" 類似，只不過執行在 $win 代表的窗口的上下文下，
	而不是當前窗口。例如，設置 "局部於窗口" 的選項涉及的是 $win 窗口。任何
	涉及或查詢緩衝區的命令使用的該窗口所顯示的緩衝區 (亦即，"$win buffer"
	所指定的緩衝區)。參見 |tcl-command|、|tcl-expr| 和 |tcl-option|。
	示例: >
		$win option number on

==============================================================================
5. Tcl 緩衝區命令					*tcl-buffer-cmds*

緩衝區命令代表 vim 的緩衝區。以下若干命令可以創建之:
	::vim::buffer {N}			|tcl-buffer|
	::vim::buffer list			|tcl-buffer|
	"buffer" option of a window command	|tcl-window-buffer|
::vim::current(buffer) 變量包含當前緩衝區的緩衝區命令名。vim 緩衝區被刪除時，
對應的緩衝區命令自動被刪除。緩衝區一旦改變，緩衝區裡的所有的位置標記會進行自動
調整。Tcl 命令對緩衝區內容所做的任何改變都可以通過 vim 的 "undo" 命令撤銷 (參
見 |undo|)。

讓我們假設緩衝區命令名保存在 Tcl 變量 "buf" 中，亦即，$buf 調用該命令。那麼可
以使用以下的選項: >

	$buf append {n} {str}	# 在緩衝區的第 {n} 行之後添加一行內容。
	$buf command {cmd}	# 使用緩衝區上下文。執行 Ex 命令。
	$buf count		# 報告緩衝區的行數。
	$buf delcmd {cmd}	# 在緩衝區被刪除前，執行 Tcl 命令。
	$buf delete {n}		# 刪除一行。
	$buf delete {n} {m}	# 刪除多行。
	$buf expr {expr}	# 使用窗口的上下文，計算 vim 表達式。
	$buf get {n}		# 得到字符串形式的一行內容。
	$buf get {n} {m}	# 得到列表形式的多行內容。
	$buf insert {n} {str}	# 在緩衝區裡插入一行，使之成為第 {n} 行。
	$buf last		# 報告緩衝區末行的行號。
	$buf mark {mark}	# 報告緩衝區位置標記的位置。
	$buf name		# 報告緩衝區使用的文件名。
	$buf number		# 報告緩衝區號。
	$buf option {opt} [val]	# 使用緩衝區的上下文，得到/設置 vim 選項。
	$buf set {n} {text}	# 替換一行。
	$buf set {n} {m} {list}	# 替換多行。
	$buf windows		# 創建緩衝區對應窗口的 Tcl 命令。
<
							*tcl-linenumbers*
多數緩衝區命令需要行號作為參數。Tcl 如何處理這些數字取決於 "::vim::lbase" 變量
(參見 |tcl-var-lbase|)。除了數字形式的行號以外，還可以使用如下的關鍵字:
"top"、"start"、"begin"、"first" (以上均代表首行)，"bottom"、"end" 和 "last"
(以上均代表末行)。

選項:
	$buf append {n} {str}				*tcl-buffer-append*
	$buf insert {n} {str}				*tcl-buffer-insert*
	往緩衝區中加入一行。如果使用 "insert" 選項，字符串成為新的第 {n} 行。
	而如果使用 "append"，它被插入在第 {n} 行之後。
	例如: >
		$buf insert top "This is the beginning."
		$buf append end "This is the end."
<	要往緩衝區裡加入多行，可以使用循環: >
		foreach line $list { $buf append $num $line ; incr num }
<
	$buf count					*tcl-buffer-count*
	報告緩衝區的行數。

	$buf delcmd {cmd}				*tcl-buffer-delcmd*
	註冊緩衝區的刪除回調函數 {cmd}。該命令 (在全局範圍下) 在緩衝區被刪除前
	調用。複雜的命令應該用 "list" 構造: >
		$buf delcmd [list puts vimerr "buffer [$buf number] gone"]
<	另見 |tcl-window-delcmd|。

	$buf delete {n}					*tcl-buffer-delete*
	$buf delete {n} {m}
	刪除緩衝區的第 {n} 行或者第 {n} 到 {m} 行。以下例子刪除除了末行以外的
	所有內容: >
		$buf delete first [expr [$buf last] - 1]
<
	$buf get {n}					*tcl-buffer-get*
	$buf get {n} {m}
	從緩衝區裡取得一行或多行。如果是前者，結果是字符串。如果是後者，結果是
	字符串列表。例如: >
		set topline [$buf get top]
<
	$buf last					*tcl-buffer-last*
	報告末行的行號。行號和 "::vim::lbase" 有關。參見 |tcl-var-lbase|。

	$buf mark {mark}				*tcl-buffer-mark*
	報告命名位置標記的位置。結果以字符串形式出現，類似於窗口命令的
	"cursor" 選項的光標位置 (參見 |tcl-window-cursor|)。它可以被轉換成 Tcl
	數組變量: >
		array set mpos [$buf mark "a"]
<	"mpos(column)" 和 "mpos(row)" 現在包含了標記的位置。如果標記沒有設置，
	產生標準 Tcl 錯誤。

	$buf name
	報告緩衝區使用的文件名。如果是無名緩衝區，返回空字符串。

	$buf number
	報告緩衝區號。參見 |:buffers|。
	以下示例從 vim 裡刪除一個緩衝區: >
		::vim::command "bdelete [$buf number]"
<
	$buf set {n} {string}				*tcl-buffer-set*
	$buf set {n} {m} {list}
	替換緩衝區裡的一行或多行。如果列表 {list} 裡包含超過被替換的行數，多餘
	的部分被插入。如果不足，則未替換的部分從緩衝區裡刪除。

	$buf windows					*tcl-buffer-windows*
	創建緩衝區對應的所有的窗口命令，返回所有命令名字的列表。
	示例: >
		set winlist [$buf windows]
		foreach win $winlist { $win height 4 }
<	參見 |tcl-window-cmds| 瞭解窗口命令可用的選項。

	$buf command [-quiet] {cmd}			*tcl-buffer-command*
	$buf expr {expr}				*tcl-buffer-expr*
	$buf option {opt} [val]				*tcl-buffer-option*
	它們和 "::vim::command" 類似，只不過執行在 $buf 代表的緩衝區的上下文
	下， 而不是當前緩衝區。例如，設置 "局部於緩衝區" 的選項涉及的是 $buf
	緩衝區。任何涉及或查詢窗口的命令使用的該緩衝區所處的窗口列表的第一個窗
	口 (亦即，"$buf windows" 所指定的首個窗口)。參見 |tcl-command|、
	|tcl-expr| 和 |tcl-option|。
	示例: >
		if { [$buf option modified] } { $buf command "w" }

==============================================================================
6. 雜項；Tcl 的輸出				*tcl-misc* *tcl-output*

標準 Tcl 命令 "exit" 和 "catch" 被定制的版本所取代。 "exit" 終止當前 Tcl 腳本
並返回 vim，並關閉 Tcl 解釋器。 下一個 ":tcl" 的調用相應的創建一個新的 Tcl 解
釋器。"exit" 並_不_終止 vim！"catch" 和原先的工作方式相同，只不過，它不能防止
腳本從 "exit" 退出。退出時，非零的結束代碼使得執行 Tcl 腳本的 Ex 命令生成一個
錯誤。

在 Tcl 裡，有兩個新的 I/O 流: "vimout" 和 "vimerr"。所有其上的輸出都在 vim 的
消息區域分別作為消息和錯誤顯示。標準的 Tcl 輸出流 stdout 和 stderr 被映射為
vimout 和 vimerr。從而，正常的 "puts" 命令可以用來在 vim 裡顯示消息。

==============================================================================
7. 已知的漏洞和問題					*tcl-bugs*

在 Tcl 裡調用另一個 Tcl 的 Ex 命令 (通過 "::vim::command") 可能有意想不到的副
作用。該命令創建的新的解釋器和標準的解釋器的能力相同。因而，在安全的子解釋器裡
使得 "::vim::command" 可用使得該子解釋器不再安全。 (為了防止這一點而防止嵌套的
:tcl* 調用很容易，但不切實際。因為根據具體的 vim 的配置，"::vim::command" 可以
在任何其他的腳本語言裡執行任何代碼。) 在這個新的解釋器裡 "exit" 不會影響舊的解
釋器；它只會終止新的解釋器，而舊解釋器的腳本處理繼續進行。

現在還不支持從標準輸入讀入。

==============================================================================
8. 示例:						*tcl-examples*

這裡提供若干簡短 (但可能有用) 的 Tcl 腳本。

此腳本對整個緩衝區進行排序 (不妨假設緩衝區內容包含名字或類似事物的列表): >
	set buf $::vim::current(buffer)
	set lines [$buf get top bottom]
	set lines [lsort -dictionary $lines]
	$buf set top bottom $lines

此腳本對緩衝區的行進行倒排。注意 "::vim::lbase" 和 "$buf last" 的正確使用，以
適用行號的所有可能情況。 >
	set buf $::vim::current(buffer)
	set t $::vim::lbase
	set b [$buf last]
	while { $t < $b } {
		set tl [$buf get $t]
		set bl [$buf get $b]
		$buf set $t $bl
		$buf set $b $tl
		incr t
		incr b -1
	}

此腳本為當前範圍的每行加上連續的行號: >
	set buf $::vim::current(buffer)
	set i $::vim::range(start)
	set n 1
	while { $i <= $::vim::range(end) } {
		set line [$buf get $i]
		$buf set $i "$n\t$line"
		incr i ; incr n
	}

用 ":tcldo" 可以更快地以兩個 Ex 命令完成同樣的工作: >
	:tcl set n 1
	:[range]tcldo set line "$n\t$line" ; incr n

此過程為每個緩衝區執行相同的 Ex 命令 (從 Ron Aaron 偷來的主意): >
	proc eachbuf { cmd } {
		foreach b [::vim::buffer list] {
			$b command $cmd
		}
	}
使用方法為: >
	:tcl eachbuf %s/foo/bar/g
小心使用 Tcl 的字符串和反斜槓替換，很麻煩。如果不確定，不妨在 Ex 命令前後括上
花括號。


如果你想為 vim 永久地加入若干 Tcl 過程，只要把它們放在一個文件裡 (例如在 Unix 
機器上，"~/.vimrc.tcl")，並在啟動文件裡 (在 Unix 上通常是 "~/.vimrc") 加入: >
	if has("tcl")
		tclfile ~/.vimrc.tcl
	endif

==============================================================================
9. 動態調入						*tcl-dynamic*

MS-Windows 上，可以動態調入 Tcl 庫。|:version| 輸出這時應包括 |+tcl/dyn|。

這意味著 Vim 只有在必要時才尋找 Tcl DLL 文件。如果不使用 Tcl 接口，你就不需要
它。這樣，即使沒有該 DLL 文件，你也可使用 Vim。

要使用 Tcl 接口，Tcl DLL 必須在搜索路徑上。控制台窗口裡輸入 "path" 可以看到
(搜索路徑) 當前使用的目錄。

DLL 的名字必須匹配 Vim 編譯時所使用的 Tcl 版本。目前，該名字為 "tcl83.dll"，也
就是 Tcl 8.3。要確信這一點，編輯 "gvim.exe" 文件並查找 "tcl\d*.dll\c"。

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
