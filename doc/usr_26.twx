*usr_26.txt*	For Vim version 7.3	最近更新：2005年3月

		     VIM 用戶手冊 - Bram Moolenaar 著
		  譯者： Chimin Yen http://vimcdoc.sf.net
				    
				  重複


編輯工作往往不是雜亂無章的。同一個修改動作常常會被重複多次。在本章中，我們將解
釋幾種有用的重複修改動作的方法。

|26.1|	可視模式下的重複
|26.2|	加與減
|26.3|	改動多個文件
|26.4|	在 shell 腳本裡使用 Vim

       下一章: |usr_27.txt|  查找命令及模式
       前一章: |usr_25.txt|  編輯帶格式的文本
         目錄: |usr_toc.txt|

==============================================================================
*26.1*	可視模式下的重複

可視模式在反覆修改一段文本方面十分方便。你可以看見高亮的文本，從而確定是否改對
了地方。但選擇文本也得打幾個字。"gv" 命令再次選擇上次選過的文本，讓你對同一段
文本再作別的修改。
   假定你有幾行文本，你要把其中的 "2001" 改成 "2002"，以及 "2000" 改成 "2001":

	The financial results for 2001 are better ~
	than for 2000.  The income increased by 50%，~
	even though 2001 had more rain than 2000. ~
			2000		2002 ~
	income		45,403		66,234 ~

首先把 "2001" 改成 "2002"。在可視模式下選擇這幾行文本，並執行: >

	:s/2001/2002/g

現在用 "gv" 命令再次選擇同一文本。光標在哪兒都沒關係。然後用 ":s/2000/2001/g"
命令作第二項修改。
   很明顯，你可以多次重複這些動作。

==============================================================================
*26.2*	加與減

當你反覆地把一個數改成另一個時，你常遇到定值的偏移。在上例中，每個年份都加了
一。與其為每個要修改的年份都鍵入一個替換命令，不如利用 CTRL-A 命令。
   在上面這段文本中搜索年份: >

	/19[0-9][0-9]\|20[0-9][0-9]

現在按 CTRL-A。找到的年份增加了一:

	The financial results for 2002 are better ~
	than for 2000.  The income increased by 50%，~
	even though 2001 had more rain than 2000. ~
			2000		2001 ~
	income		45,403		66,234 ~

用 "n" 命令找到下一個年份，並按 "." 重複 CTRL-A 命令 (鍵入 "." 會快一點兒)。為
所有找到的年份重複 "n" 和 "."。
   提示: 設定 'hlsearch' 選項以突顯那些你要修改的數字，然後你可以提前觀察並修
改得快些。

你可以在 CTRL-A 之前附加數字來增加一個大於一的數。假定你有這麼個列表:

	1. item four ~
	2. item five ~
	3. item six ~

把光標移到 "1." 上並鍵入: >

	3 CTRL-A

那個 "1." 就變成了 "4."。同樣，你可以用 "." 命令對其它數字重複這項修改。

再看一個例子:

	006	foo bar ~
	007	foo bar ~

在這些數字上執行 CTRL-A 產生了以下結果:

	007	foo bar ~
	010	foo bar ~

7 加 1 等於 10? 這是因為 Vim 根據首位出現的 "0" 而誤以為 "007" 是個八進位數
字。這種表示法常用於 C 程序。如果你不要首位為 "0" 的數字被處理成八進位數字，請
用這個命令: >

	:set nrformats-=octal

CTRL-X 命令用於減數字，用法與加數字類似。

==============================================================================
*26.3*	改動多個文件

假定你有個變量名為 "x_cnt" 而你要把他改為 "x_counter"。這個變量在多個 C 文件都
被用到了。你需要在所有文件中作此改動。你得這麼做。
   把所有相關文件放進參數列表: >

	:args *.c
<
這個命令會找到所有的 C 文件並編輯其中的第一個。現在你可以對所有這些文件執行替
代命令: >

	:argdo %s/\<x_cnt\>/x_counter/ge | update

命令 ":argdo" 把另一個命令當作其參數。而後者將對參數列表內所有的文件執行。
   作為參數的替代命令 "%s" 作用於所有文本行。它用 "\<x_cnt\>" 來查找 "x_cnt"。
"\<" 和 "\>" 用來指定僅匹配那些完整的詞，而不是 "px_cnt" 或 "x_cnt2"。
   替代命令的標誌位中包含 "g"，用以置換同一行文本內出現的所有的匹配 "x_cnt"。
標誌位 "e" 用於避免因文件中找不到 "x_cnt" 而出現錯誤信息。否則 ":argdo" 命令就
會在遇到第一個找不到 "x_cnt" 的文件時中斷。
   字符 "|" 分隔兩條命令。後面的 "update" 命令將那些有改動的文件存盤。如果沒有
"x_cnt" 被改成 "x_counter"，這個命令什麼也不做。

還有一個 ":windo" 命令，用於在所有窗口內執行其參數所規定的命令。以及 ":bufdo"
命令，對所有緩衝區執行其參數所規定的命令。使用中要小心，因為你在緩衝區列表中的
文件數量可能超過你能想像的。請用 ":buffers" 命令 (或 ":ls") 來檢查緩衝區列表。

==============================================================================
*26.4*	在 shell 腳本裡使用 Vim

假定你要在很多文件內把字符串 "-person-" 改成 "Jones"，然後把它們打印出來。你該
怎麼做？一種方法是鍵入許許多多命令。另一種是寫個 shell 腳本來完成這件工作。
   作為一個可視的交互式的編輯器，Vim 在執行普通模式命令時表現得極為出色。然而
在批量處理時，普通模式命令無法產生簡潔的帶有註釋的命令文件；在此，你該轉而利用
Ex 模式。該模式為你提供一種友好的命令行界面，方便你把命令寫進一個批處理文件。
("Ex 命令" 無非是命令行 (:) 命令的另一個名稱。)
   以下就是你所需要的 Ex 模式命令: >

	%s/-person-/Jones/g
	write tempfile
	quit

你把這些命令放進文件 "change.vim" 裡。現在就用這個 shell 腳本在批量模式下運行
編輯器: >

	for file in *.txt; do
	  vim -e -s $file < change.vim
	  lpr -r tempfile
	done

循環 for-done 是一個 shell 結構，用來重複執行循環結構內的兩行命令，而變量
$file 則在每次循環時被設成不同的文件名。
   腳本第二行的作用是對文件 $file 運行 Vim 且在 Ex 模式下 (參數 -e)，並從文件
"change.vim" 讀取命令。參數 -s 告訴 Vim 運行在安靜模式下。換言之，不要持續不斷
的發出 :prompt，或針對那個問題發出的任何別的提示。
   命令 "lpr -r tempfile" 打印執行中產生的文件 "tempfile" 並把它刪除 (是參數
-r 的作用)。


從 標 准 輸 入 讀 取

Vim 能從標準輸入讀取文本。由於通常從那裡讀取的是命令，你得告訴 Vim 你讀的是文
本。這需要在通常是文件名的地方傳送一個參數 "-"。例如: >

	ls | vim -

這個命令讓你編輯 "ls" 命令的輸出結果，而不必先把那些輸出文本存入一個文件。
   如果你從標準輸入讀取文本，那麼你可以用參數 "-S" 來讀取腳本: >

	producer | vim -S change.vim -


普 通 模 式 腳 本

如果你真的要在腳本內利用普通模式命令，你可以這樣來用: >

	vim -s script file.txt ..。
<
	注意:
	當 "-s" 不與 "-e" 一起用時，它的意思是不同的。此時，它的意思是把文件
	"script" 裡的命令當作普通模式命令來執行。而與 "-e" 一起用時，它的意思
	是保持安靜，並不會把下一個參數視為文件名。

文件 "script" 裡的命令就像你鍵入它們那樣得到執行。別忘了換行符被解釋成按下回車
鍵 <Enter>。在普通模式下該鍵把光標移到下一行。
   要創建這麼一個腳本你可以編輯這個腳本文件，鍵入那些命令。你得想像每個命令會
產生什麼樣的結果。這可不那麼容易。另一種方法是在你手動執行那些命令時把它們記錄
下來。你可以採用下面的方法: >

	vim -w script file.txt ..。

所有鍵入的字符都將被寫進文件 "script"。如果你犯了個小錯誤，不妨繼續輸入。但要
記得事後更正一下這個腳本文件。
   參數 "-w" 會將新鍵入的命令附加在一個已存在的腳本文件末尾。這在你需要一點兒
一點兒記錄該腳本時是很不錯的。但當你要從零開始重新記錄你的腳本時，你則需要用
"-W" 參數。該參數重寫任何已存在的文件。

==============================================================================

下一章: |usr_27.txt|  搜索命令和模式

版權: 參見 |manual-copy:wright|  vim:tw=78:ts=8:ft=help:norl:
